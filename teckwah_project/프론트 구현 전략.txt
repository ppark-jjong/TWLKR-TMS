# 배송 실시간 관제 시스템 프론트엔드 상세 구현 전략

본 문서는 **루트 명세서**를 준수하면서도,  
"단순성 우선" & "YAGNI" 원칙을 최대한 살린 **프론트엔드 구현 전략**을 일관되게 정리한 것입니다.  
이 전략은 불필요하거나 충돌되는 내용을 제거·개선하여, **1인 개발자가 빠르고 간결하게** 작업할 수 있도록 구성되었습니다.

--------------------------------------------------------------------------------
1. 프로젝트 개요
--------------------------------------------------------------------------------
- **목적**: 실시간 배송 주문 및 배차 현황을 모니터링하고, 관리자 권한을 통해 엑셀 다운로드, 삭제 등의 기능을 제공하는 **사내 대시보드**를 구현합니다.
- **프론트 기술 스택**: React 18.x, React Query, Axios, Ant Design(antd) 5.x
- **준수사항**:
  - 루트 명세서에 정의된 “단순성 우선”, “명시적 액션 중심”, “프론트엔드 검증 중심” 원칙 유지
  - **JWT 인증**, **비관적 락(Pessimistic Lock)**, **권한 분리(일반/관리자)** 필수 반영
  - “추가 구현은 최소화(YAGNI)”: 지금 필요한 기능만 빠르게 구현

--------------------------------------------------------------------------------
2. 폴더 구조
--------------------------------------------------------------------------------
아래는 **가장 간단하고 직관적인** 구조 예시입니다.  
추가적인 세분화(예: contexts/, hooks/ 등)는 **실제 기능 필요 시** 최소한으로 적용합니다.

src/ ├── pages/ # 라우트(페이지) 단위 컴포넌트 │ ├── LoginPage.js │ ├── DashboardPage.js │ ├── VisualizationPage.js │ ├── AdminPage.js │ └── NotFoundPage.js ├── components/ # 재사용 UI 컴포넌트 │ ├── CommonModal.js │ ├── LockConflictModal.js │ ├── LoadingSpinner.js │ └── ... ├── utils/ # API 호출, 토큰/날짜 처리 등 유틸 함수 │ ├── api.js │ ├── authHelpers.js │ └── ... ├── styles/ # 전역 스타일(CSS, 테마 등) ├── App.js # 전체 라우팅, 레이아웃(헤더/사이드바) 관리 └── index.js # 진입점 (ReactDOM.render 혹은 createRoot)


- **pages/**: 페이지별로 구분해 UI·비즈니스 로직을 구성  
- **components/**: 여러 곳에서 재사용 가능한 UI 요소(모달, 버튼, 공용 컴포넌트 등)  
- **utils/**: 공통 유틸리티(axios 설정, 토큰 관리, 날짜 변환 등)  
- **styles/**: 전역 스타일(테마 설정, 글로벌 CSS)  
- **App.js**: `React Router`로 페이지를 연결하고, 최상위 레이아웃을 구성  
- **index.js**: 프로젝트 시작점 (렌더링, 전역 에러바운더리 등)  

--------------------------------------------------------------------------------
3. 페이지별 상세 명세
--------------------------------------------------------------------------------

## 3.1 LoginPage
- **역할**: 사용자 로그인 (JWT 발급), 인증 상태 시작점
- **디자인**:
  - 아이디/비밀번호 입력 폼 (필수: UI에서 유효성 검사)
  - “로그인” 버튼 + 로딩 인디케이터
  - 로그인 실패 시 antd 알림(메시지)로 에러 표시
- **기능 상세**:
  1) **로그인 요청**: 아이디/비번 유효 → `utils/api.js`에서 `POST /auth/login`
  2) **토큰 저장**: 응답이 success면 액세스 토큰 + 리프레시 토큰을 `localStorage` or `authHelpers.js`로 관리  
  3) **에러 처리**: 로그인 실패 시 `error_code`, `message`를 받아 사용자에게 표시  
  4) **리디렉션**: 로그인 성공 → `/dashboard` 페이지 이동  

## 3.2 DashboardPage
- **역할**: 실시간 배송 주문 현황 확인 & 상태 변경/배차
- **디자인**:
  - 상단에 **필터 영역**(날짜, 상태, 기사명 등)
  - **주문 목록 테이블**(페이징, 검색 기능 포함)
  - 항목 클릭 시 **상세 모달** or **배차/상태 변경 모달** 표시
- **기능 상세**:
  1) **데이터 조회**: 마운트 시 React Query or Axios로 `/orders/list` 호출  
  2) **검색/필터**: 프론트에서 UI 중심으로 유효성 검사 후 백엔드 요청  
  3) **상태 변경(비관적 락)**:  
     - 상태 변경 버튼 클릭 시 Lock 획득 API 호출 (`POST /orders/lock?id=...`)  
     - 충돌 시 `LockConflictModal` 표시 → 사용자 안내 (“다른 사용자가 편집 중”)  
     - 락 성공 시 상태 변경 → “저장” 후 락 해제 API 호출  
  4) **다중 항목 작업**: 여러 행 선택 → 배치 처리 → 모든 항목 락 획득 실패 시 전체 롤백  
  5) **UI 주의**: 로딩 시 `LoadingSpinner` 표시, 빈 결과 시 “데이터 없음” 안내  

## 3.3 VisualizationPage
- **역할**: 배송/배차 통계를 시각화(차트, 그래프)
- **디자인**:
  - 상단에 날짜 범위, 상태 필터
  - 아래쪽에 **차트/그래프 컴포넌트**(예: antd-charts, Recharts 등)
  - 요약 카드(총 주문 수, 배정 대기 수 등)
- **기능 상세**:
  1) **데이터 로드**: `/analysis/stats` API (필터 조건 포함)  
  2) **차트 표시**: 배송 상태, 시간대별 물량 등 시각화  
  3) **반응형 처리**: 데스크톱 우선, 필요 시 모바일 레이아웃 대응  
  4) **오류/데이터 없음**: “현재 기간 내 데이터가 없습니다.” 표기  

## 3.4 AdminPage
- **역할**: 엑셀 다운로드, 삭제 등 **관리자 전용 기능** 제공
- **디자인**:
  - **다운로드 섹션**: 날짜 범위 입력 + “엑셀 다운로드” 버튼
  - **삭제 섹션**: 특정 주문(또는 전체) 삭제 → 다중 선택 후 “삭제”
- **기능 상세**:
  1) **권한 체크**: 일반 사용자가 접근 시 403 or 리디렉션  
  2) **엑셀 다운로드**: 3개월 이내 범위 검증 → `GET /admin/excel` → 파일 다운로드  
  3) **삭제**:  
     - 다건 선택 후 락 획득 → 삭제 API → 성공 시 재로드  
     - 하나라도 락 충돌 시 전체 작업 취소  
     - 삭제 전 `CommonModal` 열어 확인(“정말 삭제하시겠습니까?”)  
  4) **오류 처리**: 권한 부족 → 403 에러 시 알림  

## 3.5 NotFoundPage
- **역할**: 유효하지 않은 URL 접근 시 노출
- **디자인**:
  - “존재하지 않는 페이지입니다” 간단 안내
  - 홈으로 돌아가기 버튼
- **기능**:
  - 클릭 시 `/`(또는 `/dashboard`)로 리디렉션

--------------------------------------------------------------------------------
4. 주요 컴포넌트별 설명
--------------------------------------------------------------------------------

### 4.1 CommonModal
- **역할**: 공용 모달(확인, 경고 등)  
- **디자인**: Ant Design Modal 래핑  
- **사용 예시**: 관리자 삭제 확인, 오류 안내 등  

### 4.2 LockConflictModal
- **역할**: **비관적 락 충돌** 시 사용자 안내
- **디자인**: “다른 사용자가 편집 중입니다” + [대기] [취소] 버튼
- **동작**:
  - 대기 시 잠시 후 재시도 or 대기 타이머
  - 취소 시 편집 작업 중단  

### 4.3 LoadingSpinner
- **역할**: 로딩 상태 시 UI 표시
- **디자인**: Ant Design `Spin` 또는 간단한 Spinner
- **사용 위치**: 데이터 페칭, API 호출 시

### 4.4 그 외
- **Table, Button, Form, Input** 등은 대부분 Ant Design의 컴포넌트를 직접 사용  
- 필요 시 theme override 가능(단, 과도한 커스터마이징은 지양)

--------------------------------------------------------------------------------
5. 유틸/핵심 로직
--------------------------------------------------------------------------------

### 5.1 utils/api.js
- **Axios 인스턴스** 설정
  - Base URL, timeout, 공통 헤더(JWT) 등
  - 응답 인터셉터: `success: false` 시 에러 throw
  - 토큰 만료 → 재로그인 유도
- **예시 함수**: `fetchOrders`, `updateStatus`, `lockOrder`, etc.

### 5.2 utils/authHelpers.js
- **토큰 관리**: `localStorage.setItem("access_token", ...)`
- **토큰 갱신**: 리프레시 토큰이 유효하면 재발급 요청
- **권한(관리자 여부) 확인**: 토큰 payload에 role이 "admin" 인지 체크

### 5.3 에러 처리
- **공통 에러 형식**: `{"success": false, "error_code": "...", "message": "..."}`  
- `error_code` 예시: `LOCK_CONFLICT`, `UNAUTHORIZED`, `FORBIDDEN`, etc.
- 프론트에서 구분 처리 → 사용자 메시지 안내

--------------------------------------------------------------------------------
6. 페이지 간 데이터 흐름
--------------------------------------------------------------------------------
1) **로그인** → 토큰 저장  
2) **DashboardPage** 진입 시, `fetchOrders` → 목록 렌더  
3) 편집/삭제 버튼 → `lockOrder` → 락 획득 실패 시 `LockConflictModal`  
4) 락 성공 시 **상태 변경/삭제** → 성공 후 `unlockOrder`  
5) **VisualizationPage** → 통계 API 호출 → 차트 표시  
6) **AdminPage** → 관리자 확인 → 다운로드/삭제 API 호출  

--------------------------------------------------------------------------------
7. 디자인·UX 참고사항
--------------------------------------------------------------------------------
- **단순성**: 자동화 대신 명시적 버튼(“저장”, “다운로드”)을 통해 사용자 제어
- **색상·스타일**: 루트 명세서의 색상 체계 준수 (팀/상태별로 시각 구분)
- **반응형**: PC 우선 디자인, 모바일은 최소 대응
- **오류·빈 데이터**: 사용자 친화적 메시지(“데이터 없음”, “권한 없음” 등)

--------------------------------------------------------------------------------
8. 유지보수 및 확장 지침
--------------------------------------------------------------------------------
- **YAGNI 준수**: 현재 필요한 기능 외 추상화, 폴더 세분화, 라이브러리 도입은 지양
- **추후 필요** 시:
  - TypeScript 도입, contexts/ 폴더, hooks/ 폴더 추가
  - 성능 최적화(코드 스플리팅, 메모이제이션) 세밀 조정
- **루트 명세서의 DB 정책**(1개월 데이터 유지, 비관적 락)을 엄수
- **보안**: JWT 토큰 보호(httpOnly 쿠키 권장), CSRF/ XSS 방어는 기본 적용
- **Docker 배포**: build 시 정적 파일 → Nginx 등으로 서빙 (FastAPI + React 단일 컨테이너)

--------------------------------------------------------------------------------
9. 결론
--------------------------------------------------------------------------------
이 문서는 **중복·충돌 없는 최종 프론트엔드 구현 전략**이며,  
- **폴더 구조**: 최대한 간단하게 유지  
- **페이지 구성**: Login, Dashboard, Visualization, Admin, NotFound (필수 기능만)  
- **비관적 락, 권한 분리, JWT 인증**: 반드시 반영  
- **디자인**: Ant Design 활용, 사용자에게 명시적 동작 옵션 제공  
- **확장성**: 프로젝트 규모 커지면 구조·기능 점진적 확대

위 전략에 따라 구현 시, **1인 개발 환경**에서도 빠르게 서비스 가능한 **실시간 배송 관제 대시보드**를 완성할 수 있습니다.
