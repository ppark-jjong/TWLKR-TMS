[프로젝트 개요]
프로젝트 명: 배송 실시간 관제 시스템 및 데이터 시각화 서비스
배포 환경: 단일 컨테이너 (Google App Engine), 로컬 테스트 시 Docker Desktop
라이선스: 모든 코드 구축에 사용되는 패키지/라이브러리는 무료 버전 사용 (단, GAE 관련 유료 라이선스 제외)


[기술 스택]
Frontend: React (Create React App, JavaScript), Ant Design, jsdoc
Backend: FastAPI (Python)
Database: MySQL (Cloud SQL)
특이 사항: DB 트리거 (trg_dashboard_before_insert_postal)를 통해 대시보드 생성 시 postal_code 기반 정보(city, district, distance, duration_time) 자동 업데이트


[공통 사항]
JWT 인증:
토큰: 액세스 토큰 (60분 만료), 리프레시 토큰 (7일 만료; DB 저장)
클라이언트: 로그인 시 localStorage에 저장, axios 인터셉터를 통해 모든 API 요청 시 Authorization: Bearer <토큰> 헤더 자동 포함
서버: 모든 API 엔드포인트에서 FastAPI의 Depends를 활용해 JWT 검증, 만료/유효하지 않은 경우 401 Unauthorized 응답
응답 형식: 모든 API는 JSON 형식으로 성공/실패 여부 및 구체적인 메시지 반환
[Frontend 요구사항]
로그인 페이지

디자인: 간단한 로그인 화면, public 폴더의 logo.png 활용
기능:
사용자 입력 (ID, 비밀번호) 및 클라이언트 측 검증
/auth/login API 요청 후 성공 시 JWT 토큰 저장 및 Dashboard 페이지로 이동
실패 시 구체적 에러 메시지 표시
좌측 사이드바 (내비게이션)

표시 정보: 사용자 이름, 부서 (user 테이블의 user_department), 로고
메뉴: 배송현황 (Dashboard), 통계 (Visualization), 로그아웃 (API 호출 후 토큰 삭제 및 로그인 페이지 이동)
Dashboard 페이지 (실시간 배송 현황)

초기 로드: 오늘 날짜(YYYY-MM-DD) 기준 eta가 일치하는 대시보드 리스트 API 요청
상단 고정 영역: 검색 바, 부서 필터 드롭다운, 대시보드 생성, 배차, 새로고침, 삭제 버튼
검색/필터: 프론트엔드 측 구현, 페이지네이션(최대 50행)도 프론트엔드 처리
테이블 구성:
컬럼: 체크박스, type(종류), department(부서), warehouse(출발 허브), driver_name(담당 기사), order_no, status(배송 상태; WAITING→대기, IN_PROGRESS→진행, COMPLETE→완료, ISSUE→이슈, CANCEL→취소소), eta(YYYY-MM-DD HH:MM), region(도착 지역), depart_time(출발 시각)
행 UI: 상태별 색상 적용 (대기: 회색, 진행: 노란색, 완료: 초록색, 이슈: 빨간색)
날짜 선택: 상단에 현재 선택 날짜 표시, 달력 컴포넌트 통해 날짜 변경 시 API 재요청
행 선택 및 액션:
배차 기능:
선택된 행 없으면 알림
대기 상태인 항목만 배차 가능 (이미 배차된 항목은 수정 가능)
모달 창 내 선택된 order_no 목록과 driver_name, driver_contact 입력 (연락처 입력 시 자동 ‘-’ 삽입) → 입력 검증 후 배차 API 호출
삭제 기능: 선택된 행 중 상태가 대기인 경우에 한해 dashboard_id 리스트 기반 삭제 API 호출
대시보드 생성 모달:
입력 필드: type, order_no, department (자동 입력), warehouse, sla, eta (24시간 형식), postal_code, address, customer, contact, remark
생성 버튼 → 생성 API 호출
대시보드 상세 정보 모달:
행 클릭 시 dashboard_id 기반 상세 정보 조회 API 호출
표시 항목: type, department, warehouse, driver_name, driver_contact, order_no, eta, status, create_time, depart_time, complete_time, address, distance, duration_time, customer, contact, remark
수정 기능: 모달 내에서 status(드롭다운 형식)와 remark 별도 수정 API 호출
시각화 페이지 (통계/데이터 분석)

초기 상태: “배송 현황” 주제로 API 호출, 원형 그래프 카드 형태 시각화
옵션 선택:
상단 드롭다운: “배송 현황” vs “시간별 접수량”
날짜 기간 선택: 시작일과 종료일 (YYYY-MM-DD, 시간은 “00:00”, 범위는 오늘 기준 1개월 이내 → 범위 초과 시 알림)
API 요청:
배송 현황: 선택 기간 내 dashboard.eta 데이터 기반 전체 건수 및 상태별 건수/비율 산출 → 각 상태별 원형 그래프 데이터 반환
시간별 접수량: 선택 기간 내 dashboard.create_time을 1시간 단위로 그룹핑하여 막대그래프 데이터 반환
[Backend 요구사항 (FastAPI)]
프로젝트 구조

폴더:
api: API 엔드포인트 (예: /auth, /dashboard, /visualization)
services: 비즈니스 로직 처리
repositories: 데이터 접근 로직
models: MySQL 기반 DB 모델 (Cloud SQL, 인덱스: eta, 트리거: trg_dashboard_before_insert_postal)
schemas: API 요청/응답 JSON 스키마
인증 및 사용자 관리 (/auth)

로그인 API:
요청: JSON 형식으로 user_id와 password 전달
처리: bcrypt를 통한 비밀번호 해싱 및 비교, 인증 성공 시 JWT 액세스 토큰(60분)과 리프레시 토큰(7일, DB 저장) 발급
응답: 두 토큰 반환

토큰 갱신 API:
요청: 저장된 리프레시 토큰 전달
처리: 리프레시 토큰 검증 후 새로운 액세스 토큰(필요 시 갱신된 리프레시 토큰) 발급
응답: 새로운 액세스 토큰 반환

로그아웃 API:
요청: 사용자 식별 정보 포함 로그아웃 요청
처리: 해당 사용자의 리프레시 토큰 DB 삭제(무효화)
응답: 로그아웃 성공 메시지 반환
인증 미들웨어: 모든 API에서 Authorization 헤더의 JWT 검증 (만료, 위조 시 401 Unauthorized)

Dashboard 기능 (/dashboard)

대시보드 생성 API:
요청: JSON으로 type, order_no, department(로그인 사용자 부서 자동 입력), warehouse, sla, eta, postal_code, address, customer, contact, remark 전달
처리: DB에 레코드 생성 → 생성 시 트리거를 통해 postal_code 기반 자동 업데이트
응답: 생성된 대시보드 정보 반환
대시보드 삭제 API:
요청: 삭제할 dashboard_id 리스트(JSON) 전달
처리: 여러 대시보드 레코드 삭제 (상태 대기인 경우에만)
대시보드 리스트 조회 API:
요청: dashboard.eta 기준(기본 오늘, YYYY-MM-DD) 조회, 검색 및 부서 필터는 프론트엔드에서 구현
응답: type, department, warehouse, driver_name, order_no, depart_time, eta, status, region 등의 데이터 반환
대시보드 상세 조회 API:
요청: dashboard_id 전달
응답: 상세 정보 (type, department, warehouse, driver_name, driver_contact, order_no, eta, status, create_time, depart_time, complete_time, address, distance, duration_time, customer, contact, remark) 반환
대시보드 수정 API:
상태 변경: dashboard_id와 변경할 status 전달
변경 시, waiting → in_progress면 depart_time 업데이트, in_progress → complete/issue면 complete_time 업데이트
remark 수정: dashboard_id와 새로운 remark 전달 → 별도 API 호출
배차 기능 API:
요청: 선택된 dashboard_id 리스트와 driver_name, driver_contact 전달 (상태 대기인 경우만 업데이트)
응답: 배차 성공 여부 반환
시각화 기능 (/visualization)

배송 현황 API:
요청: 기간 정보(시작일, 종료일; YYYY-MM-DD, 시간 “00:00” 고정) 포함
처리: 선택 기간 내 dashboard.eta 기준 전체 건수 및 상태별 건수/비율 산출
응답: 카드형 및 원형 그래프에 필요한 JSON 데이터 반환
시간별 접수량 API:
요청: 기간 정보 포함
처리: dashboard.create_time을 기준으로 1시간 단위 그룹핑, 각 시간대별 건수 집계
응답: 막대그래프 데이터에 필요한 JSON 반환
에러 핸들링

모든 API는 JSON 형식 응답
JWT, 인증, 데이터 유지 관련 오류 시 명확한 에러 코드 및 메시지 제공
