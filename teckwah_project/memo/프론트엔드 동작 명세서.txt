# 배송 실시간 관제 시스템 프론트엔드 동작 명세서

## 1. 개요 및 아키텍처

### 1.1 프론트엔드 아키텍처 개요

본 문서는 배송 실시간 관제 시스템의 프론트엔드 구현에 대한 상세 명세서입니다. 프론트엔드는 Python 기반 Dash 프레임워크를 사용하여 구현되며, 백엔드 FastAPI와 연동됩니다.

- **주요 프레임워크**: Dash, Dash Bootstrap Components
- **통신 방식**: HTTP 기반의 REST API 호출 (requests 모듈 사용)
- **상태 관리**: dcc.Store 컴포넌트와 Dash 콜백 시스템
- **데이터 시각화**: Plotly 그래프 객체
- **반응형 UI**: Dash Bootstrap Components 활용

### 1.2 아키텍처 레이어

- **레이아웃 레이어**: 페이지 구조와 UI 컴포넌트 정의
- **콜백 레이어**: 사용자 상호작용 처리 및 데이터 흐름 관리
- **데이터 접근 레이어**: 백엔드 API 통신 처리
- **공통 유틸리티**: 포맷팅, 데이터 변환, 에러 처리 등

## 2. 페이지별 동작 명세

### 2.1 로그인 페이지

#### 2.1.1 레이아웃 구성
- 로고 및 시스템 타이틀
- 사용자 ID 입력 필드 (문자열)
- 비밀번호 입력 필드 (마스킹 처리)
- 로그인 버튼
- 오류 메시지 표시 영역

#### 2.1.2 동작 흐름
1. 사용자가 ID와 비밀번호 입력 후 로그인 버튼 클릭
2. 로딩 상태로 전환 (버튼 비활성화 + 스피너)
3. 백엔드 API 호출: `/auth/login` (POST)
4. 응답 처리:
   - 성공 시: 토큰 및 사용자 정보 저장 후 대시보드 페이지로 리다이렉트
   - 실패 시: 오류 메시지 표시 및 입력 필드 초기화

#### 2.1.3 토큰 관리
- JWT 토큰은 dcc.Store에 저장 (storage_type='session')
- 사용자 정보도 dcc.Store에 저장 (storage_type='session')
- 페이지 새로고침/재방문 시 토큰 유효성 검증

### 2.2 대시보드/배차 페이지

#### 2.2.1 레이아웃 구성
- **헤더 영역**:
  - 페이지 타이틀
  - 날짜 선택기 (ETA 기준 필터링)
  - 주문번호 검색 필드
  - 액션 버튼 (신규 등록, 배차, 삭제(관리자만), 새로고침)
- **필터 영역**:
  - 종류 필터 (배송/회수)
  - 부서 필터 (CS/HES/LENOVO)
  - 출발 허브 필터 (서울/부산/광주/대전)
  - 필터 적용/초기화 버튼
- **테이블 영역**:
  - DataTable 컴포넌트 (체크박스 열 포함)
  - 페이지네이션 (기본 50개 항목)
  - 로딩 상태 및 빈 데이터 표시

#### 2.2.2 데이터 로드 흐름
1. 페이지 접근 시 자동으로 최근 7일 데이터 로드 
2. 백엔드 API 호출: `/dashboard/list` (POST)
   - 요청 데이터: { start_date, end_date }
   - 헤더: Authorization Bearer 토큰
3. 응답 데이터를 DataTable 컴포넌트에 바인딩
4. 날짜 변경 시 데이터 재로드

#### 2.2.3 상세 정보 모달
1. 테이블 행 클릭 시 상세 정보 모달 표시
2. 백엔드 API 호출: `/dashboard/{dashboard_id}` (GET)
3. 락 상태 확인 및 표시
4. 모달 내 컴포넌트:
   - 주문 상세 정보 표시 섹션
   - 상태 변경 버튼
   - 정보 수정 버튼/폼
   - 메모 섹션

#### 2.2.4 배차 처리 흐름
1. 테이블에서 대기(WAITING) 상태 주문 다중 선택
2. 배차 버튼 클릭 시 배차 모달 표시
3. 기사 정보 입력 (기사명, 연락처)
4. 백엔드 API 호출: `/dashboard/assign` (POST)
   - 요청 데이터: { dashboard_ids, driver_name, driver_contact }
5. 성공 시 테이블 데이터 갱신 및 성공 메시지
6. 실패 시 오류 메시지 표시

#### 2.2.5 상태 변경 흐름
1. 상세 모달에서 상태 변경 버튼 클릭
2. 상태 변경 확인 창 표시
3. 락 획득 시도: `/dashboard/{dashboard_id}/lock` (POST)
   - 요청 데이터: { lock_type: "STATUS" }
4. 락 획득 성공 시 상태 변경 API 호출: `/dashboard/{dashboard_id}/status` (PATCH)
   - 요청 데이터: { status, is_admin }
5. 락 해제: `/dashboard/{dashboard_id}/lock` (DELETE)
6. 테이블 데이터 갱신

#### 2.2.6 필드 편집 흐름
1. 상세 모달에서 편집 버튼 클릭
2. 락 획득 시도: `/dashboard/{dashboard_id}/lock` (POST)
   - 요청 데이터: { lock_type: "EDIT" }
3. 락 획득 성공 시 편집 모드 활성화
4. 저장 버튼 클릭 시 필드 업데이트 API 호출: `/dashboard/{dashboard_id}/fields` (PATCH)
5. 락 해제: `/dashboard/{dashboard_id}/lock` (DELETE)
6. 상세 정보 갱신

### 2.3 시각화 페이지

#### 2.3.1 레이아웃 구성
- **헤더 영역**:
  - 차트 타입 선택기
  - 날짜 범위 선택기
  - 새로고침 버튼
- **차트 영역**:
  - 배송 현황 파이 차트 영역
  - 시간대별 접수량 차트 영역
  - 통계 카드 영역
  - 로딩 상태 및 빈 데이터 표시

#### 2.3.2 데이터 로드 흐름
1. 페이지 접근 시 기본 설정(최근 7일, 배송 현황)으로 데이터 로드
2. 차트 타입에 따라 API 호출:
   - 배송 현황: `/visualization/delivery_status` (POST)
   - 시간대별 접수량: `/visualization/hourly_orders` (POST)
3. 요청 데이터: { start_date, end_date }
4. 응답 데이터를 Plotly 그래프 객체로 변환하여 표시
5. 날짜 또는 차트 타입 변경 시 데이터 재로드

#### 2.3.3 인터랙티브 차트 동작
1. 파이 차트 호버 시 상세 정보 툴팁 표시
2. 막대 그래프 호버 시 상세 정보 툴팁 표시
3. 차트 컴포넌트 크기 조절 시 반응형 리사이징
4. 각 부서별 통계 요약 카드에 하이라이트 효과

### 2.4 다운로드(관리자) 페이지

#### 2.4.1 레이아웃 구성
- 페이지 타이틀 및 설명
- 날짜 범위 선택기
- 다운로드 버튼
- 관리자 권한 검증 메시지 영역

#### 2.4.2 데이터 다운로드 흐름
1. 날짜 범위 선택 후 다운로드 버튼 클릭
2. 로딩 상태로 전환
3. 백엔드 API 호출: `/download/excel` (POST)
   - 요청 데이터: { start_date, end_date }
   - 헤더: Authorization Bearer 토큰
4. 응답 바이너리 데이터를 파일로 저장
5. 실패 시 오류 메시지 표시

#### 2.4.3 권한 관리
1. 페이지 접근 시 사용자 권한 확인
2. 일반 사용자 접근 시 접근 제한 메시지 표시 및 대시보드 페이지로 리다이렉트

## 3. 공통 UI 요소 및 컴포넌트

### 3.1 네비게이션/사이드바

#### 3.1.1 구성
- 로고 및 시스템 명
- 사용자 정보 표시 (이름, 부서)
- 페이지 네비게이션 메뉴
  - 대시보드/배차 (모든 사용자)
  - 시각화 (모든 사용자)
  - 다운로드 (관리자만)
- 로그아웃 버튼
- 접기/펼치기 기능

#### 3.1.2 동작
- 페이지 이동 시 활성 메뉴 하이라이트
- 로그아웃 버튼 클릭 시 백엔드 API 호출: `/auth/logout` (POST)
  - 세션 스토리지 토큰 및 사용자 정보 삭제
  - 로그인 페이지로 리다이렉트

### 3.2 알림 및 메시지 컴포넌트

#### 3.2.1 구성
- 성공 메시지 (초록색)
- 경고 메시지 (노란색)
- 오류 메시지 (빨간색)
- 로딩 스피너

#### 3.2.2 동작
- 메시지 표시 후 일정 시간(4초) 후 자동 사라짐
- 스택 형태로 여러 메시지 표시 가능
- 전역 콜백을 통해 모든 페이지에서 일관된 메시지 표시

### 3.3 모달 컴포넌트

#### 3.3.1 공통 모달 특성
- 타이틀 영역
- 내용 영역
- 버튼 영역 (확인, 취소 등)
- 닫기 버튼 (X)
- ESC 키로 닫기 기능

#### 3.3.2 동작
- 모달 열기/닫기는 dcc.Store에 상태 저장
- 락 획득 실패 시 모달 내 락 정보 표시
- 중첩 모달 지원 (확인 창 등)

## 4. 데이터 흐름 및 상태 관리

### 4.1 글로벌 상태 관리

#### 4.1.1 인증 상태
- dcc.Store(id='auth-store', storage_type='session')에 저장
  - 토큰 정보 (access_token, refresh_token)
  - 사용자 정보 (user_id, department, role)

#### 4.1.2 대시보드 데이터
- dcc.Store(id='dashboard-data-store', storage_type='memory')에 저장
  - 테이블 데이터
  - 필터 상태
  - 선택된 행 정보

#### 4.1.3 작업 상태
- dcc.Store(id='app-state-store', storage_type='memory')에 저장
  - 진행 중인 작업 정보
  - 모달 표시 상태
  - 오류 및 메시지 정보

### 4.2 API 통신 패턴

#### 4.2.1 인증 헤더 추가
- 모든 인증 필요 API 요청에 헤더 추가: `Authorization: Bearer {token}`
- 토큰 만료 시 자동 갱신 처리: `/auth/refresh` (POST)

#### 4.2.2 응답 처리 패턴
- 성공 응답 (status_code=200, success=true):
  - 데이터 처리 및 UI 업데이트
  - 필요시 성공 메시지 표시
- 에러 응답 (success=false 또는 HTTP 에러 코드):
  - 오류 메시지 표시
  - 특정 에러코드(401, 403, 423 등)에 따른 처리

#### 4.2.3 락 충돌 처리
- 423 Locked 응답 처리:
  - 락 정보 표시 (사용자, 만료 시간 등)
  - 편집 버튼 비활성화
  - 자동 갱신 기능 없음 (5분 후 만료)

### 4.3 클라이언트 측 필터링 및 정렬

#### 4.3.1 필터링 동작
- 클라이언트 측 필터링: 종류, 부서, 허브 기준
- 필터 적용 시 dcc.Store에 필터 상태 저장
- 필터 초기화 버튼으로 모든 필터 제거

#### 4.3.2 정렬 동작
- DataTable의 기본 정렬 기능 활용
- 기본 정렬: 상태 + ETA

## 5. 비관적 락 및 동시성 처리

### 5.1 락 획득 흐름

#### 5.1.1 락 상태 확인
1. 상세 정보 모달 열기 시 락 상태 확인
2. 백엔드 API 호출: `/dashboard/{dashboard_id}/lock/status` (GET)
3. 락 정보에 따라 UI 조정:
   - 락 없음: 편집 버튼 활성화
   - 본인 락: 편집 모드 자동 활성화
   - 타인 락: 편집 버튼 비활성화 및 락 정보 표시

#### 5.1.2 락 획득 및 해제
1. 편집 시작 시 락 획득 API 호출
2. 락 획득 실패 시 오류 메시지 및 읽기 전용 모드
3. 편집 완료/취소 시 자동 락 해제
4. 모달 닫기 시 락 해제 보장 (콜백 체인)

### 5.2 락 만료 처리

#### 5.2.1 클라이언트 측 타이머
1. 락 획득 성공 시 클라이언트 타이머 시작
2. 락 만료 1분 전 경고 메시지 표시
3. 락 만료 시 편집 모드 강제 종료 및 메시지 표시

#### 5.2.2 페이지 이탈 처리
1. 브라우저 새로고침/페이지 이동 시 beforeunload 이벤트 감지
2. 락 해제 요청 전송 (가능한 경우)
3. 사용자에게 경고 메시지 표시

## 6. 에러 처리 및 피드백 시스템

### 6.1 에러 카테고리 및 대응

#### 6.1.1 API 에러
- 네트워크 에러: 연결 재시도 제안f
- 인증 에러(401): 로그인 페이지로 리다이렉트
- 권한 에러(403): 접근 권한 없음 메시지
- 락 충돌(423): 락 정보 표시 및 대기 제안
- 서버 에러(500): 일반 오류 메시지 및 재시도 제안

#### 6.1.2 유효성 검증 에러
- 입력 필드별 유효성 검증 및 에러 메시지
- 필수 필드 누락 시 시각적 피드백
- 형식 오류 시 가이드 메시지 제공

### 6.2 사용자 피드백 시스템

#### 6.2.1 즉각적 피드백
- 버튼 클릭 시 로딩 상태 표시
- 성공/실패 시 즉시 메시지 표시
- 테이블 행 업데이트 시 하이라이트 효과

#### 6.2.2 안내 메시지
- 첫 사용자를 위한 기능 가이드
- 빈 데이터 상태 시 안내 메시지
- 권한 부족 시 대안 제시

## 7. 인증 및 권한 처리

### 7.1 인증 체계

#### 7.1.1 세션 관리
- JWT 기반 인증: 액세스 토큰 + 리프레시 토큰
- 토큰 자동 갱신: 액세스 토큰 만료 시 리프레시 토큰으로 갱신
- 리프레시 토큰 만료 시 로그인 페이지 리다이렉트

#### 7.1.2 보안 강화
- XSS 방지: 세션 스토리지 사용 (쿠키 아님)
- 민감 데이터 노출 방지: 필요한 최소 정보만 저장
- 자동 로그아웃: 장시간 미사용 시 세션 종료

### 7.2 권한 관리

#### 7.2.1 사용자 역할
- 일반 사용자: 기본 조회, 편집, 배차 기능 사용
- 관리자: 추가로 삭제, 다운로드 기능 사용

#### 7.2.2 UI 권한 적용
- 권한별 메뉴 가시성 조정
- 권한 없는 기능 버튼 비활성화 또는 숨김
- 권한 확인 로직은 프론트엔드와 백엔드 모두 적용 (이중 검증)

## 8. 시스템 통합 및 배포 고려사항

### 8.1 백엔드 통합

#### 8.1.1 API 연동 지점
- 인증: 로그인, 로그아웃, 세션 확인, 토큰 갱신
- 대시보드: 목록 조회, 상세 조회, 생성, 편집, 상태 변경, 배차, 삭제
- 락: 획득, 해제, 상태 확인
- 메모: 업데이트
- 시각화: 배송 현황, 시간대별 접수량
- 다운로드: Excel 다운로드

#### 8.1.2 오류 처리 일관성
- 백엔드 오류 응답 구조에 맞춘 처리 로직
- 특수 상태 코드(423 등)에 대한 명시적 처리

### 8.2 배포 최적화

#### 8.2.1 응답성 개선
- 적절한 캐싱 전략 적용
- 페이지네이션 및 데이터 청크 로딩
- 콜백 최적화 및 불필요한 리렌더링 방지

#### 8.2.2 시스템 자원 고려
- 대용량 데이터 처리 방안
- 동시 사용자 50명 이하 가정
- 일평균 100건 처리 가정

## 9. 결론

본 프론트엔드 동작 명세서는 배송 실시간 관제 시스템의 UI/UX 및 기술적 동작 방식을 상세히 기술하였습니다. Dash 프레임워크 기반으로 구현되며, 백엔드 FastAPI와 효율적으로 연동되어 동작합니다. 비관적 락을 통한 동시성 제어, 직관적인 데이터 시각화, 권한별 차별화된 기능 등을 제공하여 효율적인 배송 관리 및 모니터링 시스템을 구현합니다.

모든 UI 컴포넌트와 상호작용은 사용자 경험을 최우선으로 설계되었으며, 데이터 중심의 의사결정을 지원합니다. 프론트엔드 개발 과정에서는 코드 재사용성, 유지보수성, 확장성을 고려한 모듈화된 구조를 지향합니다.