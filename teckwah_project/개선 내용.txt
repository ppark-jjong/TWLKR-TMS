# DashboardPage와 AdminPage 중복 제거를 위한 리팩토링 전략

## 1. 현황 분석

현재 `DashboardPage.js`와 `AdminPage.js`는 상당한 양의 코드 중복이 존재합니다. 이러한 중복은 다음과 같은 문제를 야기합니다:

- **유지보수 비용 증가**: 한 쪽에서 버그를 수정해도 다른 쪽에서 동일한 수정이 필요
- **기능 확장 어려움**: 공통 기능을 추가하려면 양쪽 모두 수정 필요
- **일관성 유지 어려움**: 시간이 지남에 따라 두 페이지가 다르게 진화할 가능성 존재

### 1.1. 주요 중복 영역

- **상태 관리**: 검색 파라미터, 선택된 행, 모달 표시 여부 등
- **이벤트 핸들러**: 테이블 변경, 행 선택, 검색, 상태 변경 등
- **API 연동 로직**: 쿼리/뮤테이션 설정 및 콜백 처리
- **락 관리 로직**: 락 획득, 해제, 충돌 처리 등
- **UI 컴포넌트**: 상세 정보 드로어, 상태 변경 모달, 배차 모달 등

## 2. 리팩토링 목표

1. **코드 중복 최소화**: 중복된 로직과 UI 컴포넌트 분리
2. **관심사 분리 강화**: 비즈니스 로직과 UI 렌더링 분리
3. **권한 기반 분기 처리**: 관리자/일반 사용자 구분을 명확한 구조로 설계
4. **루트 명세서 준수**: 단순성 우선 및 YAGNI 원칙 준수
5. **확장성 고려**: 향후 기능 추가 시 유연하게 대응 가능한 구조

## 3. 리팩토링 전략 개요

다음과 같은 접근 방식으로 리팩토링을 진행합니다:

1. **커스텀 훅 추출**: 공통 상태 관리 및 비즈니스 로직 분리
2. **공통 컴포넌트 분리**: 재사용 가능한 UI 컴포넌트 추출
3. **권한 기반 레이어 도입**: 권한에 따른 기능 분기 처리
4. **페이지 컴포넌트 간소화**: 공통 로직 활용하여 페이지 컴포넌트 재구성

## 4. 세부 리팩토링 전략

### 4.1. 커스텀 훅 추출

#### 4.1.1. 대시보드 데이터 관리 훅

`useDashboardData` 훅을 만들어 대시보드 데이터 조회 및 상태 관리 로직을 분리합니다.

- **담당 기능**:
  - 검색 파라미터 관리
  - API 데이터 조회(React Query 활용)
  - 페이지네이션 처리
  - 검색 조건 적용
  
- **구현 방향**:
  - 사용자 권한에 따른 쿼리 키 분리
  - 관리자/일반 사용자 모두 사용 가능한 인터페이스 설계
  - 검색 조건 초기화 및 변경 로직 포함

#### 4.1.2. 락 관리 훅

`useDashboardLock` 훅을 만들어 락 관련 로직을 캡슐화합니다.

- **담당 기능**:
  - 락 획득/해제 처리
  - 락 충돌 상태 관리
  - 재시도 및 취소 로직
  
- **구현 방향**:
  - 단일 대시보드/다중 대시보드 락 처리 통합
  - 락 타입별(EDIT, STATUS, ASSIGN) 처리 로직 일원화
  - 에러 핸들링 및 충돌 정보 관리

#### 4.1.3. 모달 관리 훅

`useDashboardModals` 훅을 만들어 모달 상태 및 이벤트 처리를 관리합니다.

- **담당 기능**:
  - 각종 모달(상태 변경, 배차, 상세) 표시 상태 관리
  - 모달 열기/닫기 이벤트 처리
  - 모달 내부 폼 상태 관리
  
- **구현 방향**:
  - 권한에 따른 모달 동작 차별화
  - 락 관리 훅과 연동하여 모달 라이프사이클에 락 처리 통합
  - 모달별 콜백 함수 제공

### 4.2. 공통 컴포넌트 분리

#### 4.2.1. 대시보드 테이블 컴포넌트

`DashboardTable` 컴포넌트를 만들어 테이블 관련 UI 및 이벤트 처리를 분리합니다.

- **담당 기능**:
  - 테이블 컬럼 정의 및 렌더링
  - 행 선택 처리
  - 페이지네이션 처리
  - 액션 버튼 렌더링
  
- **설계 방향**:
  - 프롭스를 통한 확장성 제공
  - 권한 기반 렌더링 옵션 제공
  - 이벤트 콜백을 통한 상위 컴포넌트와 통신

#### 4.2.2. 대시보드 검색 컴포넌트

`DashboardSearch` 컴포넌트를 만들어 검색 폼 UI 및 이벤트 처리를 분리합니다.

- **담당 기능**:
  - 검색 폼 렌더링
  - 검색 조건 입력 처리
  - 검색 실행 및 초기화
  
- **설계 방향**:
  - 권한별 필터 옵션 차별화
  - 초기값 및 기본값 설정 기능
  - 검색 이벤트 콜백 제공

#### 4.2.3. 대시보드 모달 컴포넌트

다음과 같은 공통 모달 컴포넌트들을 분리합니다:

- `StatusChangeModal`: 상태 변경 모달
- `AssignDriverModal`: 배차 처리 모달
- `DashboardDetailDrawer`: 상세 정보 드로어

각 컴포넌트는 권한 기반 동작 차별화를 지원하도록 설계합니다.

### 4.3. 권한 기반 레이어 도입

#### 4.3.1. 권한 확인 유틸리티

권한 확인 및 기능 접근 제어를 위한 유틸리티 함수를 만듭니다.

- `hasPermission(action, userRole)`: 특정 작업에 대한 권한 확인
- `getAvailableActions(userRole)`: 사용자 권한별 가능한 작업 목록 반환

#### 4.3.2. 권한 기반 기능 래퍼

권한에 따라 UI와 기능을 제어하는 래퍼 컴포넌트를 만듭니다.

- `WithPermission`: 권한에 따라 컴포넌트 렌더링 여부 결정
- `PermissionAwareButton`: 권한에 따라 버튼 활성화/비활성화 처리

### 4.4. 페이지 컴포넌트 재구성

#### 4.4.1. 베이스 대시보드 페이지

공통 기능을 가진 베이스 컴포넌트를 설계합니다:

- **담당 기능**:
  - 기본 레이아웃 구성
  - 공통 훅 사용 및 상태 관리
  - 공통 이벤트 핸들러 정의
  
- **설계 방향**:
  - 합성(Composition) 패턴 활용
  - 렌더 프롭스 또는 고차 컴포넌트 패턴 적용
  - 확장 지점(extension points) 제공

#### 4.4.2. AdminDashboardPage 구현

베이스 페이지를 확장하여 관리자 전용 기능을 추가합니다:

- **추가 기능**:
  - 엑셀 다운로드
  - 항목 삭제
  - 모든 상태로의 변경 지원
  
- **구현 방향**:
  - 베이스 페이지와의 결합도 최소화
  - 관리자 전용 UI 섹션 추가
  - 권한 확인 로직 통합

#### 4.4.3. UserDashboardPage 구현

베이스 페이지를 확장하여 일반 사용자용 기능을 구현합니다:

- **특징**:
  - 제한된 상태 변경만 제공
  - 단순화된 UI 구성
  - 불필요한 기능 제거
  
- **구현 방향**:
  - 단순성 우선
  - 사용자 친화적 UI/UX 구성
  - 명확한 상태 흐름 안내

## 5. 리팩토링 단계별 구현 계획

### 5.1. 준비 단계

1. **현 구조 분석 및 문서화**
   - 두 페이지 간 공통점과 차이점 상세 정리
   - 중복 코드 식별 및 분류

2. **테스트 환경 구성**
   - 리팩토링 결과 검증을 위한 테스트 시나리오 정의
   - 기본 기능 정상 작동 확인 테스트 케이스 준비

### 5.2. 핵심 구현 단계

1. **공통 훅 구현**
   - `useDashboardData`, `useDashboardLock`, `useDashboardModals` 순차적 구현
   - 각 훅 개별 테스트 및 검증

2. **공통 컴포넌트 추출**
   - 테이블, 검색 폼, 모달 컴포넌트 분리
   - Props 인터페이스 설계 및 문서화

3. **권한 기반 레이어 구현**
   - 권한 확인 유틸리티 개발
   - 권한 기반 컴포넌트 래퍼 구현

4. **페이지 컴포넌트 재구성**
   - 베이스 페이지 구현
   - 관리자/일반 사용자 페이지 구현 및 연동

### 5.3. 통합 및 검증 단계

1. **컴포넌트 통합**
   - 분리된 컴포넌트와 훅 조합
   - 페이지 라우팅 구조 수정

2. **기능 검증**
   - 원래 기능이 모두 작동하는지 확인
   - 권한별 동작 차이 검증

3. **성능 최적화**
   - 불필요한 리렌더링 최소화
   - 메모이제이션 적용(useMemo, useCallback)

## 6. 구현 시 주의사항

### 6.1. 루트 명세서 준수

- **단순성 우선**: 과도한 추상화 지양, 직관적인 코드 구조 유지
- **YAGNI**: 필요한 기능만 구현, 향후 가능성을 위한 코드 최소화
- **명시적 액션 기반**: 자동화보다 사용자의 명시적 액션에 따른 처리 중시

### 6.2. 기술적 고려사항

- **네이밍 일관성**: 함수, 컴포넌트, 변수명의 일관된 네이밍 컨벤션 유지
- **코드 주석**: 복잡한 로직이나 비즈니스 규칙에 한국어 주석 추가

### 6.3. 리팩토링 위험 관리

- **점진적 적용**: 한 번에 모든 변경을 적용하지 않고 단계적 리팩토링
- **동작 검증**: 각 단계마다 기존 기능이 정상 작동하는지 확인
- **롤백 계획**: 문제 발생 시 이전 상태로 복원할 수 있는 방안 마련

## 7. 기대 효과

### 7.1. 기술적 이점

- **유지보수성 향상**: 중복 제거로 버그 수정 및 기능 추가 용이
- **코드 품질 향상**: 관심사 분리로 코드 가독성 및 테스트 용이성 증가
- **확장성 개선**: 새로운 기능이나 권한 추가 시 최소 변경으로 대응 가능

### 7.2. 사용자 경험 이점

- **일관성 강화**: 관리자와 일반 사용자 화면 간의 동작 일관성 확보
- **반응성 향상**: 코드 최적화로 UI 반응성 개선
- **오류 감소**: 중복 코드 제거로 인한 버그 발생 가능성 감소

## 8. 결론

DashboardPage와 AdminPage의 중복 코드 제거는 단순히 코드 줄 수를 줄이는 것이 아니라, 전체 시스템의 품질과 유지보수성을 높이는 중요한 작업입니다. 커스텀 훅, 공통 컴포넌트, 권한 기반 레이어를 통해 관심사를 명확히 분리하고, 루트 명세서의 원칙을 준수하는 방향으로 리팩토링을 진행하면 더 견고하고 확장 가능한 코드베이스를 구축할 수 있습니다.

이 전략을 통해 단기적으로는 코드 중복 감소와 버그 가능성 감소, 장기적으로는 유지보수 비용 절감과 기능 확장 용이성이라는 이점을 얻을 수 있을 것입니다.