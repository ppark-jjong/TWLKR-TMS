# 프론트엔드 개선 전략 계획서

## 1. 현황 분석

### 1.1 페이지 구조 분석
- **DashboardPage**: 필터링, 상세정보 조회, 상태변경, 배차 기능 구현
- **AdminPage**: 별도 테이블로 구현되어 있으며, 삭제 기능과 다운로드 기능 특화

### 1.2 권한 관리 분석
- **사이드바**: `App.js`에서 `isAdmin()` 함수로 관리자 메뉴 조건부 표시
- **상태 변경 로직**: 권한 구분 없이 `is_admin: false`로 하드코딩됨
- **페이지 접근**: `AdminRoute` 컴포넌트를 통해 부분적 제어

### 1.3 비관적 락 구현 상태
- **상태 변경**: `handleAcquireLock` 함수를 통해 "STATUS" 락 구현
- **배차 처리**: 다중 락 획득 로직으로 "ASSIGN" 락 구현
- **상세 정보**: 조회만 가능하고 편집 시 락이 명확히 구현되지 않음

## 2. 개선 목표

1. **권한별 페이지 접근 분리**: 사이드바에서 권한에 따라 접근 가능한 메뉴 분리
2. **페이지 기능 일관성 확보**: AdminPage에 DashboardPage의 모든 기능 동일하게 포함
3. **권한별 상태 변경 로직 교정**: 관리자/일반 사용자 권한에 따른 동작 차별화
4. **비관적 락 구현 검증 및 보완**: 모든 편집 작업 시 비관적 락 적용 확인
5. **부서 선택 UI 개선**: CreateDashboard 모달에서 부서 선택 가능하도록 수정

## 3. 개선 전략 상세

### 3.1 권한별 페이지 접근 분리
**파일**: `App.js`

**개선사항**:
- 사이드바 메뉴 항목은 유지하되, 라우팅 로직 수정
- 관리자는 `/admin`, 일반 사용자는 `/dashboard`로 라우팅
- 권한 검증 후 해당 페이지 접근 제한
- `ProtectedRoute` 및 `AdminRoute` 컴포넌트 기능 확장

### 3.2 AdminPage 기능 보완
**파일**: `pages/AdminPage.js`

**개선사항**:
- DashboardPage의 핵심 기능을 모두 포함하도록 확장
  - 상세정보 조회 기능 추가 (`showDetailDrawer` 함수 통합)
  - 상태변경 기능 추가 (`showStatusModal` 함수 통합)
  - 배차처리 기능 추가 (`showAssignModal` 함수 통합)
- 기존 AdminPage의 차별화 기능 유지
  - 엑셀 다운로드 기능
  - 데이터 삭제 기능

### 3.3 상태 변경 로직 권한별 구현
**파일**: `pages/DashboardPage.js` 및 `pages/AdminPage.js`

**개선사항**:
- 상태 변경 API 호출 시 사용자 권한 반영
  - `handleStatusSubmit` 함수에서 `is_admin` 값을 동적으로 설정
  - 관리자인 경우 `isAdmin()` 함수 결과를 `is_admin` 값으로 전달
- 권한별 UI 차별화
  - 관리자에게는 모든 상태로 변경 가능한 옵션 제공
  - 일반 사용자에게는 현재 상태에 따른 제한된 옵션만 제공

### 3.4 비관적 락 구현 검증 및 보완
**파일**: `pages/DashboardPage.js` 및 `pages/AdminPage.js`

**개선사항**:
- 모든 편집 작업에 락 적용 검증
  - `상태 변경`: "STATUS" 유형의 락 확인
  - `배차 처리`: "ASSIGN" 유형의 락 확인
  - `상세정보 수정`: "EDIT" 유형의 락 구현 (필요 시)
- 락 충돌 처리 로직 검증
  - `LockConflictModal` 컴포넌트 호출 로직 검토
  - 재시도 및 취소 기능 동작 확인

### 3.5 CreateDashboard 부서 선택 UI 개선
**파일**: `components/CreateDashboardModal.js`

**개선사항**:
- 부서 선택을 위한 드롭다운 컴포넌트 추가
- Form.Item 추가 및 필수 항목으로 설정
- 기본값으로 현재 사용자 부서 사전 선택
- 선택 가능한 부서 목록 제공 (CS, HES, LENOVO)

## 4. 구현 세부 계획

### 4.1 AdminPage 구현 확장
1. DashboardPage에서 다음 함수 및 관련 상태 통합:
   - 상세정보 드로어 관련 코드
   - 상태변경 모달 관련 코드
   - 배차 모달 관련 코드
2. 기존 AdminPage의 다운로드/삭제 기능 유지
3. 테이블 컬럼 정의 확장 (액션 컬럼 추가)

### 4.2 상태 변경 로직 수정
1. `handleStatusSubmit` 함수에서 현재 사용자 권한 확인
2. 권한에 따라 `is_admin` 값 설정
3. 관리자인 경우 상태 옵션 전체 표시, 일반 사용자는 제한적 표시

### 4.3 부서 선택 드롭다운 추가
1. CreateDashboardModal 컴포넌트에 부서 선택 Form.Item 추가
2. 부서 목록 (CS, HES, LENOVO) 옵션 설정
3. 기본값으로 현재 사용자 부서 설정

## 5. 우선순위 및 구현 계획

1. **최우선**: 상태 변경 로직 권한 반영 (보안 관련)
2. **높음**: AdminPage 기능 보완 (핵심 기능 통합)
3. **높음**: 비관적 락 검증 및 보완 (데이터 무결성)
4. **중간**: 부서 선택 UI 개선 (사용자 편의성)
5. **중간**: 사이드바 권한별 접근 분리 (UI/UX)

## 6. 검증 계획

1. **권한 검증**: 관리자와 일반 사용자로 로그인하여 기능 접근성 테스트
2. **상태 변경 검증**: 권한별 상태 변경 옵션 및 동작 차이 확인
3. **락 검증**: 여러 브라우저 세션으로 동시 편집 시도하여 락 메커니즘 확인
4. **부서 선택 검증**: 다양한 부서로 데이터 생성 테스트

이 계획은 요구사항에 따른 프론트엔드 개선을 위한 체계적인 접근 방식을 제공합니다. 우선순위에 따라 단계적으로 구현하면 일관성 있고 안정적인 시스템을 구축할 수 있을 것입니다.