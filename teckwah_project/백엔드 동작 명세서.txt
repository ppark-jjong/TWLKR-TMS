# 배송 실시간 관제 시스템 - 백엔드 동작 명세서

## 1. 시스템 개요

본 문서는 배송 실시간 관제 시스템의 백엔드 API, 데이터베이스 구조, 배포 방식에 대한 상세 명세서입니다. 프론트엔드 개발자가 백엔드 서비스와 효과적으로 통합할 수 있도록 작성되었습니다.

## 2. 기술 스택 및 아키텍처

### 2.1 기술 스택
- **백엔드**: FastAPI 0.109.0, SQLAlchemy 2.0.25, Pydantic 2.5.3
- **데이터베이스**: MySQL 8.0
- **배포**: Docker

### 2.2 아키텍처
- **계층 구조**: Router(API) → Service → Repository → Database
- **인증 방식**: JWT(액세스 토큰 + 리프레시 토큰)
- **동시성 제어**: 비관적 락(Pessimistic Lock)

## 3. 데이터베이스 스키마

### 3.1 주요 테이블
- **user**: 사용자 정보 (인증/권한)
- **dashboard**: 배송 주문 정보
- **dashboard_lock**: 대시보드 락 정보
- **refresh_token**: 리프레시 토큰 관리
- **postal_code**: 우편번호 정보
- **postal_code_detail**: 우편번호별 물류센터 거리/시간 정보

### 3.2 핵심 필드 설명
- **dashboard 테이블**:
  - `dashboard_id`: 주 키
  - `order_no`: 주문번호
  - `type`: 배송 유형 (DELIVERY/RETURN)
  - `status`: 배송 상태 (WAITING/IN_PROGRESS/COMPLETE/ISSUE/CANCEL)
  - `department`: 담당 부서 (CS/HES/LENOVO)
  - `warehouse`: 창고 위치 (SEOUL/BUSAN/GWANGJU/DAEJEON)
  - `eta`: 예상 도착 시간
  - `driver_name`, `driver_contact`: 배송 기사 정보

## 4. API 엔드포인트 명세

### 4.1 인증 API (/api/auth)

#### 4.1.1 로그인
- **URL**: `/api/auth/login`
- **Method**: POST
- **요청 데이터**: `{ "user_id": string, "password": string }`
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "로그인에 성공했습니다",
    "data": {
      "token": { "access_token": string, "refresh_token": string },
      "user": { "user_id": string, "user_department": string, "user_role": string }
    }
  }
  ```
- **설명**: 사용자 인증 후 JWT 토큰 발급

#### 4.1.2 토큰 갱신
- **URL**: `/api/auth/refresh`
- **Method**: POST
- **요청 데이터**: 쿠키의 refresh_token 또는 요청 바디의 `{ "refresh_token": string }`
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "토큰이 갱신되었습니다",
    "data": { "access_token": string, "refresh_token": string }
  }
  ```
- **설명**: 리프레시 토큰으로 새 액세스 토큰 발급

#### 4.1.3 로그아웃
- **URL**: `/api/auth/logout`
- **Method**: POST
- **응답 데이터**: `{ "success": true, "message": "로그아웃되었습니다", "data": {} }`
- **설명**: 세션 종료 및 쿠키 삭제

#### 4.1.4 세션 체크
- **URL**: `/api/auth/check-session`
- **Method**: GET
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "유효한 세션입니다",
    "data": { "user": { "user_id": string, "user_department": string, "user_role": string } }
  }
  ```
- **설명**: 현재 토큰의 유효성 검증

### 4.2 대시보드 API (/api/dashboard)

#### 4.2.1 대시보드 목록 조회
- **URL**: `/api/dashboard/list`
- **Method**: GET
- **쿼리 파라미터**:
  - `page`: 페이지 번호 (기본값: 1)
  - `size`: 페이지 크기 (기본값: 20)
  - `search_term`: 검색어 (선택)
  - `status`: 상태 필터 (선택)
  - `department`: 부서 필터 (선택)
  - `warehouse`: 창고 필터 (선택)
  - `start_date`: 시작 날짜 (선택)
  - `end_date`: 종료 날짜 (선택)
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "목록을 조회했습니다",
    "data": [ DashboardListItem 배열 ],
    "meta": { "total": number, "page": number, "size": number, ... }
  }
  ```
- **설명**: 필터링된 대시보드 목록 조회 (페이징 처리)

#### 4.2.2 대시보드 상세 조회
- **URL**: `/api/dashboard/{dashboard_id}`
- **Method**: GET
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "상세 정보를 조회했습니다",
    "data": DashboardDetail,
    "meta": { "is_locked": boolean, ... }
  }
  ```
- **설명**: 특정 대시보드의 상세 정보 조회 (락 정보 포함)

#### 4.2.3 대시보드 생성
- **URL**: `/api/dashboard`
- **Method**: POST
- **요청 데이터**: DashboardCreate 스키마 (주문번호, 유형, 창고, 날짜 등)
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "대시보드를 생성했습니다",
    "data": DashboardDetail
  }
  ```
- **설명**: 새 대시보드 항목 생성

#### 4.2.4 대시보드 정보 수정
- **URL**: `/api/dashboard/{dashboard_id}`
- **Method**: PUT
- **요청 데이터**: DashboardUpdate 스키마 (부분 수정 가능)
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "정보를 수정했습니다",
    "data": DashboardDetail
  }
  ```
- **설명**: 대시보드 정보 수정 (락 필요)

#### 4.2.5 상태 변경
- **URL**: `/api/dashboard/{dashboard_id}/status`
- **Method**: PATCH
- **요청 데이터**: `{ "status": string, "is_admin": boolean }`
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "상태를 변경했습니다",
    "data": DashboardDetail
  }
  ```
- **설명**: 대시보드 상태 변경 (락 필요)

#### 4.2.6 배차 처리
- **URL**: `/api/dashboard/assign`
- **Method**: POST
- **요청 데이터**: `{ "dashboard_ids": number[], "driver_name": string, "driver_contact": string }`
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "배차가 완료되었습니다",
    "data": [ DashboardDetail 배열 ],
    "meta": { "updated_count": number }
  }
  ```
- **설명**: 여러 대시보드에 배송 기사 배정 (락 필요)

#### 4.2.7 대시보드 삭제 (관리자 전용)
- **URL**: `/api/dashboard`
- **Method**: DELETE
- **요청 데이터**: `{ "dashboard_ids": number[] }`
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "선택한 항목이 삭제되었습니다",
    "meta": { "deleted_count": number }
  }
  ```
- **설명**: 여러 대시보드 삭제 (관리자 권한 필요)

### 4.3 대시보드 락 API (/api/dashboard-lock)

#### 4.3.1 락 획득
- **URL**: `/api/dashboard/{dashboard_id}/lock`
- **Method**: POST
- **요청 데이터**: `{ "lock_type": string }` (EDIT/STATUS/ASSIGN 중 하나)
- **응답 데이터**: 
  ```
  {
    "success": true/false,
    "message": "락을 획득했습니다" or "다른 사용자가 수정 중입니다",
    "data": { "dashboard_id": number, "locked_by": string, ... }
  }
  ```
- **설명**: 대시보드 락 획득 시도 (성공/실패)

#### 4.3.2 락 해제
- **URL**: `/api/dashboard/{dashboard_id}/lock`
- **Method**: DELETE
- **쿼리 파라미터**: `lock_type`: 락 타입
- **응답 데이터**: 
  ```
  {
    "success": true/false,
    "message": "락을 해제했습니다" or "다른 사용자의 락은 해제할 수 없습니다"
  }
  ```
- **설명**: 대시보드 락 해제 시도 (본인 락만 해제 가능)

#### 4.3.3 락 정보 조회
- **URL**: `/api/dashboard/{dashboard_id}/lock`
- **Method**: GET
- **쿼리 파라미터**: `lock_type`: 락 타입
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "락 정보를 조회했습니다",
    "data": { "is_locked": boolean, "dashboard_id": number, ... }
  }
  ```
- **설명**: 특정 대시보드의 락 상태 조회

### 4.4 시각화 API (/api/visualization)

#### 4.4.1 배송 현황 데이터 조회
- **URL**: `/api/visualization/delivery-status`
- **Method**: GET
- **쿼리 파라미터**: `start_date`, `end_date` (선택)
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "배송 현황 데이터를 조회했습니다",
    "data": { "by_warehouse": [ 창고별 상태 데이터 배열 ], "overall": 전체 통계 },
    "meta": { "date_range": 날짜 범위 }
  }
  ```
- **설명**: 배송 현황 시각화를 위한 데이터 제공

#### 4.4.2 시간대별 접수량 데이터 조회
- **URL**: `/api/visualization/hourly-orders`
- **Method**: GET
- **쿼리 파라미터**: `start_date`, `end_date` (선택)
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "시간대별 접수량 데이터를 조회했습니다",
    "data": { "hourly_distribution": [ 시간대별 데이터 배열 ], "department_peak_hours": 부서별 피크타임 },
    "meta": { "date_range": 날짜 범위 }
  }
  ```
- **설명**: 시간대별 접수량 시각화를 위한 데이터 제공

#### 4.4.3 시각화 가능 날짜 범위 조회
- **URL**: `/api/visualization/date-range`
- **Method**: GET
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "날짜 범위를 조회했습니다",
    "data": { "oldest_date": string, "latest_date": string }
  }
  ```
- **설명**: 시각화 가능한 데이터의 날짜 범위 제공

### 4.5 다운로드 API (/api/download) - 관리자 전용

#### 4.5.1 엑셀 다운로드
- **URL**: `/api/download/excel`
- **Method**: POST
- **요청 데이터**: 
  ```
  {
    "start_date": string,
    "end_date": string,
    "status": string (선택),
    "type": string (선택),
    "department": string (선택),
    "warehouse": string (선택)
  }
  ```
- **응답 데이터**: 엑셀 파일 스트림 (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)
- **설명**: 대시보드 데이터를 엑셀로 다운로드 (최대 3개월)

#### 4.5.2 다운로드 가능 날짜 범위 조회
- **URL**: `/api/download/date-range`
- **Method**: GET
- **응답 데이터**: 
  ```
  {
    "success": true,
    "message": "다운로드 가능 날짜 범위를 조회했습니다",
    "data": { "oldest_date": string, "latest_date": string }
  }
  ```
- **설명**: 다운로드 가능한 데이터의 날짜 범위 제공

## 5. 서비스 로직 및 처리 흐름

### 5.1 인증 및 권한 처리
- **JWT 토큰 기반 인증**: 모든 API 요청은 Authorization 헤더에 액세스 토큰 포함
- **액세스 토큰 만료 처리**: 프론트엔드에서 자동으로 리프레시 토큰으로 갱신
- **권한 검증**: 관리자 전용 기능은 서버 측에서 role 검증 후 403 오류 반환

### 5.2 비관적 락 메커니즘
- **락 획득 과정**:
  1. 사용자가 수정 버튼 클릭 시 락 요청 API 호출
  2. 락 충돌 시 다른 사용자가 편집 중임을 알리는 메시지 표시
  3. 락 획득 성공 시 편집 모드 활성화
- **락 해제 과정**:
  1. 저장/취소 버튼 클릭 또는 페이지 이탈 시 락 해제 API 호출
  2. 백엔드는 락 소유자 검증 후 해제 처리
- **자동 만료**: 5분(설정 가능) 이후 자동 만료되어 다른 사용자가 획득 가능

### 5.3 배송 상태 관리
- **상태 변경 가능 경로**:
  - WAITING → IN_PROGRESS, CANCEL
  - IN_PROGRESS → COMPLETE, ISSUE, CANCEL
  - COMPLETE, ISSUE, CANCEL → (변경 불가)
- **상태 변경 시 자동 처리**:
  - IN_PROGRESS로 변경 시 depart_time 자동 기록
  - COMPLETE/ISSUE로 변경 시 complete_time 자동 기록

### 5.4 에러 처리
- **일관된 에러 응답 구조**: `{ "success": false, "error_code": string, "message": string, "timestamp": string }`
- **주요 에러 코드**:
  - `UNAUTHORIZED`: 인증 실패/만료
  - `FORBIDDEN`: 권한 부족
  - `NOT_FOUND`: 리소스 없음
  - `LOCK_CONFLICT`: 락 충돌
  - `VALIDATION_ERROR`: 입력 데이터 유효성 검증 실패
  - `SERVER_ERROR`: 서버 내부 오류

## 6. 배포 및 환경 설정

### 6.1 Docker 컨테이너 구성
- **이미지 빌드**: `docker-compose build`
- **서비스 실행**: `docker-compose up -d`
- **서비스 접근**: `http://localhost:8000` (API), `http://localhost:3000` (프론트엔드)

### 6.2 환경 변수 설정
- **파일 위치**: `deploy/.env.local`
- **주요 설정**:
  - 데이터베이스 연결 정보 (호스트, 포트, 사용자, 비밀번호 등)
  - API 서버 포트 및 기본 URL
  - JWT 시크릿 키 및 만료 시간
  - 락 타임아웃 및 정리 주기

### 6.3 데이터베이스 초기화
- **스크립트 위치**: `deploy/init-db.sql`
- **실행 방법**: MySQL 클라이언트 또는 관리 도구로 스크립트 실행
- **내용**: 테이블 생성, 인덱스 설정, 기본 데이터 삽입, 트리거 설정

## 7. 프론트엔드 통합 가이드

### 7.1 API 통신
- **기본 URL**: `http://localhost:8000/api`
- **인증 헤더**: `Authorization: Bearer {액세스토큰}`
- **에러 처리**: `success` 필드로 응답 성공 여부 확인, 실패 시 `error_code`와 `message` 활용

### 7.2 인증 흐름
1. 로그인 API 호출 후 받은 토큰 저장
2. 모든 API 요청에 액세스 토큰 포함
3. 401 응답 시 리프레시 토큰으로 갱신 시도
4. 갱신 실패 시 로그인 페이지로 리디렉션

### 7.3 비관적 락 처리
1. 편집 시작 전 락 획득 API 호출
2. 락 충돌 시 사용자에게 알림 표시
3. 편집 완료 후 락 해제 API 호출
4. 페이지 이탈 시 자동 락 해제 처리

### 7.4 데이터 시각화
1. 시각화 API로 데이터 요청
2. 반환된 데이터를 선택한 차트 라이브러리로 표현
3. 필터링 및 날짜 범위 조절 기능 제공

이 명세서를 기반으로 프론트엔드 개발자는 백엔드와 원활하게 통합하는 클라이언트 애플리케이션을 구현할 수 있습니다.