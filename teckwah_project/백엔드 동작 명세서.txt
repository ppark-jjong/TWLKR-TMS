
# 배송 실시간 관제 시스템 - 백엔드 API 및 데이터 명세서

## I. API 엔드포인트 및 데이터 흐름

### 1. 인증 관련 API

#### 1.1 POST /auth/login
- **요청 데이터**: user_id, password
- **응답 데이터**: success, message, token(access_token, refresh_token), user(user_id, user_department, user_role)
- **처리 흐름**: 사용자 정보 조회 → 비밀번호 검증 → 토큰 발급 → 로그인 이력 저장

#### 1.2 POST /auth/refresh
- **요청 데이터**: refresh_token
- **응답 데이터**: success, message, data(token)
- **처리 흐름**: 리프레시 토큰 검증 → 사용자 조회 → 새 토큰 발급

#### 1.3 POST /auth/logout
- **요청 데이터**: refresh_token
- **응답 데이터**: success, message
- **처리 흐름**: 리프레시 토큰 삭제

#### 1.4 GET /auth/check-session
- **요청 헤더**: Authorization: Bearer {token}
- **응답 데이터**: success, message, data(user)
- **처리 흐름**: 토큰 검증 → 만료 시간 확인 → 사용자 정보 반환

### 2. 대시보드 관련 API

#### 2.1 POST /dashboard/list
- **요청 데이터**: start_date, end_date
- **응답 데이터**: success, message, data(items, date_range, user_role, is_admin)
- **처리 흐름**: 날짜 범위 검증 → ETA 기준 대시보드 조회 → 데이터 가공

#### 2.2 GET /dashboard/{dashboard_id}
- **URL 파라미터**: dashboard_id
- **응답 데이터**: success, message, data(dashboard_id, order_no, type, status, ...), is_locked, lock_info
- **처리 흐름**: 대시보드 조회 → 락 상태 확인 → 메모 조회 → 데이터 통합

#### 2.3 POST /dashboard
- **요청 데이터**: order_no, type, department, warehouse, eta, postal_code, address, customer, remark, ...
- **응답 데이터**: success, message, data(생성된 대시보드 정보)
- **처리 흐름**: 우편번호 검증 → 지역 정보 설정 → 대시보드 생성 → 메모 저장

#### 2.4 PATCH /dashboard/{dashboard_id}/fields
- **URL 파라미터**: dashboard_id
- **요청 데이터**: 변경할 필드(postal_code, address, customer, ...)
- **응답 데이터**: success, message, data(업데이트된 대시보드)
- **처리 흐름**: 락 획득 → 필드 업데이트 → 락 해제

#### 2.5 PATCH /dashboard/{dashboard_id}/status
- **URL 파라미터**: dashboard_id
- **요청 데이터**: status, is_admin
- **응답 데이터**: success, message, data(업데이트된 상태 정보)
- **처리 흐름**: 락 획득 → 상태 전이 검증 → 상태 변경 → 시간 필드 자동 갱신 → 락 해제

#### 2.6 POST /dashboard/assign
- **요청 데이터**: dashboard_ids, driver_name, driver_contact
- **응답 데이터**: success, message, data(updated_count)
- **처리 흐름**: 다중 락 획득 → 기사 정보 업데이트 → 락 해제

#### 2.7 GET /dashboard/search
- **쿼리 파라미터**: order_no
- **응답 데이터**: success, message, data(items)
- **처리 흐름**: 주문번호 검증 → 대시보드 검색

#### 2.8 DELETE /dashboard
- **요청 데이터**: dashboard_ids
- **응답 데이터**: success, message, data(deleted_count)
- **처리 흐름**: 관리자 권한 검증 → 대시보드 삭제

### 3. 비관적 락 관련 API

#### 3.1 POST /dashboard/{dashboard_id}/lock
- **URL 파라미터**: dashboard_id
- **요청 데이터**: lock_type (EDIT, STATUS, ASSIGN, REMARK)
- **응답 데이터**: success, message, data(dashboard_id, locked_by, lock_type)
- **처리 흐름**: 기존 락 확인 → 충돌 검사 → 락 생성

#### 3.2 DELETE /dashboard/{dashboard_id}/lock
- **URL 파라미터**: dashboard_id
- **응답 데이터**: success, message, data(dashboard_id)
- **처리 흐름**: 락 소유권 확인 → 락 삭제

#### 3.3 GET /dashboard/{dashboard_id}/lock/status
- **URL 파라미터**: dashboard_id
- **응답 데이터**: success, message, data(is_locked, dashboard_id, locked_by, lock_type, expires_at)
- **처리 흐름**: 락 조회 → 만료 확인 → 상태 반환

### 4. 시각화 및 다운로드 API

#### 4.1 POST /visualization/delivery_status
- **요청 데이터**: start_date, end_date
- **응답 데이터**: success, message, data(부서별/상태별 통계)
- **처리 흐름**: 날짜 검증 → 대시보드 조회 → 데이터 집계

#### 4.2 POST /visualization/hourly_orders
- **요청 데이터**: start_date, end_date
- **응답 데이터**: success, message, data(시간대별/부서별 접수량)
- **처리 흐름**: 날짜 검증 → 대시보드 조회 → 시간대별 집계

#### 4.3 GET /visualization/date_range
- **응답 데이터**: success, message, data(oldest_date, latest_date)
- **처리 흐름**: 가장 오래된/최신 ETA 조회

#### 4.4 POST /download/excel
- **요청 데이터**: start_date, end_date
- **응답 데이터**: 엑셀 파일 스트림
- **처리 흐름**: 관리자 권한 검증 → 날짜 범위 검증 → 데이터 조회 → 엑셀 생성

## II. 데이터 구조 및 모델

### 1. 대시보드 객체 구조
- dashboard_id: 대시보드 ID (정수)
- order_no: 주문번호 (문자열)
- type: 종류 (DELIVERY|RETURN)
- status: 상태 (WAITING|IN_PROGRESS|COMPLETE|ISSUE|CANCEL)
- department: 부서 (CS|HES|LENOVO)
- warehouse: 창고 (SEOUL|BUSAN|GWANGJU|DAEJEON)
- eta: 예상도착시간 (ISO 8601)
- create_time: 생성시간 (ISO 8601)
- depart_time: 출발시간 (ISO 8601, 선택적)
- complete_time: 완료시간 (ISO 8601, 선택적)
- postal_code: 우편번호 (문자열)
- city: 도시 (문자열)
- county: 구/군 (문자열)
- district: 동/읍/면 (문자열)
- region: 지역 (city+county+district)
- address: 상세주소 (문자열)
- customer: 고객명 (문자열)
- contact: 연락처 (문자열, 선택적)
- driver_name: 기사명 (문자열, 선택적)
- driver_contact: 기사연락처 (문자열, 선택적)
- remark: 메모 내용 (문자열)
- remark_updated_at: 메모 수정 시간 (ISO 8601)
- remark_updated_by: 메모 수정자 (문자열)
- created_by: 작성자 ID (문자열)

### 2. 락 객체 구조
- lock_id: 락 ID (정수)
- dashboard_id: 대시보드 ID (정수)
- locked_by: 락 소유자 ID (문자열)
- lock_type: 락 유형 (EDIT|STATUS|ASSIGN|REMARK)
- created_at: 락 생성 시간 (ISO 8601)
- expires_at: 락 만료 시간 (ISO 8601)

### 3. 사용자 객체 구조
- user_id: 사용자 ID (문자열)
- password_hash: 비밀번호 해시 (문자열)
- department: 부서 (CS|HES|LENOVO)
- role: 역할 (ADMIN|USER)
- last_login: 마지막 로그인 시간 (ISO 8601)

### 4. 리프레시 토큰 객체 구조
- token_id: 토큰 ID (정수)
- user_id: 사용자 ID (문자열)
- refresh_token: 리프레시 토큰 (문자열)
- expires_at: 만료 시간 (ISO 8601)

## III. 주요 비즈니스 로직

### 1. 대시보드 상태 관리
- 상태 전이 유효성: WAITING → IN_PROGRESS → COMPLETE/ISSUE/CANCEL
- 상태 변경 시 자동 시간 갱신: IN_PROGRESS → depart_time, COMPLETE → complete_time
- 관리자 권한: 모든 상태 간 직접 전환 가능

### 2. 비관적 락 관리
- 락 타입별 동작: EDIT(필드 수정), STATUS(상태 변경), ASSIGN(배차), REMARK(메모)
- 자동 만료: 기본 5분 후 자동 만료
- 충돌 처리: 이미 락 존재 시 423 Locked 응답
- 다중 락: All-or-Nothing 방식 (하나라도 실패 시 전체 실패)

### 3. 우편번호 처리
- 우편번호 조회: 입력된 우편번호로 지역 정보 자동 채우기
- 지역 데이터: city, county, district 자동 설정
- 유효성 검증: 존재하지 않는 우편번호 거부

### 4. 인증 및 권한
- 토큰 기반 인증: JWT 사용, 액세스/리프레시 토큰 체계
- 권한 검증: 라우터 레벨 또는 서비스 레벨에서 역할 확인
- 관리자 전용 기능: 삭제, 다운로드, 상태 자유 변경

## IV. 오류 코드 및 응답

### 1. 공통 응답 구조
- success: 성공 여부 (불리언)
- message: 응답 메시지 (문자열)
- data: 응답 데이터 (객체 또는 배열)
- error_code: 오류 코드 (실패 시)

### 2. 주요 오류 코드
- UNAUTHORIZED: 인증 필요 또는 실패
- INVALID_TOKEN: 유효하지 않은 토큰
- TOKEN_EXPIRED: 만료된 토큰
- FORBIDDEN: 권한 부족
- NOT_FOUND: 리소스 없음
- VALIDATION_ERROR: 데이터 검증 실패
- RESOURCE_LOCKED: 락 충돌
- INVALID_STATUS_TRANSITION: 유효하지 않은 상태 전이
- SERVER_ERROR: 서버 내부 오류

### 3. HTTP 상태 코드
- 200 OK: 요청 성공
- 401 Unauthorized: 인증 실패
- 403 Forbidden: 권한 부족
- 404 Not Found: 리소스 없음
- 422 Unprocessable Entity: 데이터 검증 실패
- 423 Locked: 락 충돌
- 500 Internal Server Error: 서버 오류
