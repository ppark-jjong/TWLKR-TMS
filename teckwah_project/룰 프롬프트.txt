# 1. 프로젝트 개요 및 배경

- **목적:**  
  - 배송 실시간 관제 및 데이터 시각화 서비스 (사내 제공용)

- **배경:**  
  - 전 풀스택/데이터 엔지니어가 단독 개발하며, 곧 서비스 배포 예정

- **특징:**  
  - 상세한 설명과 주석(모두 한국어) 제공  
  - 요청한 기능만 수정/생성하며, 추가 요청 시 새로운 로직 구현  
  - 기존 파일(수정, 생성, 삭제)을 직접 제어

---

# 2. 기술 스택 및 아키텍처

## 프론트엔드

- **언어/라이브러리:**  
  - React (Create React App, .js 파일)  
  - Ant Design (추가 커스터마이징 없음)
  - 오로지 js로만 구축할꺼야
  
- **코드 스타일:**  
  - jsdoc 활용, 주석/디버깅 메시지는 모두 한국어  
  - 이해하기 쉽고 간결한 코드 작성
  
- **빌드/설정:**  
  - webpack, babel 등 별도 설정 없이 CRA 방식 채택  (별도 설정 없이 동일 도메인 내 통신)
  - 무료 버전 라이브러리만 사용

## 백엔드

- **프레임워크:**  
  - FastAPI (Python)
  
- **구조:**  
  - **API 엔드포인트:** 요청/응답 전담  
  - **서비스 레이어:** 비즈니스 로직 처리  
  - **레포지토리 레이어:** 데이터 접근 로직 처리  
  - **모델/스키마:**  
    - `models`: DB 모델  
    - `schemas`: API 요청/응답 스키마 (DB 기반 모델 수정 시 반드시 허락 필요)

## 데이터베이스 및 데이터 관리

- **핫 데이터:**  
  - MySQL 기반, Cloud SQL 사용용
  - 최근 1개월 데이터 유지, eta 컬럼 인덱스 적용

- **콜드 데이터:**  
  - bigquery를 이용한 콜드 데이터 분석 저장 


## 배포 및 테스트 환경

- **운영 환경:**  
  - GAE 사용
  - (별도 설정 없이 동일 도메인 내 통신)
  - 단일 컨테이너 배포
  - HTTPS/SSL 구성은 GAE 자동 적용

- **로컬 테스트 환경:**  
  - Docker-desktop (운영 환경과 동일한 단일 컨테이너 구성)

- **환경 변수 관리:**  
  - 로컬: `.env.local`  
  - 운영: `.env.production`

---

# 3. 엔드포인트 구성

- **/auth**  
  - 사용자 로그인 및 JWT 기반 인증 관리 (토큰 테이블 활용)

- **/dashboard**  
  - 실시간 배송 관제 대시보드 (배송 상태 및 위치 정보 제공)

- **/visualization**  
  - 데이터 시각화 (차트, 그래프 등) 및 대시보드 연동 정보 제공

> **비고:** 각 엔드포인트는 서비스와 레포지토리 레이어를 통해 비즈니스 로직과 데이터 접근 로직을 분리하여 처리

---

# 4. 프로젝트 폴더 구조

예시 구조 (필요 시 추가 허락 후 수정):
teckwah_project/
├── frontend/
│   ├── public/                # 정적 파일 (logo, favicon 등)
│   ├── src/
│   │   ├── components/        # 재사용 UI 컴포넌트 (ex. common, dashboard)
│   │   ├── pages/             # 페이지 단위 컴포넌트 (Auth, Dashboard, Visualization 등)
│   │   ├── services/          # API 호출 및 비즈니스 로직 서비스
│   │   ├── contexts/
│   │   ├── utils/             # 공통 유틸리티/헬퍼 함수
│   │   ├── App.js             # 메인 App 컴포넌트 (라우터 포함)
│   │   ├── index.js           # 애플리케이션 진입점
│   │   └── AppRoutes.js       # 라우트 설정 (React Router 사용)
│   └── package.json
│
├── backend/
│   ├── app/
│   │   ├── api/               # API 엔드포인트 (ex. /auth, /dashboard, /visualization)
│   │   ├── config/            # 설정 파일
│   │   ├── data/              # 초기 데이터 파일
│   │   ├── models/            # DB 모델 (Cloud DB for MySQL 기반)
│   │   ├── repositories/      # 데이터 접근 로직
│   │   ├── schemas/           # API 요청/응답 스키마
│   │   ├── services/          # 비즈니스 로직
│   │   └── utils/             # 유틸리티 모듈
│   ├── static/                # 정적 파일
│   ├── main.py                # FastAPI 메인 앱
│   └── requirements.txt       # Python 패키지 의존성
│
└── deploy/
    └── local/                 # 로컬 개발 환경 설정
        ├── Dockerfile         # FastAPI + MySQL 컨테이너
        ├── docker-compose     # 도커 컴포즈 설정
        ├── .env.local         # 로컬 환경 변수
        └── init-db.sql        # DB 초기화 스크립트 (스키마, 테이블, 트리거 생성 등)




---

# 5. 개발, 구축, 테스트, 배포 가이드라인

## 5.1. 개발

- **원칙:**  
  - 모듈화 및 관심사 분리 (API, 서비스, 레포지토리, 모델/스키마)  
  - 주석 및 디버깅 메시지 모두 한국어 사용  
  - 요청된 기능만 수정/추가하여 기존 구조 일관성 유지

- **환경:**  
  - Windows 환경, PowerShell 사용 (명령어 연결 시 `;` 사용)

## 5.2. 구축

- **인프라:**  
  - 단일 컨테이너 배포 방식을 기본으로 하며, GAE 서버 운영영  
  - Dockerfile을 사용하여 로컬 및 GAE에  맞게 빌드  
  - 환경 변수 파일 관리 (`.env.local`, `.env.production`)

- **데이터베이스:**  
  - 로컬: MySQL 도커 컨테이너 (호스트: mysql, 포트: 3306, DB: delivery_system, 사용자: root/비밀번호: 1234)  
  - Cloud SQL MySQL 사용  
  - `init-db.sql`을 통해 스키마 및 트리거 자동 적용

## 5.3. 테스트 환경

- **환경:**  
  - 로컬: Docker-desktop (단일 컨테이너 구성, gae 운영 환경과 동일 조건)  
  - MySQL 도커 컨테이너와 백엔드 컨테이너가 동일 도커 네트워크 내에서 연결  
  - 스테이징 테스트: 실제 배포 환경과 동일한 조건으로 진행

## 5.4. 배포

- **대상:**  
  - GAE 서버 배포포

---

# 6. 추가 지침 및 룰

- **프론트엔드/백엔드 폴더 구조:**  
  - 위 구조를 정확히 따르며, 추가 시 사전 허락 필요

- **동일 도메인 서빙:**  
  - 프론트와 백엔드가 동일 도메인 내에서 상호 호출

- **DB 모델 변경 금지:**  
  - DB 구조(모델)는 임의로 수정하지 말 것 → 변경 시 반드시 허락 필요

- **패키지 및 라이브러리:**  
  - 유료 라이센스 제외, 모두 무료 버전 사용

- **기타 문서화 기능:**  
  - 불필요

- **코드 생성 원칙:**  
  - 요청한 내용만 정확하게 수정/생성, 추가 요청 시 새로운 로직 생성
