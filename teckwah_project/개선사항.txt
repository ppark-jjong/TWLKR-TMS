# 시각화 로직 요구사항 분석 및 개선 사항서

## 1. 요구사항 정리

### 접근 제어
- 시각화 기능은 관리자 권한 사용자만 접근 가능

### 사용자 인터페이스
- 드롭다운으로 시각화 유형 선택
- 날짜 범위 선택 기능
- 부서 필터 선택(전체, CS, HES, LENOVO)

### 시각화 유형별 요구사항
1. **시간별 접수량**
   - 기준 컬럼: `create_time` (주문 생성 시간)
   - 시각화 형태: 막대 그래프
   - 시간대 구분:
     - 09:00~18:00: 1시간 단위로 세분화
     - 18:00~20:00: 단일 구간
     - 20:00~00:00: 단일 구간
     - 00:00~09:00: 단일 구간

2. **부서별 상태 현황**
   - 기준 컬럼: `ETA` (도착 예정 시간)
   - 시각화 형태: 원 그래프
   - 각 부서별로 상태(대기중, 진행중, 완료, 이슈, 취소) 분포 비율 표시

## 2. 현재 코드 대비 개선 필요사항

### 시간별 접수량 개선사항
1. **기준 컬럼 변경**
   - 현재: `eta` 컬럼 기준 데이터 선별
   - 개선: `create_time` 컬럼 기준으로 변경

2. **시간대 구분 세분화**
   - 현재: 09:00~18:00(1시간 단위), 18:00~09:00(한 구간)
   - 개선: 야간 시간대를 3개 구간으로 세분화
     - 18:00~20:00, 20:00~00:00, 00:00~09:00

3. **데이터 처리 로직 수정**
   - 현재: 단순 시간별 카운팅
   - 개선: 시간대별 세부 그룹화 및 비율 계산 정확도 향상

### 부서별 상태 현황 개선사항
1. **시각화 형태 변경**
   - 현재: 바 차트 형태로 데이터 가공
   - 개선: 원 그래프에 적합한 데이터 구조로 변환

2. **데이터 구조화 개선**
   - 현재: 각 부서별 상태 카운트 테이블 형태
   - 개선: 차트 라이브러리에 맞는 계층적 데이터 구조 제공

3. **비율 계산 방식 개선**
   - 현재: 전체 대비 각 부서 비율
   - 개선: 각 부서 내에서 상태별 비율 계산

## 3. 세부 개선 방안

### 1) 백엔드 개선 사항

#### A. `get_visualization_data` 메서드 개선
- 입력 파라미터에 `base_column` 추가: `create_time` 또는 `eta` 선택 가능
- 차트 유형에 따라 자동으로 적합한 기준 컬럼 설정
- 필터링 로직 강화: 날짜 범위와 부서 필터 조합 최적화

#### B. 시간별 처리 메서드 개선
- `_process_time_chart_data` 메서드 리팩토링
- 야간 시간대를 3개 구간으로 세분화하는 로직 추가
- 시간대별 비율 계산 정확도 향상

#### C. 부서별 상태 처리 메서드 개선
- `_process_department_chart_data` 메서드 리팩토링
- 원 그래프에 적합한 중첩 데이터 구조 생성
- 부서별 각 상태의 비율을 정확히 계산하는 로직 추가
- 색상 코드 일관성 보장을 위한 상태별 색상 맵핑 정보 포함

#### D. 데이터 캐싱 전략 수립
- 빈번하게 요청되는 시각화 데이터 캐싱
- 캐시 무효화 조건 설정(신규 주문 등록, 상태 변경 등)

### 2) 프론트엔드 개선 사항

#### A. 관리자 권한 검증 강화
- 시각화 페이지 접근 시 관리자 권한 엄격하게 검증
- 무단 접근 시도 시 알림 및 로깅

#### B. UI/UX 개선
- 필터 컨트롤 개선: 직관적인 날짜 선택 및 부서 필터
- 차트 유형 전환 시 부드러운 트랜지션 효과
- 로딩 상태 표시 및 데이터 없음 상태 처리

#### C. 차트 컴포넌트 최적화
- 막대 그래프와 원 그래프 렌더링 성능 최적화
- 반응형 디자인으로 다양한 화면 크기 지원
- 차트 인터랙션 기능 강화(호버 시 상세 정보 표시 등)

#### D. 데이터 리프레시 로직 개선
- 필터 변경 시 자동 데이터 갱신
- 주기적 데이터 갱신 옵션 제공(실시간 대시보드 기능)

### 3) 테스트 및 검증 계획

- 다양한 날짜 범위 및 필터 조합에 대한 시각화 결과 검증
- 대량 데이터(수천 건) 처리 시 성능 테스트
- 차트 렌더링 정확도 및 비율 계산 검증
- 시각화 결과와 실제 DB 데이터 일치 여부 확인

## 4. 구현 우선순위

1. 기준 컬럼 변경 및 시간대 세분화 (백엔드)
2. 원 그래프에 적합한 데이터 구조 변환 (백엔드)
3. 관리자 권한 검증 강화 (프론트엔드)
4. 차트 컴포넌트 구현 및 최적화 (프론트엔드)
5. 필터 및 인터페이스 개선 (프론트엔드)
6. 데이터 캐싱 및 리프레시 로직 (백엔드/프론트엔드)
7. 테스트 및 검증

이 개선 사항서는 시스템의 현재 역량과 사용자 요구사항을 고려하여 시각화 기능을 효과적으로 강화하기 위한 방향을 제시합니다. 핵심은 데이터 처리 로직을 정확히 변경하고, 사용자 경험을 개선하는 데 있습니다.