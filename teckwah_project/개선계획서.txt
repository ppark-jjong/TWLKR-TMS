# Dash 애플리케이션 리팩토링 계획서

## 1. 개요

### 1.1 목표
- 다중 콜백 문제 해결을 통한 애플리케이션 안정성 향상
- 이벤트 중심 설계 적용을 통한 코드 구조 최적화
- 기존 기능 및 API 활용 방식 유지

### 1.2 현 상황 분석
- 지나치게 세분화된 콜백 구조로 경쟁 상태(race condition) 발생
- `allow_duplicate=True` 과다 사용으로 인한 콜백 충돌 가능성 
- 분산된 상태 관리로 예측 불가능한 동작 발생

## 2. 모듈별 수정 계획

### 2.1 콜백 등록 시스템 (`callbacks/callback.py`)

#### 변경 내용
- 콜백 등록 순서 명확화 및 의존성 고려한 등록 로직 재구성
- 콜백 그룹화를 위한 모듈 구조 개선

#### 수정 방향
```
def register_callbacks(app: Dash):
    """모든 콜백 등록 함수 - 명확한 순서로 등록"""
    # 1. 앱 상태 초기화 콜백 (최우선 등록)
    common_callbacks.register_app_state_callbacks(app)
    
    # 2. 인증 및 라우팅 관련 콜백
    auth_callbacks.register_auth_callbacks(app)
    
    # 3. 기능별 콜백
    dashboard_callbacks.register_data_callbacks(app)
    dashboard_callbacks.register_interaction_callbacks(app)
    visualization_callbacks.register_callbacks(app)
    download_callbacks.register_callbacks(app)
```

### 2.2 인증 콜백 (`callbacks/auth_callbacks.py`)

#### 변경 내용
- 로그인/로그아웃/토큰 관련 콜백 통합
- 페이지 접근 제어 콜백 최적화

#### 수정 방향
- `register_auth_callbacks()` 함수로 모든 인증 콜백 등록 통합
- 로그인 폼 제출과 버튼 클릭을 단일 콜백으로 통합
- 토큰 갱신과 세션 확인 관련 콜백 명확히 분리
- URL 리다이렉트 로직 단순화

### 2.3 대시보드 콜백 (`callbacks/dashboard_callbacks.py`)

#### 변경 내용
- 기능별 콜백 그룹화 및 통합
- 중복 출력 최소화 및 관련 업데이트 통합

#### 수정 방향
- 콜백 함수를 두 그룹으로 분리:
  1. `register_data_callbacks()`: 데이터 로드/필터링/검색 관련
  2. `register_interaction_callbacks()`: 모달/버튼 상호작용 관련
- 데이터 로드 관련 콜백 통합:
  - 날짜 변경, 새로고침, 필터 적용을 단일 콜백으로 통합
  - `callback_context`를 활용한 트리거 구분
- 상태 변경, 배차 처리, 삭제 처리 각각 개별 콜백으로 유지하되 내부 로직 최적화
- 모달 상태 관리 콜백 통합

### 2.4 시각화 콜백 (`callbacks/visualization_callbacks.py`)

#### 변경 내용
- 차트 타입별 콜백 정리
- 데이터 로드 및 차트 업데이트 로직 최적화

#### 수정 방향
- 배송 현황 차트와 시간대별 접수량 차트 관련 콜백 명확히 분리
- 차트 컨테이너 전환 로직 단순화
- 데이터 로드 및 차트 업데이트 통합 처리

### 2.5 다운로드 콜백 (`callbacks/download_callbacks.py`)

#### 변경 내용
- 다운로드 권한 검증 및 실행 로직 최적화
- 상태 표시 관련 콜백 통합

#### 수정 방향
- 권한 검증 및 날짜 범위 검증 로직 강화
- 다운로드 실행 및 결과 표시 콜백 통합

### 2.6 공통 콜백 (`callbacks/common_callbacks.py`)

#### 변경 내용
- 중앙 상태 관리 시스템 개선
- 알림 및 모달 관리 콜백 최적화

#### 수정 방향
- 앱 상태 관리를 위한 중앙 집중식 콜백 도입:
  ```
  register_app_state_callbacks(app)
  ```
- 알림 표시 및 모달 관리를 위한 통합된 콜백 시스템 구현
- 페이지 라우팅 관련 중복 콜백 제거

## 3. 핵심 컴포넌트 수정 계획

### 3.1 상태 관리 최적화 (`utils/state_manager.py` - 신규)

#### 변경 내용
- 상태 관리 유틸리티 함수 통합
- 일관된 상태 업데이트 패턴 구현

#### 수정 방향
- 새로운 `state_manager.py` 모듈 생성:
  - `update_app_state()` 함수 구현
  - `create_alert_data()` 함수 개선
  - `get_modal_state()` 함수 구현
- 모든 콜백에서 일관된 상태 관리 패턴 적용

### 3.2 모달 컴포넌트 최적화 (`components/modals.py`)

#### 변경 내용
- 모달 생성 및 상태 관리 로직 분리
- 모달 데이터 및 상태 처리 일관성 확보

#### 수정 방향
- 모달 생성 함수와 상태 관리 로직 분리
- 모달 컴포넌트의 속성 및 이벤트 핸들러 표준화
- 콜백에서 모달 상태 참조 방식 일관화

### 3.3 API 클라이언트 개선 (`api/api_client.py`)

#### 변경 내용
- 오류 처리 및 결과 반환 일관성 확보
- 비동기 요청 처리 최적화

#### 수정 방향
- 응답 처리 로직 강화
- 타임아웃 및 네트워크 오류 처리 개선
- API 응답 데이터 구조 일관화

## 4. 레이아웃 및 컴포넌트 수정

### 4.1 레이아웃 최적화 (`layouts/`)

#### 변경 내용
- 컴포넌트 ID 체계 일관화
- State 및 callback 의존성 명확화

#### 수정 방향
- ID 명명 규칙 표준화 (ex: `{페이지}-{컴포넌트타입}-{이름}`)
- 숨겨진 상태 저장 컴포넌트 구조화
- 콜백 간 의존성 최적화를 위한 레이아웃 구조 개선

### 4.2 메인 레이아웃 개선 (`layouts/main_layout.py`)

#### 변경 내용
- 전역 상태 저장소 구조 개선
- 페이지 라우팅 구조 최적화

#### 수정 방향
- 상태 저장소 명확히 분리:
  1. 인증 관련: `auth-store`
  2. 사용자 정보: `user-info-store`
  3. 앱 상태: `app-state-store`
  4. 업데이트 트리거: `update-trigger-store` (신규)
- 페이지 전환 관련 콜백 단순화

## 5. 상태 충돌 해결 전략

### 5.1 중앙 집중식 상태 관리 도입

#### 변경 내용
- 상태 업데이트 단일 흐름 구현
- 업데이트 집중화를 통한 충돌 방지

#### 수정 방향
- 상태 업데이트 중재자 패턴 적용:
  ```
  @app.callback(
      Output("app-state-store", "data"),
      [Input("state-update-trigger", "data")],
      [State("app-state-store", "data")]
  )
  def update_app_state_centralized(update_data, current_state):
      """모든 상태 업데이트를 중앙에서 처리"""
      if not update_data:
          return dash.no_update
      return combine_state(current_state, update_data)
  ```
- 모든 기능별 콜백에서는 상태 업데이트 요청만 생성

### 5.2 콜백 우선순위 및 종속성 관리

#### 변경 내용
- 콜백 간 의존성 명확화
- 콜백 실행 순서 예측가능성 향상

#### 수정 방향
- 콜백 등록 순서 명확히 정의
- 종속성 있는 콜백들의 Input/Output 관계 재정립
- 공유 컴포넌트 업데이트 로직 구조화

## 6. 콜백 리팩토링 원칙

### 6.1 이벤트 중심 설계 적용

#### 핵심 원칙
1. **하나의 사용자 액션 → 하나의 콜백 → 관련 UI 업데이트**
2. `callback_context`를 활용한 트리거 기반 로직 분기
3. 관련된 모든 컴포넌트 업데이트를 단일 콜백에서 처리

### 6.2 콜백 구조화 패턴

#### 핵심 원칙
1. 관련 기능별 콜백 그룹화
2. 단일 책임 원칙 적용 (콜백 하나당 하나의 명확한 책임)
3. 모든 콜백은 명확한 입력과 출력 관계 유지

### 6.3 상태 관리 패턴

#### 핵심 원칙
1. 상태 업데이트는 표준화된 함수 사용
2. 상태 참조는 항상 최신 State 활용
3. 중첩된 상태 업데이트 지양

## 7. 구현 로드맵

### 7.1 1단계: 콜백 분석 및 그룹화
- 모든 콜백 구조 분석 및 의존성 파악
- 콜백 기능 및 역할에 따른 분류
- 통합/분리 계획 수립

### 7.2 2단계: 핵심 인프라 개선
- 상태 관리 시스템 개선
- 중앙 집중식 상태 업데이트 구현
- 콜백 등록 구조 재설계

### 7.3 3단계: 모듈별 리팩토링
- 인증 관련 콜백 통합
- 대시보드 콜백 최적화
- 시각화 및 다운로드 콜백 개선

### 7.4 4단계: 테스트 및 오류 수정
- 각 페이지 기능 정상 작동 검증
- 콜백 충돌 및 오류 해결
- 성능 및 사용성 개선

## 8. 권장 수정 사항 우선순위

### 8.1 즉시 수정 (고우선순위)
1. `callback.py`의 콜백 등록 순서 명확화
2. 중복 출력 발생하는 콜백 통합 (`allow_duplicate=True` 제거)
3. 앱 상태 관리 중앙화

### 8.2 중기 수정 (중간 우선순위)
1. 대시보드 데이터 로드 관련 콜백 통합
2. 모달 관리 시스템 개선
3. API 에러 처리 일관성 확보

### 8.3 장기 수정 (하위 우선순위)
1. 레이아웃 구조 최적화
2. 상태 참조 패턴 표준화
3. 코드 모듈화 개선

## 9. 기대 효과

1. **안정성 향상**: 콜백 충돌 및 경쟁 상태 감소
2. **코드 가독성**: 명확한 이벤트-콜백 관계 확립
3. **유지보수성**: 기능별 모듈화 및 표준화된 패턴
4. **확장성**: 새로운 기능 추가 용이성 확보
5. **성능 개선**: 불필요한 콜백 실행 감소

## 10. 결론

본 계획서는 기존 기능 및 API 활용 방식을 유지하면서 Dash 애플리케이션의 콜백 구조를 최적화하는 방안을 제시했습니다. 이벤트 중심 설계 원칙을 적용하여 콜백 간 충돌을 최소화하고, 명확한 상태 관리 패턴을 도입함으로써 안정적이고 예측 가능한 애플리케이션 동작을 구현할 수 있습니다.

특히 중앙 집중식 상태 관리와 콜백 통합을 통해 현재 프로젝트 규모에서 Dash의 장점을 최대한 활용하면서도 복잡한 UI 상호작용을 효과적으로 처리할 수 있을 것입니다.