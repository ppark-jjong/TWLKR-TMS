# 배송 실시간 관제 시스템 - 핵심 구현 지침서

## 1. 프로젝트 개요 및 목표

이 프로젝트는 기업 내부용 배송 실시간 관제 및 데이터 시각화 서비스로, 다음과 같은 핵심 목표를 가집니다:

- **실시간 배송 주문 관리**: ETA 기준 주문 조회 및 상태 관리
- **효율적 배차 처리**: 담당자 배정 및 상태 관리 통합
- **데이터 기반 의사결정**: 시각화 및 주문 데이터 분석 기능
- **권한별 기능 제공**: 일반/관리자 권한 구분
- **동시성 제어**: 비관적 락을 통한 데이터 무결성 보장

## 2. 아키텍처 원칙 및 기술 스택

### 2.1 아키텍처 원칙

- **단순성 우선**: 과도한 추상화와 복잡성 지양, 직관적 구현 추구
- **YAGNI 적용**: 현재 필요한 기능만 구현, 미래 확장성 최소화
- **명시적 액션 기반**: 자동화 최소화, 사용자 액션 기반 데이터 갱신
- **백엔드 검증 최소화**: 보안 및 데이터 정합성 관련 최소 검증만 수행
- **프론트엔드 검증 중심**: 주요 유효성 검증은 프론트엔드에서 수행

### 2.2 기술 스택

- **백엔드**: FastAPI (0.109.0), SQLAlchemy (2.0.25), Pydantic (2.5.3)
- **프론트엔드**: Dash (2.14.1), Dash Bootstrap Components (1.5.0)
- **데이터베이스**: MySQL 8.0 (최근 1개월 데이터 유지)
- **배포 환경**: Docker 컨테이너, Supervisord 관리


## 3. 성능 및 안정성 고려사항

### 3.1 데이터베이스 최적화

- 주요 쿼리 패턴에 맞는 인덱스 설정
- 한 번에 조회하는 데이터 양 제한 (페이지네이션)
- 복잡한 조인 최소화, 필요한 경우 적절한 인덱스 설정
- 트랜잭션 범위는 최소한으로 유지

### 3.2 오류 처리

- 모든 API는 일관된 오류 응답 구조 사용
- 백엔드는 로깅을 통한 오류 추적
- 프론트엔드는 사용자 친화적 오류 메시지 표시
- 네트워크 오류, 타임아웃 등 예외 상황 처리

### 3.3 동시성 관리

- 비관적 락을 통한 동시 편집 충돌 방지
- 락 획득/해제는 명시적으로 처리
- 만료된 락은 자동으로 정리되도록 구현

## 4. 개발 및 배포 지침

### 4.1 개발 환경

- 로컬 MySQL 사용 (Docker 컨테이너 내 별도 DB 구성 금지)
- Docker Desktop으로 로컬 테스트 환경 구성
- 무료 라이브러리만 사용 가능

### 4.2 코드 작성 원칙

- 모든 주석은 한국어로 작성
- 간결하고 가독성 높은 코드 작성
- 과도한 추상화 및 계층화 지양
- YAGNI 원칙 적용 (불필요한 기능 개발 지양)

### 4.3 배포 고려사항

- 단일 Docker 컨테이너로 배포 (FastAPI + Dash)
- Supervisord로 서비스 프로세스 관리
- 환경 변수를 통한 설정 관리
- 헬스 체크 및 연결 관련 과도한 로깅 지양

## 5. 유지보수 고려사항

### 5.1 코드 변경 원칙

- 요청된 기능만 수정/생성
- 기존 구조는 최대한 유지
- DB 모델 변경은 사전 협의 필수
- 이미 구현된 기능의 원리 존중

6. 기타
- 프로젝트는 Docker 환경에서 실행됨 그러니 단일 컨테이너의 올바른 설정과 코드 일관성이 필요함
- 현재 window 및 powershell을 사용중
- deploy 폴더의 .env.local 의 내용들을 무조건 활용하여 환경설정 관련 내용을 효율적으로 유지보수할 수 있게 해야함
- 예상 되는 데이터 량 : 동시접속자수 50인 미만, tps 100 미만, 활용 데이터 수 100mb 미만



