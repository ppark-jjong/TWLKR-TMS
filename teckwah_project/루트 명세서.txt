# 배송 실시간 관제 시스템 - **루트 명세서** (공통사항 포함 간결 버전)

## 1. 프로젝트 개요 및 목표

- **실시간 배송 주문 관리**  
  - ETA 기준으로 주문을 조회하고 상태를 관리합니다.
- **효율적 배차 처리**  
  - 담당자(기사) 배정 및 상태 관리를 통합적으로 제공합니다.
- **데이터 기반 의사결정**  
  - 시각화 및 주문 데이터 분석 기능을 제공해, 운영 효율을 높입니다.
- **권한별 기능 구분**  
  - 일반 사용자 / 관리자 권한으로 분리하여 처리합니다.
- **동시성 제어**  
  - 비관적 락(Pessimistic Lock)을 통해 다중 사용자의 동시에 편집을 방지합니다.

---

## 2. 아키텍처 원칙 및 기술 스택

### 2.1 아키텍처 원칙

1. **단순성 우선**: 과도한 추상화와 복잡성은 지양, 구현은 직관적이어야 합니다.  
2. **YAGNI**: 당장 필요한 기능만 구현하고, 미리 확장 로직은 최소화합니다.  
3. **명시적 액션 기반**: 자동화는 최소화하고, 사용자의 명시적 액션에 따라 데이터가 갱신되도록 합니다.  
4. **백엔드 검증 최소화**: 보안/데이터 정합성과 같은 필수 검증에만 집중합니다.  
5. **프론트엔드 검증 중심**: 대부분의 유효성 검증은 UI에서 처리합니다.

### 2.2 기술 스택

- **백엔드**: FastAPI 0.109.0, SQLAlchemy 2.0.25, Pydantic 2.5.3  
- **프론트엔드**: Dash 2.14.1, Dash Bootstrap Components 1.5.0  
- **데이터베이스**: MySQL 8.0, 최근 1개월 데이터 유지 정책  
- **배포 환경**: Docker 컨테이너, Supervisord로 관리  

---

## 3. 성능 및 안정성 고려사항

### 3.1 데이터베이스 최적화

- 조회 속도를 높이기 위해 필요한 필드에 인덱스를 설정하고, 한 번에 너무 많은 데이터를 가져오지 않도록 페이지네이션을 적용합니다.  
- 복잡한 조인은 최소화하고, 필요한 경우 적절히 인덱스 설정을 합니다.  
- 트랜잭션 범위는 가급적 짧게 유지합니다.

### 3.2 오류 처리

- 모든 API는 일관된 에러 응답 구조(예: `{"success": false, "error_code": "…", "message": "…"}`)를 따릅니다.  
- 백엔드는 중요한 에러를 로깅하여 추적하며, 프론트엔드는 사용자 친화적 메시지를 보여줍니다.  
- 네트워크 오류나 타임아웃에 대한 예외 처리가 필요합니다.

### 3.3 동시성 관리

- 비관적 락(Pessimistic Lock)으로 다중 사용자가 같은 데이터를 동시에 수정할 때 충돌을 방지합니다.  
- 락 획득 및 해제 과정을 명시적으로 처리하고, 자동 만료도 고려합니다.

---

## 4. 개발 및 배포 지침

### 4.1 개발 환경

- 로컬 MySQL DB 사용(컨테이너 내부에 DB 구성 금지)  
- Docker Desktop을 이용해 로컬 테스트 환경을 구성  
- 오픈소스 무료 라이브러리만 사용합니다.

### 4.2 코드 작성 원칙

- 모든 주석은 한국어로 작성하고, 가독성을 유지합니다.  
- 과도한 계층화/추상화는 지양하며, 필요 최소한으로 기능을 구성합니다.  
- YAGNI 원칙(지금 당장 필요한 기능 외에는 구현하지 않음)을 철저히 지킵니다.

### 4.3 배포 고려사항

- **FastAPI + Dash**를 하나의 Docker 컨테이너로 묶어 배포합니다.  
- Supervisord를 이용해 프로세스를 관리하고, 환경 변수로 설정값을 주입합니다.  
- 헬스 체크와 관련된 과도한 로깅은 지양(한 번만 선언)합니다.

---

## 5. 유지보수 고려사항

### 5.1 코드 변경 원칙

- 요청된 기능만 수정·생성하고, 기존 구조는 최대한 유지합니다.  
- DB 모델 변경이 필요할 경우 사전 협의가 필수이며, 이미 구현된 로직을 존중합니다.

---

## 6. 기타

- 프로젝트는 Docker 환경에서 실행되며, 단일 컨테이너 내부 설정과 코드 일관성이 중요합니다.  
- 현재 OS는 Windows + PowerShell을 사용 중입니다.  
- `deploy` 폴더 내부 `.env.local` 파일 내용을 반드시 반영해 환경설정을 관리합니다.  
- 예상 데이터 규모:  
  - 동시 접속자 50명 미만, TPS(초당 트랜잭션 수) 100 미만, 데이터 약 100MB 미만

---

## 7. 프론트엔드 & 백엔드 공통 유의사항

### 7.1 토큰 인증 및 권한 (JWT)

- **백엔드**는 액세스 토큰과 리프레시 토큰 발급·검증 로직을 제공합니다.  
- **프론트엔드**는 만료 임박 시 자동으로 리프레시 API를 호출하고, 인증이 실패하면 로그인 화면으로 돌려보냅니다.  
- **관리자 권한**이 필요한 기능(다운로드, 삭제 등)은 권한 검증 후 403 오류를 반환합니다.

### 7.2 비관적 락(Pessimistic Lock)

- **상태 변경, 배차, 삭제** 등 변경 작업 전에는 **락을 획득**해야 합니다.  
- 이미 다른 사용자가 잡고 있으면(락 충돌) 충돌 메시지를 반환(`LOCK_CONFLICT`)하고, 프론트엔드에서 알림으로 안내합니다.  
- **다중 작업**(배차·삭제 등 여러 건 동시에 처리) 시에는 "All-or-Nothing" 방식으로 락을 모두 획득하거나, 하나라도 실패 시 전부 해제합니다.

### 7.3 API 구조 표준화

- **성공** 시 `{"success": true, "data": ...}`  
- **실패** 시 `{"success": false, "error_code": "…", "message": "…"}`  
- 프론트엔드는 `success` 필드를 우선 확인하고, 실패 시 `error_code`에 따른 대응을 수행합니다.

### 7.4 데이터 검증

- **프론트엔드**: 기사명, 날짜 범위, 연락처 등의 유효성을 먼저 검증하여 잘못된 데이터를 백엔드로 전송하지 않습니다.  
- **백엔드**: Pydantic 모델을 활용해 형식적인 데이터 구조와 필수 입력만 재검증하고, 권한·락 여부를 확인합니다.

### 7.5 관리자 기능(엑셀 다운로드, 삭제)

- **엑셀 다운로드**  
  - 3개월 이내 날짜 범위를 백엔드에서 검증하고, 권한이 없으면 403을 반환합니다.  
  - 대량 데이터를 다룰 수 있으므로, 스트리밍 등 성능에 유의해야 합니다.
- **삭제 기능**  
  - 관리자 권한 + 락을 획득한 상태에서만 실행 가능합니다.  
  - 삭제 후에는 데이터 재로드를 유도합니다.

### 7.6 협업 가이드

- **API 문서화**  
  - 백엔드는 Swagger 혹은 문서화 툴로 API 스펙을 명확히 합니다.  
  - 프론트엔드는 해당 스펙을 참고해 정확한 요청 형식을 준수합니다.
- **버전 관리**  
  - 백엔드 API가 변경될 때는 마이그레이션 안내를 공유하고, 프론트엔드는 해당 버전에 맞춰 수정합니다.
- **로깅 및 디버깅**  
  - 백엔드는 콜백(요청)별 로그를 남겨 디버깅할 수 있도록 합니다.  
  - 프론트엔드는 Dash 콜백 흐름을 적절히 관리해 어떤 요청이 어디에서 실패했는지 명확히 파악합니다.

---

이상으로, 기존 **루트 명세서**의 모든 내용을 유지하면서, **프론트엔드/백엔드 공통 주의사항**을 추가하고 조금 더 간결하게 정리한 버전입니다.  
**(1) 토큰/권한 처리, (2) 락 동시성 제어, (3) API 표준 구조, (4) 검증, (5) 관리자 기능** 등이 핵심 사항이므로, 개발 시 반드시 준수해 주세요.
