
1. 프로젝트 개요 및 배경

1.1 목적

기업 내부에서 사용할 배송 실시간 관제 및 데이터 시각화 서비스를 개발한다.

실시간 배송 주문 관리 및 모니터링

ETA(도착 예정 시간) 기준으로 주문을 조회하고 상태를 관리한다.

효율적인 배차 관리

담당자 배정 및 상태 변경을 통한 배송 과정 최적화.

데이터 기반 의사결정 지원

직관적인 시각화와 시간대별 주문 데이터 분석 기능 제공.

권한별 차별화된 기능 제공

일반 사용자와 관리자의 권한 및 기능을 구분하여 제공.

동시성 제어

비관적 락(Pessimistic Lock)을 통해 다중 사용자 환경에서 데이터 무결성을 보장한다.

1.2 배경

본 프로젝트는 전 풀스택/데이터 엔지니어가 단독 개발을 시작했고, 곧 서비스 배포가 예정되어 있다.

모든 주석은 한국어로 작성하며, 요청된 기능만 수정·생성한다.

추가 요청이 있으면 새로운 로직을 구현하되, 기존 구조는 최대한 유지한다.

1.3 특징

상세한 설명 및 한국어 주석 제공.

비관적 락으로 동시성 제어(낙관적 락은 배제).

DB 모델(테이블 구조) 변경은 사전 허가 후 진행 가능.

무료 라이브러리만 사용(유료 라이선스 라이브러리 사용 불가).

1.4 배송 데이터 흐름

주문 접수 (WAITING → 배차 처리 → 상태 변경(IN_PROGRESS → COMPLETE / ISSUE / CANCEL))

시간 기록 (접수 시간, 진행 시작, 완료/이슈 시간)

동시 접속 시 비관적 락 적용

1.5 핵심 아키텍처 원칙

프론트엔드 중심 유효성 검증, 백엔드는 최소 검증 수행

자동화 기능 방지, 명시적 사용자 액션으로 데이터 갱신

YAGNI 원칙 적용, 불필요한 기능 및 복잡성 지양

시스템 규모(일평균 100건, 동시 사용자 50명 미만)에 맞는 적정 기술 적용

간결한 코드 작성, 과도한 추상화 및 계층화 지양

2. 기술 스택 및 아키텍처

2.1 프론트엔드

Dash (Python 기반), 무료 라이브러리 사용

모든 데이터 로드는 사용자 액션에 의해서만 발생

클라이언트 측에서 유효성 검증 우선 수행, 즉각적 사용자 피드백 제공

2.2 백엔드

FastAPI 0.95.x 이상 (Python)

과도한 계층 분리 지양, 단순한 구조 유지

JWT 기반 인증, 보안 및 데이터 정합성 관련 최소한의 검증만 수행

자동화 및 백그라운드 작업 최소화

2.3 데이터베이스

핫 데이터: MySQL 8.0 (최근 1개월 데이터 유지)


2.4 배포 및 테스트 환경

Google App Engine (단일 컨테이너, supervisord로 관리)

로컬 테스트는 Docker-desktop으로 단일 컨테이너 구성

3. 개발 및 배포 가이드라인

무료 라이브러리만 사용 가능

한국어 주석 및 메시지 사용

오버엔지니어링 방지 및 단순한 구현 원칙 유지

DB 모델 변경 시 사전 협의 필수

4. 유효성 검증 및 데이터 흐름

프론트엔드 중심 유효성 검증 (형식, 필수 필드, 비즈니스 규칙)

백엔드는 보안과 데이터 정합성 위주 최소 검증

사용자 액션으로만 데이터 로드 및 갱신 수행

5. 비관적 락 구현 지침

명시적 락 획득 및 해제, 5분 고정 타임아웃

충돌 발생 시 423 Locked 상태 코드와 사용자 안내 제공

다중 락은 All-or-Nothing 원칙 적용하여 단순화

6. 사용자 인터페이스 지침

직관적인 레이아웃, 명확한 사용자 피드백

락 상태 시각적 표시, 명시적 사용자 액션

7. 예상 용량 및 사용량

MySQL 연간 약 150MB 예상 (최근 1개월치만 저장)

초당 QPS 10 이하, 동시 사용자 50명 미만

8. 기타
프로젝트는 Docker 환경에서 실행됨 그러니 단일 컨테이너의 올바른 설정과 코드 일관성이 필요함
현재 window 및 powershell을 사용중
deploy 폴더의 .env.local 의 내용들을 무조건 활용하여 환경설정 관련 내용을 효율적으로 유지보수할 수 있게 해야함


