# 배송 실시간 관제 시스템 - **루트 명세서** (공통사항 포함 간결 버전)

## 1. 프로젝트 개요 및 목표

- **실시간 배송 주문 관리**  
  - ETA 기준으로 주문을 조회하고 상태를 관리합니다.
- **효율적 배차 처리**  
  - 담당자(기사) 배정 및 상태 관리를 통합적으로 제공합니다.
- **데이터 기반 의사결정**  
  - 시각화 및 주문 데이터 분석 기능을 제공해, 운영 효율을 높입니다.
- **권한별 기능 구분**  
  - 일반 사용자 / 관리자 권한으로 분리하여 처리합니다.


- **추가 지침**
  - 2.1, 4.2를 필수적으로 지키며, 필요한 라이브러리만 사용하며, 추가적인 커스터마이징 금지

---

## 2. 아키텍처 원칙 및 기술 스택

### 2.1 아키텍처 원칙

1. **단순성 우선**: 과도한 추상화와 복잡성은 지양, 구현은 직관적이어야 합니다.  
2. **YAGNI**: 당장 필요한 기능만 구현하고, 미리 확장 로직은 최소화합니다.  
3. **명시적 액션 기반**: 자동화는 최소화하고, 사용자의 명시적 액션에 따라 데이터가 갱신되도록 합니다.  
4. **백엔드 검증 최소화**: 보안/데이터 정합성과 같은 필수 검증에만 집중합니다.  
5. **프론트엔드 검증 중심**: 대부분의 유효성 검증은 UI에서 처리합니다.

### 2.2 기술 스택

- **백엔드**: FastAPI 0.109.0, SQLAlchemy 2.0.25, Pydantic 2.5.3  
- **프론트엔드**: React 18.x, React Query, Axios, Ant Design(antd) 5.x  
  - **주의**: 프론트엔드는 antd의 기본 UI를 최대한 활용하며, 과도한 커스터마이징은 금지합니다.
- **데이터베이스**: MySQL 8.0, 최근 1개월 데이터 유지 정책  
- **배포 환경**: Docker 컨테이너, DockerFile

---

## 3. 성능 및 안정성 고려사항

### 3.1 데이터베이스 최적화

- 조회 속도를 높이기 위해 필요한 필드에 인덱스를 설정하고, 한 번에 너무 많은 데이터를 가져오지 않도록 페이지네이션을 적용합니다.  
- 복잡한 조인은 최소화하고, 필요한 경우 적절히 인덱스 설정을 합니다.  
- 트랜잭션 범위는 가급적 짧게 유지합니다.

### 3.2 오류 처리

- 모든 API는 일관된 에러 응답 구조(예: `{"success": false, "error_code": "…", "message": "…"}`)를 따릅니다.  
- 백엔드는 중요한 에러를 로깅하여 추적하며, 프론트엔드는 사용자 친화적 메시지를 보여줍니다.  
- 네트워크 오류나 타임아웃에 대한 예외 처리가 필요합니다.



---

## 4. 개발 및 배포 지침

### 4.1 개발 환경

- 로컬 MySQL DB 사용(컨테이너 내부에 DB 구성 금지)  
- Docker Desktop을 이용해 로컬 테스트 환경을 구성  
- 오픈소스 무료 라이브러리만 사용합니다.

### 4.2 코드 작성 원칙

- 모든 주석은 한국어로 작성하고, 가독성을 유지합니다.  
- 과도한 계층화/추상화는 지양하며, 필요 최소한으로 기능을 구성합니다.  
- YAGNI 원칙(지금 당장 필요한 기능 외에는 구현하지 않음)을 철저히 지킵니다.

### 4.3 배포 고려사항

- **FastAPI + React**를 하나의 Docker 컨테이너로 묶어 배포합니다.  
- Dockerfile로 간단하게 빌드 및 배포 구성  
- 환경 변수로 필수 설정값만 관리  
- 정적 파일은 nginx로 단순 서빙  
- 헬스 체크와 관련된 과도한 로깅은 지양(한 번만 선언)합니다.  
- 실제 환경에서는 구체적인 출처로 제한하며 이를 배포 테스트 시에도 같이 테스트 되어야 합니다.  
- **CORS 설정**: 아주 기본적이고 간단한 내용만 설정합니다.

---

## 5. 유지보수 고려사항

### 5.1 코드 변경 원칙

- 요청된 기능만 수정·생성하고, 기존 구조는 최대한 유지합니다.  
- DB 모델 변경이 필요할 경우 사전 협의가 필수이며, 이미 구현된 로직을 존중합니다.

---

## 6. 기타

- 프로젝트는 Docker 환경에서 실행되며, 단일 컨테이너 내부 설정과 코드 일관성이 중요합니다.  
- 현재 OS는 Windows + PowerShell을 사용 중입니다.  
- `deploy` 폴더 내부 `.env.local` 파일 내용을 반드시 반영해 환경설정을 관리합니다.  
- 예상 데이터 규모:  
  - 동시 접속자 50명 미만, TPS(초당 트랜잭션 수) 100 미만, 데이터 활용 시간당 약 100MB 미만

---

### 7. 기타 가이드

- **API 문서화**: 따로 문서화는 필요하지 않습니다.  
- **버전 관리**: 따로 버전 관리는 필요하지 않습니다.  
- **로깅 및 디버깅**:  
  - 백엔드는 콜백(요청)별 로그를 남겨 디버깅할 수 있도록 합니다.  
  - 프론트엔드는 요청 흐름을 적절히 관리해 어떤 요청이 어디에서 실패했는지 명확히 파악합니다.  
  - 무조건 모든 로직은 한 번만 시도하고, 자동 재시도 로직은 전부 필요하지 않습니다.  
- **웹 기반 서비스**: 웹 서비스에서만 작동하기 때문에 다른 기기의 UI나 동작 방식 고려는 필요하지 않습니다.
- **테스트** : 바로 배포 가능한 환경과 똑같이 테스트를 원합니다. 로컬 docker 단일 컨테이너 테스트를 기반으로 QA 테스트를 진행 중입니다 불필요한 단위 테스트나 기타 테스트들은 필요 없습니다
- **확장성 검토** : 예상 프로젝트 규모를 벗어나는 추가 확장성은 고려는 금지합니다
- **url 생성 규칙** : 어떠한 url에도 /api/라는 내용은 절대 적지마
---