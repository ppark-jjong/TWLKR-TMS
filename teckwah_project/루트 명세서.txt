# 배송 실시간 관제 시스템 - 핵심 구현 지침서

## 1. 프로젝트 개요 및 목표

이 프로젝트는 기업 내부용 배송 실시간 관제 및 데이터 시각화 서비스로, 다음과 같은 핵심 목표를 가집니다:

- **실시간 배송 주문 관리**: ETA 기준 주문 조회 및 상태 관리
- **효율적 배차 처리**: 담당자 배정 및 상태 관리 통합
- **데이터 기반 의사결정**: 시각화 및 주문 데이터 분석 기능
- **권한별 기능 제공**: 일반/관리자 권한 구분
- **동시성 제어**: 비관적 락을 통한 데이터 무결성 보장

## 2. 아키텍처 원칙 및 기술 스택

### 2.1 아키텍처 원칙

- **단순성 우선**: 과도한 추상화와 복잡성 지양, 직관적 구현 추구
- **YAGNI 적용**: 현재 필요한 기능만 구현, 미래 확장성 최소화
- **명시적 액션 기반**: 자동화 최소화, 사용자 액션 기반 데이터 갱신
- **백엔드 검증 최소화**: 보안 및 데이터 정합성 관련 최소 검증만 수행
- **프론트엔드 검증 중심**: 주요 유효성 검증은 프론트엔드에서 수행

### 2.2 기술 스택

- **백엔드**: FastAPI (0.109.0), SQLAlchemy (2.0.25), Pydantic (2.5.3)
- **프론트엔드**: Dash (2.14.1), Dash Bootstrap Components (1.5.0)
- **데이터베이스**: MySQL 8.0 (최근 1개월 데이터 유지)
- **배포 환경**: Docker 컨테이너, Supervisord 관리

## 3. 프로젝트 구조

```
teckwah_project/
├── main/                     # 메인 소스 코드
│   ├── server/               # 백엔드 (FastAPI)
│   │   ├── api/              # API 라우터
│   │   ├── config/           # 설정
│   │   ├── models/           # DB 모델
│   │   ├── repositories/     # 데이터 접근 계층
│   │   ├── schemas/          # 데이터 스키마
│   │   ├── services/         # 비즈니스 로직
│   │   └── utils/            # 유틸리티
│   ├── dash/                 # 프론트엔드 (Dash)
│   │   ├── api/              # API 클라이언트
│   │   ├── assets/           # 정적 자원
│   │   ├── callbacks/        # Dash 콜백
│   │   ├── components/       # UI 컴포넌트
│   │   ├── layouts/          # 페이지 레이아웃
│   │   └── utils/            # 유틸리티
│   └── supervisord.conf      # 서비스 관리
├── deploy/                   # 배포 자원
│   ├── Dockerfile            # Docker 정의
│   ├── docker-compose.yml    # 컨테이너 구성
│   ├── requirements.txt      # 패키지 목록
│   └── .env.local            # 환경 변수
```

## 4. 핵심 구현 지침

### 4.1 환경 설정 관리

- 모든 환경 설정은 `.env.local` 파일에서 관리
- `settings.py`를 통해 모든 코드에서 일관된 설정 접근
- 개발자는 반드시 `.env.local` 파일을 참조하여 설정 관리
- Docker 환경 변수는 `.env.local`과 동기화 유지

### 4.2 백엔드 계층 구조

- **API 라우터**: HTTP 요청 처리, 응답 반환, 의존성 주입 구성
- **서비스 계층**: 핵심 비즈니스 로직, 트랜잭션 관리
- **레포지토리 계층**: 데이터 접근 로직, 쿼리 실행
- **모델/스키마**: 데이터 구조 정의 및 유효성 검증

### 4.3 주요 데이터 흐름

- **주문 생성**: WAITING 상태로 시작
- **배차 처리**: 대기 상태 주문에 배차 담당자 할당
- **상태 변경**: WAITING -> IN_PROGRESS -> COMPLETE/ISSUE/CANCEL
- **시간 기록**: 상태 변경에 따른 자동 시간 기록 (진행 시작, 완료 등)
- **메모 관리**: 각 주문에 대한 작업 메모 기록

### 4.4 비관적 락 구현

- 모든 수정 작업은 비관적 락 획득 필요
- 락 타임아웃은 5분으로 고정 (연장 메커니즘 없음)
- 락 충돌 시 423 Locked 상태 코드 반환
- 다중 락은 All-or-Nothing 원칙 적용

### 4.5 인증 및 권한

- JWT 기반 토큰 인증 (액세스 토큰 60분, 리프레시 토큰 7일)
- 권한은 ADMIN과 USER로 구분
- 일부 기능 (다운로드, 삭제 등)은 관리자 전용
- 토큰 만료 시 명시적 갱신 필요 (자동 갱신 없음)

### 4.6 프론트엔드 구성

- 단일 페이지 애플리케이션(SPA) 구조
- 주요 페이지: 로그인, 대시보드, 시각화, 다운로드(관리자)
- 모든 데이터 로드는 명시적 사용자 액션에 의해서만 발생
- 주요 UI 컴포넌트: 테이블, 모달, 알림, 차트

### 4.7 상태 관리

- 인증 상태: `auth-store` (세션 저장소)
- 사용자 정보: `user-info-store` (세션 저장소)
- 앱 전역 상태: `app-state-store` (메모리 저장소)
- 임시 데이터: `dashboard-data-store` (메모리 저장소)

## 5. 성능 및 안정성 고려사항

### 5.1 데이터베이스 최적화

- 주요 쿼리 패턴에 맞는 인덱스 설정
- 한 번에 조회하는 데이터 양 제한 (페이지네이션)
- 복잡한 조인 최소화, 필요한 경우 적절한 인덱스 설정
- 트랜잭션 범위는 최소한으로 유지

### 5.2 오류 처리

- 모든 API는 일관된 오류 응답 구조 사용
- 백엔드는 로깅을 통한 오류 추적
- 프론트엔드는 사용자 친화적 오류 메시지 표시
- 네트워크 오류, 타임아웃 등 예외 상황 처리

### 5.3 동시성 관리

- 비관적 락을 통한 동시 편집 충돌 방지
- 락 획득/해제는 명시적으로 처리
- 만료된 락은 자동으로 정리되도록 구현

## 6. 개발 및 배포 지침

### 6.1 개발 환경

- 로컬 MySQL 사용 (Docker 컨테이너 내 별도 DB 구성 금지)
- Docker Desktop으로 로컬 테스트 환경 구성
- 무료 라이브러리만 사용 가능

### 6.2 코드 작성 원칙

- 모든 주석은 한국어로 작성
- 간결하고 가독성 높은 코드 작성
- 과도한 추상화 및 계층화 지양
- YAGNI 원칙 적용 (불필요한 기능 개발 지양)

### 6.3 배포 고려사항

- 단일 Docker 컨테이너로 배포 (FastAPI + Dash)
- Supervisord로 서비스 프로세스 관리
- 환경 변수를 통한 설정 관리
- 헬스 체크 및 연결 관련 과도한 로깅 지양

## 7. 유지보수 고려사항

### 7.1 코드 변경 원칙

- 요청된 기능만 수정/생성
- 기존 구조는 최대한 유지
- DB 모델 변경은 사전 협의 필수
- 이미 구현된 기능의 원리 존중

### 7.2 테스트 및 검증

- 기능 변경 시 기존 기능 정상 동작 확인
- 락 메커니즘 정상 작동 확인
- 다양한 브라우저/해상도에서 UI 검증
- 예외 상황 처리 검증

## 8. 결론

이 시스템은 간결하고 명확한 구조를 가진 실시간 배송 관제 시스템으로, 과도한 복잡성 없이 핵심 기능에 집중합니다. 개발자는 이 지침서를 참고하여 기존 코드의 구조와 원칙을 존중하면서 필요한 기능을 구현하고 유지보수해야 합니다.

특히 비관적 락 메커니즘, 명시적 액션 기반 데이터 처리, 단순한 계층 구조 등의 핵심 원칙을 유지하는 것이 중요합니다. 명세서에 정의된 세부 구현 내용은 본 지침서의 원칙에 따라 구현해야 합니다.