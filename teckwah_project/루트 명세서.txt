# 배송 실시간 관제 시스템 - 루트 명세서

## 1. 프로젝트 개요 및 목표

- **실시간 배송 주문 관리**  
  - ETA 기준으로 주문을 조회하고 상태를 관리합니다.
- **효율적 배차 처리**  
  - 담당자(기사) 배정 및 상태 관리를 통합적으로 제공합니다.
- **데이터 기반 의사결정**  
  - 시각화 및 주문 데이터 분석 기능을 제공해, 운영 효율을 높입니다.
- **권한별 기능 구분**  
  - 일반 사용자 / 관리자 권한으로 분리하여 처리합니다.
- **지역 특화 시스템**
  - 한국어로만 제공되며 국내 사용자만을 대상으로 합니다.

- **추가 지침**
  - 2.1, 4.2를 필수적으로 지키며, 필요한 라이브러리만 사용하며, 추가적인 커스터마이징 금지

---

## 2. 아키텍처 원칙 및 기술 스택

### 2.1 아키텍처 원칙

1. **단순성 우선**: 과도한 추상화와 복잡성은 지양, 구현은 직관적이어야 합니다.  
2. **YAGNI**: 당장 필요한 기능만 구현하고, 미리 확장 로직은 최소화합니다.  
3. **명시적 액션 기반**: 자동화는 최소화하고, 사용자의 명시적 액션에 따라 데이터가 갱신되도록 합니다.  
4. **백엔드 검증 최소화**: 보안/데이터 정합성과 같은 필수 검증에만 집중합니다.  
5. **프론트엔드 검증 중심**: 대부분의 유효성 검증은 UI에서 처리합니다.
6. **사용자 인터페이스 일관성**: 동일한 상황에서 동일한 인터페이스 요소와 패턴을 제공합니다.

### 2.2 기술 스택

- **백엔드**: FastAPI 0.109.0, SQLAlchemy 2.0.25, Pydantic 2.5.3  
- **프론트엔드**: React 18.x, React Query, Axios, Ant Design(antd) 5.x  
  - **주의**: 프론트엔드는 antd의 기본 UI를 최대한 활용하며, 과도한 커스터마이징은 금지합니다.
- **데이터베이스**: MySQL 8.0
- **배포 환경**: Docker 컨테이너, DockerFile
- **버젼**: 사용되는 각 버전에서 호환하는 함수와 기능들을 정확하게 검토 후 사용합니다

---

## 3. 성능 및 안정성 고려사항

### 3.1 데이터베이스 최적화

- 조회 속도를 높이기 위해 필요한 필드에 인덱스를 설정하고, 한 번에 너무 많은 데이터를 가져오지 않도록 페이지네이션을 적용합니다.  
- 복잡한 조인은 최소화하고, 필요한 경우 적절히 인덱스 설정을 합니다.  
- 트랜잭션 범위는 가급적 짧게 유지합니다.

### 3.2 오류 처리

- 모든 API는 일관된 에러 응답 구조(예: `{"success": false, "error_code": "…", "message": "…"}`)를 따릅니다.  
- 백엔드는 중요한 에러를 로깅하여 추적하며, 프론트엔드는 사용자 친화적 메시지를 보여줍니다.  
- 네트워크 오류나 타임아웃에 대한 예외 처리가 필요합니다.

### 3.3 명확한 데이터 인터페이스 및 사용자 중심 오류 처리

- **백엔드-프론트엔드 데이터 계약**
  - 백엔드와 프론트엔드 사이의 모든 데이터 교환은 명확히 정의된 구조를 따릅니다.
  - 방어적 코딩보다 명확한 데이터 구조와 타입을 통한 안정성을 확보합니다.
  - 모든 응답은 `{success: boolean, message: string, data?: any, error_code?: string}` 형식을 준수합니다.

- **사용자 친화적 오류 메시지**
  - 시스템 내부 오류는 사용자가 이해할 수 있는 한국어 메시지로 변환합니다.
  - 오류 상황에서는 명확한 다음 단계(새로고침, 다시 시도 등)를 제안합니다.
  - 같은 오류에 대한 알림은 한 번만 표시하여 사용자 경험을 해치지 않습니다.

- **사용자 액션 기반 복구**
  - 시스템은 자동 재시도 기능을 사용하지 않습니다.
  - 모든 복구 시도는 사용자의 명시적인 액션(새로고침 버튼 클릭 등)을 통해서만 이루어집니다.
  - 오류 발생 시 필요한 액션 버튼(예: 새로고침)을 함께 제공합니다.

---

## 4. 개발 및 배포 지침

### 4.1 개발 환경

- 로컬 MySQL DB 사용(컨테이너 내부에 DB 구성 금지)  
- Docker Desktop을 이용해 로컬 테스트 환경을 구성  
- 오픈소스 무료 라이브러리만 사용합니다.

### 4.2 코드 작성 원칙

- 모든 주석은 한국어로 작성하고, 가독성을 유지합니다.  
- 과도한 계층화/추상화는 지양하며, 필요 최소한으로 기능을 구성합니다.  
- YAGNI 원칙(지금 당장 필요한 기능 외에는 구현하지 않음)을 철저히 지킵니다.
- 일관된 오류 처리 패턴을 유지하며, 사용자 관점에서의 명확한 피드백을 제공합니다.

### 4.3 배포 고려사항

- **FastAPI + React**를 하나의 Docker 컨테이너로 묶어 배포합니다.  
- Dockerfile로 간단하게 빌드 및 배포 구성  
- 환경 변수로 필수 설정값만 관리  
- 정적 파일은 nginx로 단순 서빙  
- 헬스 체크와 관련된 과도한 로깅은 지양(한 번만 선언)합니다.  
- 실제 환경에서는 구체적인 출처로 제한하며 이를 배포 테스트 시에도 같이 테스트 되어야 합니다.  
- **CORS 설정**: 아주 기본적이고 간단한 내용만 설정합니다.
- **보안 헤더**: 필수적인 기본 보안 헤더만 설정합니다.

### 4.4 사용자 경험 및 인터페이스 원칙

- **알림 최적화**
  - 오류 알림은 동일 컨텍스트에서 한 번만 표시합니다.
  - 알림은 간결하고 명확한 메시지와 함께 가능한 다음 단계를 안내합니다.
  - 알림은 적절한 시간 후 자동으로 사라지거나 사용자가 직접 닫을 수 있어야 합니다.

- **인터랙션 투명성**
  - 모든 데이터 처리 상태(로딩, 성공, 실패)는 시각적으로 명확히 표시됩니다.
  - 사용자 액션의 결과는 즉각적인 피드백으로 확인 가능해야 합니다.
  - 복잡한 처리 과정은 단계별로 진행 상황을 표시합니다.

- **일관된 인터페이스**
  - 동일한 기능은 항상 동일한 방식으로 구현하고 표현합니다.
  - 버튼, 폼, 테이블 등의 UI 요소는 일관된 스타일과 동작 방식을 유지합니다.
  - 사용자 여정의 모든 단계에서 일관된 경험을 제공합니다.

### 4.5 보안 설계 원칙

- **인증 및 권한 관리**
  - JWT 기반 토큰 인증을 사용하며, 리프레시 토큰은 httponly, secure 쿠키로 관리합니다.
  - 역할 기반 접근 제어(관리자/일반 사용자)를 통해 기능 접근을 제한합니다.
  - 인증 세션은 적절한 만료 시간을 설정하고 필요 시 갱신 메커니즘을 제공합니다.

- **데이터 보호**
  - 행 수준 락을 통해 동시 편집 시 데이터 무결성을 보호합니다.
  - 입력값 검증 및 살균 처리를 통해 악의적인 데이터 주입을 방지합니다.
  - 민감한 사용자 정보는 필요한 최소한으로만 저장합니다.

- **GAE 배포 시 보안 설정**
  - GAE의 기본 보안 기능(DDoS 방어, TLS/SSL)을 활용합니다.
  - 기본 보안 헤더는 미들웨어로 간단히 추가합니다:
    ```python
    @app.middleware("http")
    async def add_security_headers(request: Request, call_next):
        response = await call_next(request)
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
        return response
    ```

- **보안 수준 최적화**
  - 프로젝트 규모(동시 접속자 50명 미만, TPS 100 미만)에 맞는 적절한 보안 수준을 유지합니다.
  - 과도한 보안 조치보다는 실질적인 위험에 대응하는 실용적 접근을 채택합니다.
  - 요청 ID를 통한 로깅 및 감사 추적 기능을 유지합니다.

---

## 5. 유지보수 고려사항

### 5.1 코드 변경 원칙

- 요청된 기능만 수정·생성하고, 기존 구조는 최대한 유지합니다.  
- DB 모델 변경이 필요할 경우 사전 협의가 필수이며, 이미 구현된 로직을 존중합니다.

### 5.2 오류 처리 및 디버깅

- 모든 중요 오류는 시스템 로그에 기록하되, 과도한 로깅은 피합니다.
- 사용자에게 표시되는 오류 메시지는 문제 해결 방향을 제시해야 합니다.
- 개발 중 발견된 오류 패턴은 문서화하여 향후 유지보수에 활용합니다.

---

## 6. 기타

- 프로젝트는 Docker 환경에서 실행되며, 단일 컨테이너 내부 설정과 코드 일관성이 중요합니다.  
- 현재 OS는 Windows + PowerShell을 사용 중입니다.  
- `deploy` 폴더 내부 `.env.local` 파일 내용을 반드시 반영해 환경설정을 관리합니다.  
- 예상 데이터 규모:  
  - 동시 접속자 50명 미만, TPS(초당 트랜잭션 수) 100 미만, 데이터 활용 시간당 약 100MB 미만

---

## 7. 테스트 및 품질 관리

### 7.1 테스트 접근 방식

- **단일 컨테이너 통합 테스트**
  - 단위 테스트 대신 완성된 시스템에 대한 종합 테스트를 수행합니다.
  - Docker 컨테이너 내에서 실제 배포 환경과 동일한 조건으로 테스트합니다.
  - 모든 기능은 실제 사용자 시나리오를 기반으로 검증합니다.

- **오류 시나리오 테스트**
  - 다양한 오류 상황(네트워크 끊김, 서버 오류 등)에서의 시스템 동작을 검증합니다.
  - 사용자 관점에서 오류 복구 과정이 직관적인지 확인합니다.
  - 오류 메시지의 명확성과 복구 가이드의 유용성을 평가합니다.

### 7.2 디버깅 및 로깅

- **최소 필수 로깅**
  - 핵심 작업(인증, 중요 데이터 변경, 오류)에 대해서만 로깅을 수행합니다.
  - 로그 메시지는 문제 진단에 필요한 핵심 정보만 포함합니다.
  - 사용자 식별 정보와 요청 ID를 포함하여 문제 추적을 용이하게 합니다.

- **프론트엔드 디버깅**
  - 개발 환경에서는 상세한 콘솔 로그를 제공합니다.
  - 프로덕션 환경에서는 최소한의 오류 정보만 기록합니다.
  - 모든 API 요청과 응답을 추적하여 오류 발생 지점을 파악할 수 있게 합니다.

---

## 8. 추가 가이드

- **API 문서화**: 따로 문서화는 필요하지 않습니다.  
- **버전 관리**: 따로 버전 관리는 필요하지 않습니다.  
- **로깅 및 디버깅**:  
  - 백엔드는 콜백(요청)별 로그를 남겨 디버깅할 수 있도록 합니다.  
  - 프론트엔드는 요청 흐름을 적절히 관리해 어떤 요청이 어디에서 실패했는지 명확히 파악합니다.  
  - 무조건 모든 로직은 한 번만 시도하고, 자동 재시도 로직은 전부 필요하지 않습니다.  
- **웹 기반 서비스**: 웹 서비스에서만 작동하기 때문에 다른 기기의 UI나 동작 방식 고려는 필요하지 않습니다.
- **테스트**: 바로 배포 가능한 환경과 똑같이 테스트를 원합니다. 로컬 docker 단일 컨테이너 테스트를 기반으로 QA 테스트를 진행 중입니다. 불필요한 단위 테스트나 기타 테스트들은 필요 없습니다.
- **확장성 검토**: 예상 프로젝트 규모를 벗어나는 추가 확장성은 고려는 금지합니다.
- **url 생성 규칙**: 어떠한 url에도 /api/라는 내용은 절대 적지 마세요.
- **오류 관리**: 모든 오류는 사용자가 명확히 이해할 수 있는 메시지와 함께 한 번만 표시하고, 필요한 경우 새로고침 버튼을 제공합니다.
- **한국어 전용**: 모든 UI와 오류 메시지는 한국어로 제공됩니다.

---