
## 1. 프로젝트 개요

# 배경상황
- 전 풀스택 개발 + 데이터 엔지니어입니다. 
- 현재 혼자 개발하며 이 프로젝트는 바로 서비스 배포가 될 예정입니다.
- 처음 구축하는 단계여서 상세한 설명이 필요합니다.
- 사내 제공용 서비스 입니다
- 배송 실시간 관제 시스템 및 데이터 시각화 서비스 입니다.
- 주석과 디버깅용 콘솔 출력값들은 전부 한국어로 해주고, 코드 내용을 이해하기 쉽게 간략하게 해주세요
- 요청한 것만 수정 생성 하고, 추가적인 요청이 있을 때만 새로운 로직을 생성해주세요
- 기존 파일에 대한 수정, 생성, 삭제를 직접 제어해주세요 

## 2. 기술 스택 및 아키텍처

- **프론트엔드**:
  - React 만 사용합니다
  - 디자인: 깔끔하고 직관적, 사용자 친화적 UI/UX
  - 프론트에 대한 지식이 전무합니다 디테일하게 구축해주세요
  - 확장자는 .js 로만 구현합니다.
  - material-ui를 사용합니다.
  - jsdoc를 활용하여 타입 오류를 최소화 합니다.
  - webpack은 필요 없습니다. Create React App(CRA) 방식만을 채택합니다.

- **백엔드**:
  - FastAPI
  - **구조**:
    - **API 엔드포인트**: 요청/응답 처리 전담
    - **서비스 레이어**: 비즈니스 로직 처리
    - **레포지토리 레이어**: 데이터 접근 로직 처리
    - **모델/스키마**: 데이터베이스 모델과 API 요청/응답 스키마 분리를 정확히 하고 models는 데이터베이스 모델로 schemas는 api 요청/응답 스키마로 분리해주세요

- **데이터베이스 및 데이터 관리**:
  - MySQL (Cloud SQL) → **핫 데이터** (최근 1개월 데이터 유지)
    - 인덱스: `eta` 기준
  - BigQuery, GCS → **콜드 데이터** (핫 데이터 백업용 및 전체 데이터 유지지)
    - 비용 효율적 백업 및 대량 데이터 분석


- **배포 및 테스트 환경**:
  - **GAE (Google App Engine)**: 운영 배포 (단일 컨테이너 배포)
    - HTTPS, SSL/TLS 자동 관리
  - **Docker-desktop**: 로컬 테스트 (단일 컨테이너 구성, GAE와 동일)
  - **환경 변수 관리**:
    - 로컬: `.env.local`
    - 운영: `.env.production`

- **기타**:
  - jwt 토큰 방식을 통한 유저 관리
  - 민감 정보는 환경변수로 관리
  - CORS 설정 불필요 (프론트엔드와 백엔드 동일 도메인 서빙)
  - SEO 관련 내용은 필요하지 않습니다.
  - 새롭게 기능들을 개발할 때 최대한 모든 코드 내용을 토대로 만들어줘줘 
  - 테스트는 로컬 도커 데스크탑이나 로컬에서 테스트할 예정입니다.
  - 테스트는 무조건 스테이징 테스트 기준으로 진행하고고 gae 배포 환경과 똑같이 단일 컨테이너 배포 테스트가 기준입니다.
---

## 3. 엔드포인트 체계적 리스트

각 엔드포인트는 다음과 같이 역할과 기능에 따라 체계적으로 관리됩니다.

- **/auth**
  - **목적**: 사용자 로그인 및 인증 관리
  - **주요 기능**:
    - 사용자 로그인 (jwt 토큰 방식)
    - 토큰 테이블을 이용한 유저 인증 관리


- **/dashboard**
  - **목적**: 실시간 배송 관제 대시보드 제공
  - **주요 기능**:
    - 실시간 배송 상태 및 위치 정보 제공

- **/visualization**
  - **목적**: 데이터 시각화 서비스 제공
  - **주요 기능**:
    - 데이터 분석 결과 시각화 (차트, 그래프 등)
    - 대시보드와의 연동을 통한 통합 시각화 정보 제공

> **비고**: API는 요청/응답 처리만 담당하며, 각 엔드포인트에서 공통으로 서비스 및 레포지토리 레이어를 활용하여 비즈니스 로직과 데이터 접근 로직을 분리합니다.

---

## 4. 프로젝트 폴더 구조

프로젝트 폴더 구조 (추가 필요 사항이 있으면 허락을 구한 뒤 추가 해주세요), 
teckwah_project/
└── frontend/
│    ├── public/              # 정적 파일 디렉토리
│    ├── src/                 # React 소스 코드
│    │   ├── components/      # 재사용 가능한 UI 컴포넌트 (예: common, dashboard)
│    │   ├── pages/           # 페이지 단위 컴포넌트 (예: Auth, Dashboard, Visualization)
│    │   ├── services/        # API 호출 및 비즈니스 로직 서비스
│    │   ├── styles/          # 전역 스타일 파일 및 material-ui 커스터마이징
│    │   ├── utils/           # 공통 유틸리티 함수 및 헬퍼 모듈
│    │   ├── App.js           # 메인 App 컴포넌트 (라우터 포함)
│    │   ├── index.js         # 애플리케이션 진입점
│    │   └── routes.js        # 라우트 설정 파일 (React Router 사용)
│    ├── package.json         # npm 패키지 및 스크립트 설정
│
├── backend/
│   ├── app/                    # FastAPI 애플리케이션
│   │   ├── api/               # API 엔드포인트
│   │   ├── config/            # 설정 파일
│   │   ├── data/             # 초기 데이터 파일
│   │   ├── models/           # DB 모델
│   │   ├── repositories/     # 데이터 접근 로직
│   │   ├── schemas/          # API 스키마
│   │   ├── services/         # 비즈니스 로직
│   │   └── utils/            # 유틸리티 모듈
│   ├── static/                # 정적 파일 디렉토리
│   ├── main.py               # FastAPI 메인 앱
│   └── requirements.txt      # Python 패키지 의존성
│
└── deploy/
    └── local/                # 로컬 개발 환경 설정
        ├── Dockerfile        # FastAPI + MySQL 컨테이너
        ├── .env.local        # 로컬 환경 변수
        └── init-db.sql      # DB 초기화 스크립트


---

## 5. 개발, 구축, 테스트, 배포 가이드라인

### 5.1. 개발

- **코드 작성 원칙**:
  - 모듈화 및 관심사 분리 (API, 서비스, 레포지토리, 모델/스키마)
  - 주석 및 디버깅 메시지는 한국어로 작성
  - 요청된 기능만 수정/추가 → 기존 구조의 일관성 유지

- **개발 환경**:
  - Windows 환경, PowerShell 사용 (명령어 연결 시 `&&` 대신 `;` 사용)

- **API 설계**:
  - 엔드포인트: `/auth`, `/dashboard`, `/visualization`
  - 각 레이어별 독립 테스트 용이하도록 설계
  - API 접두사(/api) 사용하지 않음

### 5.2. 구축

- **인프라**:
  - 단일 컨테이너 환경 (GAE 배포와 동일)
  - Dockerfile 활용 → 로컬 (Docker-desktop) 및 GCP 환경에 맞게 빌드
  - 환경 변수 파일 관리 (`.env.local`, `.env.production`)
  - 내부 SQL 스크립트를 활용한 마이그레이션 관리:
    - deploy/gcp/init-db.sql 파일에 데이터베이스 초기화 스크립트(스키마, 테이블, 트리거 생성 등)를 포함
    - 컨테이너 시작 시 해당 SQL 스크립트를 자동으로 실행하여 최신 데이터베이스 스키마가 반영되도록 구성


- **데이터베이스**:
  - 로컬 MySQL: 도커 내에서 MySQL 컨테이너를 실행하여 사용
    - 호스트명: mysql (도커 네트워크 내에서 MySQL 컨테이너 이름으로 접근)
    - 포트: 3306
    - 데이터베이스명: delivery_system
    - 사용자명: root, 비밀번호: 1234
  - 쿼리 최적화 및 eta 컬럼에 인덱스 설정

### 5.3. 테스트 환경

- **테스트 환경**:
  - 로컬 Docker-desktop (단일 컨테이너 구성, GAE와 동일)
  - 데이터베이스 연결:
    - 로컬에서는 별도의 MySQL 컨테이너를 실행하여 사용
    - 백엔드 컨테이너는 동일 도커 네트워크 내에서 MySQL 컨테이너에 mysql 호스트명과 기본 포트 3306을 통해 연결
    - init-db.sql 파일을 통해 데이터베이스 초기화 진행
  - 스테이징 테스트 진행 → 실제 배포 환경과 동일한 조건으로 테스트
  - 로컬 Docker-desktop에서 실행 후, localhost를 통해 서비스 및 API 테스트 진행


### 5.4. 배포

- **배포 대상**:
  - GCP (Google App Engine) → 단일 컨테이너 배포
- **배포 프로세스**:
  - 로컬 테스트 → 스테이징 테스트 (단일 컨테이너 구성) → GAE 배포
  - 데이터베이스 연결:
    - 배포 시 MySQL은 로컬 컨테이너가 아닌 Cloud SQL과 연결하여 사용
    - Cloud SQL 연결 정보는 환경 변수 (.env.production)에 포함하여 관리하며, GAE에서 제공하는 연결 방식을 사용
- **보안 및 HTTPS**:
  - GAE의 HTTPS 및 SSL/TLS 자동 관리 활용
  - CORS 설정 불필요 (동일 도메인 서빙)
  - db의 토큰 테이블을 이용한 유저 인증 관리
# 6. 추가 지침 (변동성 있음)
- ** 추가 지침 ** 
  - 프론트엔드 폴더 구조는 프론트엔드 폴더 구조를 토대로 정확히 참고하여 구축하세요.
  - 백엔드 폴더 구조는 백엔드 폴더 구조를 토대로 정확히 참고하여 구축하세요.
  - 프론트와 백엔드는 동일 도메인으로 서빙합니다 또한 서로의 호출 관계성을 정확히 파악하세요
  - 현재 bigquery, gcs 관련 로직도 아직 필요 없어
  - 통계 관련 기능 구축은 현재 필요하지 않습니다.
  - 캐싱 관련 기능 구축은 현재 필요하지 않습니다.
  - 절대 절대 절대 절대로 DB 구조를 함부로 바꾸면 안돼 model은 DB 기반으로 구축되는거니까 수정 시 허락을 구해
  - 문서화 관련 기능은 필요 없습니다.
  


  ** 이 룰 프롬프트를 꼭 준수하세요 **

