이제 각 파일과 폴더의 내용을 살펴보겠습니다. 먼저 HTML 파일들을 확인하여 사용자 인터페이스 디자인과 구조를 파악하겠습니다:

이제 js 파일을 확인하여 주요 동작을 파악해보겠습니다:

이제 테스트 디렉토리의 시각화 관련 JS 파일을 확인해보겠습니다:

이 내용을 바탕으로 마이그레이션 프롬프트를 작성하겠습니다. </thinking>

Python FastAPI에서 Node.js Express로의 마이그레이션 상세 작업 지침서

1. 마이그레이션 개요 및 배경

1.1 목적

Teckwah-dashboard 프로젝트를 Python FastAPI에서 Node.js Express로 마이그레이션하여 성능 최적화 및 확장성을 개선합니다. 기존의 핵심 기능을 유지하면서 제안된 인수인계 기능을 추가합니다.

1.2 접근 방식

단순성 우선: 루트 명세서에 따라 과도한 추상화 없이 필요한 기능만 구현

행 단위 락, 권한 관리: 기존 복잡한 비즈니스 로직 보존

디자인 참고: C:\MyMain\teckwah-dashboard\test 디렉토리의 프로토타입 UI 참고

기능 개선: 인수인계 기능 통합

2. 핵심 기능 구현 요소

2.1 행 단위 락(Row-Level Locking) 메커니즘

기존 코드 위치: server/utils/lock-manager.py

마이그레이션 대상 위치: node-teckwah/server/utils/lock-manager.js

핵심 로직:

Sequelize의 트랜잭션과 SELECT ... FOR UPDATE 문 활용

락 획득 시 재시도 로직(최대 2회) 구현

락 충돌 시 사용자 친화적 메시지 제공

행 수준 락을 통한 데이터 무결성 보장

수정 중인 레코드에 대한 UI 표시 기능(마지막 업데이트 사용자, 시간)

2.2 권한 관리 시스템

기존 코드 위치: server/api/deps.py, server/utils/auth.py

마이그레이션 대상 위치: node-teckwah/server/middlewares/auth.middleware.js

핵심 로직:

ADMIN과 USER 역할 기반 접근 제어

JWT 토큰 기반 인증(액세스 + 리프레시 토큰)

리프레시 토큰은 httpOnly 쿠키로 관리

API 엔드포인트별 권한 검사 미들웨어 적용

관리자 전용 기능(사용자 관리, 대시보드 삭제 등) 보호

2.3 인수인계 기능

참고 디렉토리: C:\MyMain\teckwah-dashboard\test\handover.html, handover_data.json

구현 위치:

모델: node-teckwah/server/models/handover.model.js

라우터: node-teckwah/server/routes/handover.routes.js

핵심 기능:

인수인계 목록 조회 및 페이지네이션

인수인계 CRUD 기능(생성, 조회, 수정, 삭제)

공지사항/일반 인수인계 구분

작성자 기준 수정/삭제 권한 설정

목록/상세 보기 UI

2.4 시각화 및 대시보드

참고 디렉토리: C:\MyMain\teckwah-dashboard\test\visualization.html

구현 위치:

라우터: node-teckwah/server/routes/dashboard.routes.js (시각화 API)

핵심 기능:

시간대별 주문 접수 시각화

부서별 배송 상태 분포 시각화

필터링 기능(날짜 범위, 부서 등)

차트 데이터 포맷팅 및 계산 로직 구현

3. 데이터베이스 설계

3.1 인수인계 테이블

CREATE TABLE IF NOT EXISTS handover (
  handover_id VARCHAR(10) PRIMARY KEY,          -- 인수인계 ID (예: H001)
  title VARCHAR(255) NOT NULL,                  -- 제목
  content TEXT NOT NULL,                        -- 내용
  created_by VARCHAR(50) NOT NULL,              -- 작성자 ID
  created_at DATETIME NOT NULL,                 -- 작성 시각
  updated_at DATETIME NOT NULL                  -- 수정 시각
    DEFAULT CURRENT_TIMESTAMP 
    ON UPDATE CURRENT_TIMESTAMP,
  is_notice BOOLEAN DEFAULT FALSE,              -- 공지사항 여부
  
  FOREIGN KEY (created_by) REFERENCES user(user_id) ON DELETE CASCADE,
  INDEX idx_handover_date (created_at),
  INDEX idx_handover_notice (is_notice)
);


3.2 ORM 마이그레이션

기존: SQLAlchemy Models → 새 구현: Sequelize Models

참고 파일:

server/models/dashboard_model.py → node-teckwah/server/models/dashboard.model.js

server/models/user_model.py → node-teckwah/server/models/user.model.js

4. 폴더 구조 및 파일 구성

4.1 권장 폴더 구조

node-teckwah/
├── server/                # 백엔드 코드
│   ├── config/            # 설정 관련 코드
│   ├── models/            # Sequelize 모델
│   ├── routes/            # API 라우트
│   ├── utils/             # 유틸리티 함수들
│   └── middlewares/       # 미들웨어
│
├── client/                # 프론트엔드 코드(필요시)
│
├── deploy/                # 배포 관련 파일
│   ├── .env.local         # 환경 변수
│   ├── Dockerfile         # Docker 설정
│   └── init-db.sql        # DB 초기화 스크립트
│
└── server.js              # 서버 진입점


4.2 참고할 코드 위치

행 수준 락: server/utils/lock-manager.py → 세밀한 동시성 제어 로직

인증 및 권한: server/api/deps.py, server/api/auth_router.py

상태 전이 규칙: server/utils/constants.py의 STATUS_TRANSITIONS

API 라우터: server/api/dashboard_router.py, server/api/handover_router.py

UI 디자인: test/dashboard.html, test/handover.html, test/visualization.html

샘플 데이터: test/handover_data.json, test/dashboard_data.json

5. 주요 API 구현 가이드

5.1 인수인계 API

GET /handover/list - 인수인계/공지사항 목록 조회

쿼리 파라미터: type (notice/normal), page, size

응답: 페이지네이션된 인수인계 목록

GET /handover/:id - 인수인계 상세 조회

파라미터: id (인수인계 ID)

응답: 상세 내용 포함 인수인계 정보

POST /handover - 인수인계 생성

바디: title, content, is_notice

권한: 로그인한 사용자

PUT /handover/:id - 인수인계 수정

권한: 작성자 또는 관리자

바디: title, content, is_notice

DELETE /handover/:id - 인수인계 삭제

권한: 작성자 또는 관리자

5.2 시각화 API

GET /dashboard/visualization - 시각화 데이터 조회

쿼리 파라미터: chart_type (time/status/department), start_date, end_date, department

응답: 차트 데이터 (시간대별, 상태별, 부서별)

6. 행 단위 락 구현 가이드

6.1 Sequelize 트랜잭션 및 락 활용

// 핵심 구현 로직 (코드 삭제)
async function findWithRowLock(model, id, userId) {
  // Sequelize 트랜잭션 시작
  const transaction = await sequelize.transaction();
  
  try {
    // SELECT FOR UPDATE 락 획득
    const result = await model.findByPk(id, {
      transaction,
      lock: Sequelize.Transaction.LOCK.UPDATE,
    });
    
    if (!result) {
      await transaction.rollback();
      throw new NotFoundException(id);
    }
    
    // 행 락 획득 성공, UI 락 정보 업데이트
    result.updated_by = userId;
    result.update_at = new Date();
    await result.save({ transaction });
    
    // 트랜잭션 커밋
    await transaction.commit();
    return result;
  } catch (error) {
    // 롤백 및 에러 처리
    await transaction.rollback();
    
    // 락 충돌 감지
    if (error.name === 'SequelizeDatabaseError' && 
        error.message.includes('could not obtain lock')) {
      throw new LockConflictException('다른 사용자가 현재 이 데이터를 수정 중입니다');
    }
    
    throw error;
  }
}


6.2 재시도 로직 구현

락 충돌 시 설정된 횟수(2회)만큼 재시도

일정 시간(500ms) 간격으로 시도

모든 재시도 실패 시 사용자 친화적 오류 메시지 제공

7. 인증 및 권한 구현 가이드

7.1 JWT 인증 미들웨어

// 코드 예시 삭제
// 주요 구현 포인트:
// 1. 헤더에서 Authorization 토큰 추출
// 2. 토큰 검증 및 사용자 정보 추출
// 3. 예외 처리 및 표준화된 오류 응답


7.2 관리자 권한 확인 미들웨어

// 코드 예시 삭제
// 주요 구현 포인트:
// 1. 사용자 역할(role) 확인
// 2. ADMIN 권한 확인
// 3. 권한 없을 경우 403 Forbidden 응답


8. 구현 시 주의사항

8.1 참고만 해야 할 사항

UI 디자인: test 폴더의 HTML 파일들은 방향성만 참고, 직접 복사하지 않음

기능 동작: 샘플 JS 코드를 그대로 따르지 말고 컨셉만 적용

디자인 요소: 색상, 레이아웃, 작동 방식 등 디자인 요소만 참고

8.2 유지해야 할 사항

행 단위 락 메커니즘: 기존 구현과 동일한 보호 기능 제공

권한 기반 접근 제어: 관리자/일반 사용자 권한 구분

상태 전이 규칙: 배송 상태 변경 시 유효한 전이만 허용

표준화된 응답 형식: 일관된 API 응답 구조 유지

8.3 개선할 사항

미들웨어 단순화: 불필요한 로깅 미들웨어 제거 고려

통합 설정 파일: deploy/.env.local에 모든 환경 설정 통합

단일 진입점: server.js에서 모든 초기화 로직 통합

9. 테스트 데이터 및 환경

9.1 테스트 데이터

인수인계 테스트 데이터: test/handover_data.json 참고

대시보드 테스트 데이터: test/dashboard_data.json 참고

9.2 DB 연결 설정

기존 FastAPI 설정을 Node.js 환경에 맞게 변환

deploy/.env.local에서 동일한 DB 연결 정보 사용

10. 최종 결과물 확인 사항

행 단위 락 정상 작동 확인

동시 편집 시 충돌 방지 기능

사용자 친화적 오류 메시지

권한별 기능 제한 확인

관리자 전용 기능 보호

사용자별 접근 권한 제한

인수인계 기능 정상 작동

목록/상세/생성/수정/삭제 기능

공지사항 모드 지원

시각화 기능 정상 작동

시간대별, 부서별 차트 데이터

필터링 기능 동작

이 마이그레이션 지침은 루트 명세서에 따라 "단순성 우선"과 "YAGNI" 원칙을 적용하되, 기존의 중요한 보안 및 데이터 무결성 메커니즘을 보존하는 방향으로 작성되었습니다. test 디렉토리의 프로토타입을 디자인 참고용으로만 활용하고, 기존 Python 코드의 비즈니스 로직은 정확히 마이그레이션하는 접근을 취합니다.