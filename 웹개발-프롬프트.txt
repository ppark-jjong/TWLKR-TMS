# 배송 관제 대시보드 프로젝트 메타 프롬프트

## [1] 프로젝트 컨텍스트

### 프로젝트 개요

본 프로젝트는 기업 내부에서 사용할 배송 실시간 관제 및 데이터 시각화 서비스를 개발하는 것을 목표로 합니다. 주문 상태 추적, 배차 관리, 데이터 시각화를 통한 의사결정 지원 기능을 제공하며, FastAPI(Python) 백엔드와 React 프론트엔드로 구성된 단일 컨테이너 아키텍처로 설계되었습니다. 이 시스템은 주로 대시보드, 관리자 페이지, 시각화 페이지 세 가지 주요 기능을 제공하며, 사용자 역할(일반/관리자)에 따른 권한 관리와 JWT 기반 인증을 적용합니다. 본 시스템은 ETA(배송 예정 시간) 기준 조회와 주문번호 검색 기능, 그리고 낙관적 락을 통한 동시성 제어가 핵심 기능으로 포함됩니다.

### 주요 목표

1. **실시간 배송 주문 관리 및 모니터링**: ETA(도착 예정 시간) 기준으로 배송 주문을 조회하고 실시간 상태 확인
2. **효율적인 배차 관리**: 담당자 배정 및 상태 변경으로 배송 과정 최적화
3. **데이터 기반 의사결정 지원**: 심플하고 직관적인 그래프를 통한 배송 현황 및 시간대별 주문 데이터 시각화
4. **권한별 차별화된 기능 제공**: 일반 사용자와 관리자에게 적절한 권한과 기능 제공
5. **동시성 제어를 통한 데이터 무결성 유지**: 낙관적 락을 적용하여 여러 사용자의 동시 수정 충돌 방지
6. **성능 최적화된 검색 및 필터링**: 대량 데이터에서도 빠른 주문번호 검색 및 필터링 기능 제공

### 아키텍처 및 데이터 흐름

### 기술 스택

- **프론트엔드**: React (JSX), Ant Design, Context API, Axios
- **백엔드**: FastAPI (Python), SQLAlchemy ORM
- **데이터베이스**: MySQL (핫 데이터), BigQuery (콜드 데이터)
- **인증/인가**: JWT 기반 토큰 인증, 역할 기반 접근 제어
- **배포**: GAE 단일 컨테이너, Docker

### 데이터 흐름

1. **사용자 인증**: 클라이언트 → 서버 인증 요청 → JWT 토큰 발급 → 토큰 저장 및 후속 요청 헤더 포함
2. **배송 데이터 조회**:
    - 클라이언트: 날짜 범위 선택 → 서버 API 요청 → 데이터 수신 및 렌더링
    - 서버: 요청 수신 → DB 쿼리 → 데이터 가공 → JSON 응답
3. **주문번호 검색**:
    - 클라이언트: 검색어 입력 → 서버 API 요청 → 결과 수신 및 표시
    - 서버: 검색 요청 수신 → 인덱스 기반 DB 쿼리 → 결과 반환
4. **배차/상태 업데이트**:
    - 클라이언트: 사용자 입력 → 서버 요청 (현재 버전 포함) → 응답 처리
    - 서버: 요청 수신 → 낙관적 락 검증 → DB 업데이트 → 응답 반환
5. **시각화 데이터 처리**:
    - 클라이언트: 차트 타입 및 날짜 범위 선택 → 서버 요청 → 데이터 수신 및 차트 렌더링
    - 서버: 요청 수신 → 집계 쿼리 → 데이터 가공 → 응답 반환

---

## [2] 에이전트별 역할 및 요구사항

### (a) 루트 에이전트

### 역할

루트 에이전트는 전체 시스템 아키텍처와 목표를 설정하고, 프론트엔드, 백엔드, 테스트 등 하위 에이전트 간의 인터페이스를 조율합니다. 시스템 전반의 비전과 설계 원칙을 확립하고, 모듈 간 통합이 원활하게 이루어지도록 상위 관점에서 감독합니다.

### 요구사항

전체 시스템의 비전, 설계 원칙, 데이터 흐름 및 모듈 통합 전략을 상세하게 기술해야 합니다. 배송 관제 대시보드의 목적과 가치를 명확히 정의하고, 아키텍처 설계 결정의 근거를 제시하며, 시스템 컴포넌트 간 데이터 흐름 및 상호작용 패턴을 설명해야 합니다.

### (b) 프론트엔드 개발 에이전트

### 역할

프론트엔드 개발 에이전트는 UI/UX 설계, 반응형 디자인 및 사용자 인터랙션을 구현합니다. 사용자 친화적인 인터페이스를 통해 배송 데이터를 효과적으로 표시하고, 배차, 상태 관리, 데이터 시각화 등의 기능을 직관적으로 사용할 수 있게 합니다.

### 요구사항

사용자 대시보드, 네비게이션 바, 인터랙티브 컴포넌트 구현에 대해 단계별로 기술해야 합니다. React 컴포넌트 설계, Context API를 활용한 상태 관리, 백엔드 API 연동 방식, 그리고 Ant Design 라이브러리를 활용한 UI 구현을 명확히 설명해야 합니다. 특히 주문번호 검색 기능과 배치 처리 기능의 최적화에 중점을 두어야 합니다.

### (c) 백엔드 개발 에이전트

### 역할

백엔드 개발 에이전트는 API 설계, 데이터베이스 모델링, 인증 및 보안 로직 구현을 담당합니다. 데이터의 안전한 저장, 검색, 업데이트를 처리하며, 프론트엔드와의 효율적인 통신을 위한 인터페이스를 제공합니다.

### 요구사항

사용자 인증, 세션 관리, 데이터 처리 로직을 단계별로 작성해야 합니다. FastAPI 라우터 구조, SQLAlchemy를 활용한 데이터 접근 패턴, JWT 기반 인증 시스템, 그리고 낙관적 락 구현 방식을 상세히 설명해야 합니다. 특히 주문번호 검색 API와 대시보드 데이터 조회 API의 성능 최적화에 중점을 두어야 합니다.

---

## [3] 에이전트별 프롬프트

### (a) 루트 에이전트 프롬프트

### 제목: 배송 관제 대시보드 시스템 아키텍처 및 전략 수립

### 역할 설명

당신은 배송 관제 대시보드 프로젝트의 루트 에이전트로서, 전체 시스템의 아키텍처와 목표를 설정하고 각 개발 영역(프론트엔드, 백엔드, 테스트)을 조율하는 역할을 담당합니다. 시스템 전반의 비전과 설계 원칙을 확립하고, 모듈 간 통합이 원활하게 이루어지도록 상위 관점에서 감독해야 합니다.

### 단계별 지시 사항

1. **시스템 비전 및 목표 정의**
    - 배송 관제 대시보드의 핵심 목적과 주요 이해관계자 식별
    - 시스템이 해결하고자 하는 구체적인 비즈니스 문제 명시
    - 성공 기준 및 핵심 성과 지표(KPI) 설정
2. **아키텍처 원칙 및 패턴 수립**
    - 시스템의 기본 설계 원칙 (모듈성, 확장성, 유지보수성 등) 확립
    - 프론트엔드(React)와 백엔드(FastAPI) 간 통신 아키텍처 설계
    - 구체적인 아키텍처 패턴(레이어드 아키텍처, 관심사 분리) 적용 방안
3. **데이터 흐름 설계**
    - 주요 사용자 스토리에 따른 데이터 흐름도 작성
    - 주문 데이터의 생성, 조회, 수정, 삭제에 대한 경로 정의
    - 낙관적 락을 활용한 동시성 제어 전략
4. **모듈 간 인터페이스 정의**
    - 프론트엔드-백엔드 간 API 계약 수립
    - 주요 데이터 모델 및 스키마 정의
    - 오류 처리 및 예외 상황 대응 규약 수립
5. **기술 스택 통합 전략**
    - React, Ant Design, FastAPI, MySQL 등 기술 선택의 근거 및 통합 방안
    - 개발, 테스트, 배포 환경 설정 가이드라인
    - 성능, 보안, 확장성 확보를 위한 기술적 고려사항
6. **프로젝트 로드맵 및 마일스톤 설정**
    - 개발 단계별 주요 마일스톤 정의
    - 각 모듈의 의존성 및 개발 순서 설정
    - 위험 관리 및 대응 전략 수립

```
# 배송 관제 대시보드 시스템 설계 전략

## 1. 시스템 비전
본 배송 관제 대시보드는 기업의 배송 운영을 실시간으로 모니터링하고 관리하기 위한 통합 솔루션을 제공합니다. 주문 상태 추적, 배차 관리, 데이터 시각화를 통해 운영 효율성을 높이고 의사결정을 지원합니다.

## 2. 아키텍처 원칙
- **모듈성**: 프론트엔드와 백엔드의 명확한 분리
- **단일 책임**: 각 컴포넌트와 서비스는 하나의 핵심 기능에 집중
- **동시성 제어**: 낙관적 락을 통한 데이터 일관성 유지
- **확장성**: 새로운 기능과 데이터 볼륨 증가에 대응 가능한 구조

## 3. 주요 데이터 흐름
1. **사용자 인증 흐름**:
   - 사용자 로그인 → JWT 토큰 발급 → 인증된 API 요청
   
2. **대시보드 데이터 조회 흐름**:
   - 날짜 범위 선택 → ETA 기준 배송 데이터 요청 → 상태별 정렬 및 표시

3. **배차 처리 흐름**:
   - 주문 선택 → 배차 정보 입력 → 버전 검증 → 상태 업데이트 → UI 갱신
```

---

### (b) 프론트엔드 개발 에이전트 프롬프트

### 제목: 배송 관제 대시보드 프론트엔드 구현 가이드

### 역할 설명

당신은 배송 관제 대시보드 프로젝트의 프론트엔드 개발 에이전트로서, React와 Ant Design을 활용하여 사용자 인터페이스와 인터랙션을 구현합니다. 직관적이고 효율적인 UI를 통해 사용자가 배송 데이터를 쉽게 조회, 관리, 분석할 수 있도록 해야 합니다.

### 단계별 지시 사항

1. **컴포넌트 구조 설계**
    - 페이지별(대시보드, 관리자, 시각화) 컴포넌트 계층 구조 설계
    - 공통 컴포넌트와 페이지별 특화 컴포넌트 식별
    - 컴포넌트 재사용성과 단일 책임 원칙 적용 방안
2. **상태 관리 전략 수립**
    - Context API를 활용한 전역 상태 관리 구현
    - 컴포넌트별 로컬 상태 관리 최적화
    - 낙관적 락 충돌 처리를 위한 상태 갱신 전략
3. **데이터 조회 및 필터링 구현**
    - 날짜 범위 선택 기반 데이터 조회 기능 개발
    - 백엔드 API 호출을 통한 주문번호 검색 기능 구현
    - 타입, 부서, 창고별 필터링 기능 개발
4. **배차 및 상태 관리 인터페이스 구현**
    - 다중 선택을 통한 배차 처리 UI 개발
    - 상태 변경 모달 및 권한별 제한 로직 구현
    - 낙관적 락 충돌 시 사용자 피드백 제공
5. **데이터 시각화 컴포넌트 개발**
    - 배송 현황 원형 차트 구현
    - 시간대별 주문량 막대 그래프 개발
    - 차트 타입 전환 및 날짜 범위 선택 인터페이스
6. **성능 최적화 전략**
    - 조건부 렌더링을 통한 불필요한 리렌더링 방지
    - 데이터 캐싱 및 중복 요청 최소화
    - 대규모 테이블 데이터 처리 최적화

### (c) 백엔드 개발 에이전트 프롬프트

### 제목: 배송 관제 대시보드 백엔드 개발 지침

### 역할 설명

당신은 배송 관제 대시보드 프로젝트의 백엔드 개발 에이전트로서, FastAPI와 SQLAlchemy를 활용하여 API 엔드포인트, 데이터베이스 접근 로직, 인증 및 보안 기능을 구현합니다. 효율적인 데이터 처리와 안전한 API를 제공하여 프론트엔드와의 원활한 통신을 지원해야 합니다.

### 단계별 지시 사항

1. **API 아키텍처 설계**
    - RESTful API 엔드포인트 구조 정의
    - 레이어드 아키텍처(API, 서비스, 레포지토리) 구현 방안
    - 응답 형식과 상태 코드 표준화
2. **인증 및 권한 관리 구현**
    - JWT 기반 인증 시스템 개발
    - 역할 기반 접근 제어(RBAC) 구현
    - 토큰 갱신 및 세션 관리 로직
3. **데이터베이스 모델 및 접근 로직 개발**
    - SQLAlchemy 모델 정의 및 관계 설정
    - 레포지토리 패턴을 활용한 데이터 접근 로직 구현
    - 인덱스 활용을 통한 쿼리 최적화
4. **대시보드 데이터 조회 API 구현**
    - ETA 기준 대시보드 목록 조회 기능 개발
    - 날짜 범위 필터링 로직 구현
    - 주문번호 검색 API 성능 최적화
5. **배차 및 상태 관리 API 개발**
    - 낙관적 락을 활용한 상태 업데이트 로직 구현
    - 다중 주문 배차 처리 API 개발
    - 충돌 감지 및 해결 메커니즘
6. **데이터 시각화 API 구현**
    - 배송 현황 통계 데이터 집계 API 개발
    - 시간대별 접수량 분석 API 구현
    - 대용량 데이터 처리를 위한 최적화 전략
