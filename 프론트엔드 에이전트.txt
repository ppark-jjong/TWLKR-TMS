

목차
-------------------------------------------------------------
1. 시스템 개요
2. 페이지별 기능 및 UX 구현
   2.1. 로그인 페이지 (LoginPage.js)
   2.2. 대시보드 페이지 (DashboardPage.js)
   2.3. 시각화 페이지 (VisualizationPage.js)
3. 컴포넌트 세부 명세
   3.1. 대시보드 관련 컴포넌트
   3.2. 시각화 관련 컴포넌트
   3.3. 공통 컴포넌트
4. 상태 관리 및 데이터 흐름
   4.1. Context API 활용
   4.2. 서비스 레이어 구조
5. API 연동 명세
   5.1. 인증 관련 API
   5.2. 대시보드 관련 API
   5.3. 시각화 관련 API
6. 오류 처리 및 예외 상황
   6.1. 일반 오류 처리
   6.2. 낙관적 락 충돌 처리
7. 권한별 UI/UX 차별화
   7.1. 일반 사용자 UI/UX
   7.2. 관리자 UI/UX

=============================================================
1. 시스템 개요
=============================================================

배송 실시간 관제 시스템은 기업 내부에서 사용하는 배송/반품 주문을 효율적으로 관리하기 위한 웹 애플리케이션입니다. 주요 기능으로 실시간 배송 주문 관리, 배차 처리, 데이터 시각화가 있으며, 권한에 따라 차별화된 기능을 제공합니다.

- 기술 스택: React 18, Ant Design 5, Context API, Axios
- 사용자 권한: 일반 사용자(USER), 관리자(ADMIN)
- 주요 기능: 배송 주문 관리, 배차 처리, 데이터 시각화, 동시성 제어(낙관적 락)

=============================================================
2. 페이지별 기능 및 UX 구현
=============================================================

2.1. 로그인 페이지 (LoginPage.js)
-------------------------------------------------------------

2.1.1. 기능 개요
- 사용자 ID와 비밀번호를 입력받아 인증 처리
- 권한에 따른 페이지 리디렉션 (일반 사용자: /dashboard, 관리자: /admin)
- 세션 상태 유지 및 관리

2.1.2. UX 시나리오
- 초기 진입: 로그인 폼 표시 (반응형 카드 UI)
- 입력 검증: 실시간 유효성 검증 (필수 입력, 최소 길이 등)
- 로그인 시도: 버튼 클릭 시 로딩 상태 표시
- 성공 시: 알림 메시지 표시 후 적절한 페이지로 리디렉션
- 실패 시: 오류 메시지 표시 및 폼 유지

2.1.3. API 연동
- 요청: POST /auth/login
  ```javascript
  {
    "user_id": "사용자ID",
    "password": "비밀번호"
  }

응답: 토큰 및 사용자 정보
javascript{
  "success": true,
  "token": {
    "access_token": "JWT_토큰",
    "refresh_token": "리프레시_토큰"
  },
  "user": {
    "user_id": "사용자ID",
    "user_role": "USER 또는 ADMIN",
    "user_department": "CS, HES, LENOVO 등"
  }
}


2.2. 대시보드 페이지 (DashboardPage.js)
2.2.1. 기능 개요

ETA 기준 배송 주문 목록 조회 및 필터링
신규 주문 등록, 배차 처리, 상세 정보 조회
상태 변경, 메모 관리, 주문 삭제(관리자)
낙관적 락을 통한 동시성 제어

2.2.2. UX 시나리오

초기 로드: 기본 30일 범위의 주문 데이터 자동 조회
날짜 범위 선택: DateRangePicker를 통해 조회 기간 변경
필터링/검색: 타입, 부서, 허브, 주문번호 등 다양한 조건으로 필터링
신규 등록: "신규 등록" 버튼 클릭 시 모달 표시
배차 처리: 체크박스로 주문 선택 후 "배차" 버튼 클릭
상세 조회: 행 클릭 시 상세 정보 모달 표시
상태 변경: 상세 정보 모달에서 상태 변경 버튼 클릭
삭제(관리자): 체크박스로 주문 선택 후 "삭제" 버튼 클릭

2.2.3. API 연동

주문 목록 조회: GET /dashboard/list

파라미터: start_date, end_date
응답:
javascript{
  "success": true,
  "data": {
    "items": [
      {
        "dashboard_id": 1,
        "type": "DELIVERY",
        "order_no": "12345678",
        "department": "CS",
        "warehouse": "SEOUL",
        "status": "WAITING",
        "eta": "2025-03-20T14:30:00",
        "create_time": "2025-03-16T10:00:00",
        "depart_time": null,
        "complete_time": null,
        "driver_name": null,
        "driver_contact": null,
        "customer": "홍길동",
        "contact": "010-1234-5678",
        "address": "서울시 강남구...",
        "postal_code": "12345",
        "remark": "특이사항 없음",
        "sla": "당일",
        "version": 1
      },
      // ...더 많은 항목
    ],
    "date_range": {
      "oldest_date": "2025-01-01",
      "latest_date": "2025-03-16"
    }
  }
}



주문 생성: POST /dashboard

요청 본문: 주문 정보 (type, order_no, warehouse, sla, eta, postal_code, address, customer, contact, remark 등)
응답: 생성된 주문 정보


배차 처리: POST /dashboard/assign

요청 본문:
javascript{
  "dashboard_ids": [1, 2, 3],
  "driver_name": "김배송",
  "driver_contact": "010-9876-5432"
}

응답: 업데이트된 주문 목록


주문 상세: GET /dashboard/{dashboard_id}

응답: 주문 상세 정보


상태 변경: PATCH /dashboard/{dashboard_id}/status

요청 본문:
javascript{
  "status": "IN_PROGRESS",
  "is_admin": false
}

응답: 업데이트된 주문 정보


필드 수정: PATCH /dashboard/{dashboard_id}/fields

요청 본문: 수정할 필드 정보 (eta, customer, contact, address, postal_code, remark 등)
응답: 업데이트된 주문 정보


주문 삭제(관리자): DELETE /dashboard

요청 본문: 삭제할 ID 배열
javascript[1, 2, 3]

응답: 삭제 결과
javascript{
  "success": true,
  "deleted_count": 3
}




2.3. 시각화 페이지 (VisualizationPage.js)
2.3.1. 기능 개요

배송 현황 데이터 시각화 (파이 차트)
시간대별 주문 접수량 분석 (막대 그래프)
날짜 범위 기반 통계 데이터 조회

2.3.2. UX 시나리오

초기 로드: 기본 7일 범위의 통계 데이터 자동 조회
차트 타입 선택: "배송 현황"/"시간대별 접수량" 선택 시 해당 차트 표시
날짜 범위 변경: 새 날짜 범위 선택 시 데이터 재조회 및 차트 업데이트
데이터 없음 처리: 데이터가 없는 경우 빈 상태 메시지 표시
로딩 상태: 데이터 조회 중 로딩 인디케이터 표시

2.3.3. API 연동

배송 현황 조회: GET /visualization/delivery_status

파라미터: start_date, end_date
응답:
javascript{
  "success": true,
  "data": {
    "type": "delivery_status",
    "total_count": 150,
    "department_breakdown": {
      "CS": {
        "total": 60,
        "status_breakdown": [
          { "status": "WAITING", "count": 20, "percentage": 33.3 },
          { "status": "IN_PROGRESS", "count": 15, "percentage": 25.0 },
          // ...더 많은 상태
        ]
      },
      "HES": {
        // 비슷한 구조
      },
      "LENOVO": {
        // 비슷한 구조
      }
    }
  }
}



시간대별 접수량 조회: GET /visualization/hourly_orders

파라미터: start_date, end_date
응답:
javascript{
  "success": true,
  "data": {
    "type": "hourly_orders",
    "total_count": 150,
    "average_count": 21.4,
    "department_breakdown": {
      "CS": {
        "total": 60,
        "hourly_counts": {
          "09-10": 5,
          "10-11": 8,
          // ...더 많은 시간대
          "야간(19-09)": 12
        }
      },
      "HES": {
        // 비슷한 구조
      },
      "LENOVO": {
        // 비슷한 구조
      }
    },
    "time_slots": [
      { "label": "09-10", "start": 9, "end": 10 },
      // ...더 많은 시간대
      { "label": "야간(19-09)", "start": 19, "end": 9 }
    ]
  }
}



조회 가능 날짜 범위: GET /visualization/date_range

응답:
javascript{
  "success": true,
  "date_range": {
    "oldest_date": "2025-01-01",
    "latest_date": "2025-03-16"
  }
}




=============================================================
3. 컴포넌트 세부 명세
3.1. 대시보드 관련 컴포넌트
3.1.1. DashboardTable.js

목적: 배송 주문 목록을 테이블 형태로 표시
주요 기능:

데이터 소스 렌더링 및 페이지네이션
필터링 및 검색 (타입, 부서, 허브, 주문번호)
상태별 색상 코딩 (대기: 파란색, 진행: 주황색, 완료: 녹색, 이슈: 빨간색, 취소: 회색)
행 선택 및 클릭 이벤트 처리
관리자/일반 사용자 구분에 따른 선택 제한



3.1.2. CreateDashboardModal.js

목적: 신규 주문 등록 폼 제공
주요 기능:

다양한 주문 정보 입력 필드 (타입, 주문번호, 출발 허브, SLA, ETA, 우편번호, 주소, 수령인, 연락처, 메모)
입력 값 유효성 검증 (필수 입력, 형식 검사)
폼 제출 시 API 호출 및 결과 처리
특수 입력 포맷팅 (전화번호 xxx-xxxx-xxxx 형식)



3.1.3. AssignDriverModal.js

목적: 선택한 주문에 배송 담당자 배정
주요 기능:

배송 담당자 이름 및 연락처 입력
선택된 주문 목록 표시
배차 처리 API 호출 및 결과 처리
락 충돌 처리 (423 Locked)



3.1.4. DashboardDetailModal.js

목적: 주문 상세 정보 조회 및 수정
주요 기능:

주문 정보 상세 표시 (섹션별 구분)
상태 변경 기능 (권한별 제약 적용)
필드 수정 기능 (편집 모드 전환)
메모 관리 기능
낙관적 락 충돌 처리 (409 Conflict)



3.1.5. StatusChangeConfirm.js

목적: 상태 변경 전 확인 대화상자 제공
주요 기능:

현재 상태와 변경할 상태 표시
관리자 모드 표시 (관리자인 경우)
확인/취소 버튼으로 상태 변경 승인



3.2. 시각화 관련 컴포넌트
3.2.1. StatusPieChart.js

목적: 상태별 배송 현황을 파이 차트로 시각화
주요 기능:

부서별 파이 차트 생성 (CS, HES, LENOVO)
상태별 색상 코딩 적용
상태별 수량 및 비율 표시
데이터 없음/오류 상태 처리



3.2.2. HourlyBarChart.js

목적: 시간대별 주문 접수량을 막대 그래프로 시각화
주요 기능:

부서별 스택 차트 생성
시간대별 구분 (주간 09-19시 + 야간 19-09시)
부서별 통계 카드 표시 (총계, 주/야간 비율, 시간당 평균)
데이터 없음/오류 상태 처리



3.3. 공통 컴포넌트
3.3.1. MainLayout.js

목적: 애플리케이션 기본 레이아웃 제공
주요 기능:

사이드바 및 콘텐츠 영역 레이아웃 구성
반응형 디자인 적용



3.3.2. Sidebar.js

목적: 내비게이션 메뉴 제공
주요 기능:

사용자 정보 표시 (ID, 부서)
권한별 메뉴 구성 (일반: 배차/통계, 관리자: 관리/통계)
로그아웃 기능
현재 페이지 하이라이트



3.3.3. ErrorBoundary.js

목적: React 컴포넌트 트리에서 발생하는 에러 처리
주요 기능:

JavaScript 에러 감지 및 대체 UI 표시
복구 시도 및 새로고침 옵션 제공
에러 정보 표시 및 로깅



3.3.4. DateRangeInfo.js

목적: 조회 가능한 날짜 범위 정보 표시
주요 기능:

조회 가능 기간 텍스트 표시
로딩 상태 처리
데이터 없음 상태 처리



3.3.5. LoadingSpin.js

목적: 로딩 중 상태를 시각적으로 표시
주요 기능:

로딩 스피너 표시
커스텀 로딩 메시지 지원
크기 조절 가능



3.3.6. ConfirmModal.js

목적: 사용자 확인이 필요한 작업 전 확인 대화상자 제공
주요 기능:

제목 및 내용 커스터마이징
확인/취소 버튼 제공
경고 아이콘 표시



=============================================================
4. 상태 관리 및 데이터 흐름
4.1. Context API 활용
4.1.1. AuthContext.js

목적: 인증 상태 전역 관리
주요 기능:

사용자 정보 저장 및 제공
로그인/로그아웃 함수 제공
토큰 유효성 검사 및 자동 갱신
여러 탭 간 인증 상태 동기화



4.1.2. DashboardContext.js

목적: 대시보드 데이터 및 상태 전역 관리
주요 기능:

대시보드 목록 데이터 저장 및 제공
데이터 조회/필터링/검색 함수 제공
날짜 범위 관리
데이터 업데이트 및 삭제 처리
검색 모드/일반 모드 상태 관리



4.2. 서비스 레이어 구조
4.2.1. AuthService.js

목적: 인증 관련 API 호출 및 로직 처리
주요 기능:

로그인 API 호출
토큰 갱신 API 호출
세션 확인 API 호출
로그아웃 API 호출
로컬 스토리지 토큰 관리



4.2.2. DashboardService.js

목적: 대시보드 관련 API 호출 및 로직 처리
주요 기능:

주문 목록 조회 API 호출
주문 생성 API 호출
주문 상세 조회 API 호출
상태 변경 API 호출
필드 수정 API 호출
배차 처리 API 호출
주문 삭제 API 호출
주문 검색 API 호출
낙관적 락 충돌 처리 로직



4.2.3. VisualizationService.js

목적: 시각화 관련 API 호출 및 로직 처리
주요 기능:

배송 현황 통계 API 호출
시간대별 접수량 통계 API 호출
조회 가능 날짜 범위 API 호출
데이터 가공 및 정규화



4.2.4. LockService.js

목적: 비관적 락 관련 API 호출 및 로직 처리
주요 기능:

락 획득 API 호출
락 해제 API 호출
락 상태 확인 API 호출
다중 락 획득 처리
락 충돌 처리 및 재시도 로직



=============================================================
5. API 연동 명세
5.1. 인증 관련 API
5.1.1. 로그인 (POST /auth/login)

요청 본문:
javascript{
  "user_id": "사용자ID",
  "password": "비밀번호"
}

응답:
javascript{
  "success": true,
  "token": {
    "access_token": "JWT_토큰",
    "refresh_token": "리프레시_토큰"
  },
  "user": {
    "user_id": "사용자ID",
    "user_role": "USER 또는 ADMIN",
    "user_department": "CS, HES, LENOVO 등"
  }
}

에러 응답 (401 Unauthorized):
javascript{
  "success": false,
  "detail": "아이디 또는 비밀번호가 잘못되었습니다"
}


5.1.2. 세션 확인 (GET /auth/check-session)

요청 헤더: Authorization: Bearer {access_token}
응답:
javascript{
  "success": true,
  "user": {
    "user_id": "사용자ID",
    "user_role": "USER 또는 ADMIN",
    "user_department": "CS, HES, LENOVO 등"
  }
}

에러 응답 (401 Unauthorized):
javascript{
  "success": false,
  "detail": "세션이 만료되었습니다"
}


5.1.3. 토큰 갱신 (POST /auth/refresh)

요청 본문:
javascript{
  "refresh_token": "리프레시_토큰"
}

응답:
javascript{
  "success": true,
  "token": {
    "access_token": "새_JWT_토큰",
    "refresh_token": "새_리프레시_토큰"
  }
}

에러 응답 (401 Unauthorized):
javascript{
  "success": false,
  "detail": "리프레시 토큰이 만료되었습니다"
}


5.1.4. 로그아웃 (POST /auth/logout)

요청 본문:
javascript{
  "refresh_token": "리프레시_토큰"
}

응답:
javascript{
  "success": true,
  "message": "로그아웃되었습니다"
}


5.2. 대시보드 관련 API
5.2.1. 주문 목록 조회 (GET /dashboard/list)

요청 파라미터:

start_date: YYYY-MM-DD 형식
end_date: YYYY-MM-DD 형식


응답:
javascript{
  "success": true,
  "data": {
    "items": [/* 주문 항목 배열 */],
    "date_range": {
      "oldest_date": "2025-01-01",
      "latest_date": "2025-03-16"
    }
  }
}


5.2.2. 주문 검색 (GET /dashboard/search)

요청 파라미터:

order_no: 검색할 주문번호


응답:
javascript{
  "success": true,
  "data": {
    "items": [/* 검색 결과 배열 */]
  }
}


5.2.3. 주문 생성 (POST /dashboard)

요청 본문: 주문 정보 (type, order_no, warehouse, sla, eta, postal_code, address, customer, contact, remark 등)
응답:
javascript{
  "success": true,
  "data": {/* 생성된 주문 정보 */}
}

에러 응답 (400 Bad Request):
javascript{
  "success": false,
  "detail": "유효하지 않은 입력입니다"
}


5.2.4. 주문 상세 조회 (GET /dashboard/{dashboard_id})

응답:
javascript{
  "success": true,
  "data": {/* 주문 상세 정보 */}
}

에러 응답 (404 Not Found):
javascript{
  "success": false,
  "detail": "주문을 찾을 수 없습니다"
}


5.2.5. 상태 변경 (PATCH /dashboard/{dashboard_id}/status)

요청 본문:
javascript{
  "status": "IN_PROGRESS",
  "is_admin": false
}

응답:
javascript{
  "success": true,
  "data": {/* 업데이트된 주문 정보 */}
}

에러 응답 (409 Conflict - 낙관적 락 충돌):
javascript{
  "success": false,
  "detail": {
    "message": "낙관적 락 충돌. 다른 사용자가 이미 수정했습니다.",
    "current_version": 2
  }
}

에러 응답 (423 Locked - 비관적 락 충돌):
javascript{
  "success": false,
  "detail": {
    "message": "다른 사용자가 수정 중입니다",
    "locked_by": "사용자ID",
    "lock_type": "STATUS"
  }
}


5.2.6. 필드 수정 (PATCH /dashboard/{dashboard_id}/fields)

요청 본문: 수정할 필드 정보 (eta, customer, contact, address, postal_code, remark 등)
응답:
javascript{
  "success": true,
  "data": {/* 업데이트된 주문 정보 */}
}

에러 응답: 상태 변경과 동일한 형식

5.2.7. 메모 업데이트 (PATCH /dashboard/{dashboard_id}/remark)

요청 본문:
javascript{
  "content": "메모 내용"
}

응답:
javascript{
  "success": true,
  "data": {/* 업데이트된 주문 정보 */}
}

에러 응답: 상태 변경과 동일한 형식

5.2.8. 배차 처리 (POST /dashboard/assign)

요청 본문:
javascript{
  "dashboard_ids": [1, 2, 3],
  "driver_name": "김배송",
  "driver_contact": "010-9876-5432"
}

응답:
javascript{
  "success": true,
  "data": {
    "updated_dashboards": [/* 업데이트된 주문 배열 */]
  }
}

에러 응답 (423 Locked):
javascript{
  "success": false,
  "detail": {
    "message": "배차 처리 중 락 충돌이 발생했습니다",
    "locked_dashboards": [1, 2]
  }
}


5.2.9. 주문 삭제 (DELETE /dashboard)

요청 본문: 삭제할 ID 배열
javascript[1, 2, 3]

응답:
javascript{
  "success": true,
  "deleted_count": 3
}

에러 응답 (403 Forbidden):
javascript{
  "success": false,
  "detail": "삭제 권한이 없습니다. 관리자만 이 기능을 사용할 수 있습니다."
}


5.3. 시각화 관련 API
5.3.1. 배송 현황 조회 (GET /visualization/delivery_status)

요청 파라미터:

start_date: YYYY-MM-DD 형식
end_date: YYYY-MM-DD 형식


응답:
javascript{
  "success": true,
  "data": {
    "type": "delivery_status",
    "total_count": 150,
    "department_breakdown": {
      "CS": {
        "total": 60,
        "status_breakdown": [
          { "status": "WAITING", "count": 20, "percentage": 33.3 },
          // ...더 많은 상태
        ]
      },
      // 다른 부서 정보
    }
  }
}


5.3.2. 시간대별 접수량 조회 (GET /visualization/hourly_orders)

요청 파라미터:

start_date: YYYY-MM-DD 형식
end_date: YYYY-MM-DD 형식


응답:
javascript{
  "success": true,
  "data": {
    "type": "hourly_orders",
    "total_count": 150,
    "average_count": 21.4,
    "department_breakdown": {
      "CS": {
        "total": 60,
        "hourly_counts": {
          "09-10": 5,
          // ...더 많은 시간대
        }
      },
      // 다른 부서 정보
    },
    "time_slots": [
      { "label": "09-10", "start": 9, "end": 10 },
      // ...더 많은 시간대
    ]
  }
}


5.3.3. 조회 가능 날짜 범위 (GET /visualization/date_range)

응답:
javascript{
  "success": true,
  "date_range": {
    "oldest_date": "2025-01-01",
    "latest_date": "2025-03-16"
  }
}


=============================================================
6. 오류 처리 및 예외 상황
6.1. 일반 오류 처리
6.1.1. 네트워크 오류 처리

Axios 인터셉터를 통해 모든 요청에 대한 오류 처리
서버 연결 실패, 타임아웃 등에 대한 사용자 친화적 메시지 표시
토스트/알림 메시지로 오류 알림

6.1.2. 인증 관련 오류

401 Unauthorized: 토큰 만료 감지 및 갱신 시도
토큰 갱신 실패 시 로그인 페이지로 리디렉션
자동 리디렉션 전 현재 페이지 URL 저장

6.1.3. 권한 부족 오류

403 Forbidden: 권한 부족 메시지 표시
관리자 전용 기능 접근 시 일반 사용자에게 안내

6.1.4. 리소스 없음 오류

404 Not Found: 주문을 찾을 수 없을 때 안내
목록 새로고침 유도

6.1.5. 서버 오류

500 Internal Server Error: 서버 오류 메시지 표시
재시도 옵션 제공

6.2. 낙관적 락 충돌 처리
6.2.1. 충돌 감지

상태 코드 409 Conflict 응답 처리
current_version 필드로 최신 버전 확인

6.2.2. 사용자 인터페이스 처리

충돌 알림 메시지 표시
최신 데이터로 자동 갱신 또는 수동 새로고침 유도
버전 불일치 시 필드 수정 불가 안내

6.2.3. 비관적 락 충돌 처리

상태 코드 423 Locked 응답 처리
locked_by 필드로 현재 편집 중인 사용자 표시
lock_type 필드로 어떤 작업이 진행 중인지 안내
자동 재시도 옵션 제공 (필요시)

=============================================================
7. 권한별 UI/UX 차별화
7.1. 일반 사용자 UI/UX
7.1.1. 대시보드 화면

제한된 상태 변경 버튼만 표시

WAITING → IN_PROGRESS → COMPLETE/ISSUE/CANCEL 흐름만 가능


대기(WAITING) 상태 주문만 배차 가능 (체크박스 선택 제한)
삭제 버튼 비표시
사이드바에 "배차"/"통계" 메뉴만 표시

7.1.2. 상세 정보 모달

상태 변경 옵션 제한 (현재 상태의 다음 단계만 선택 가능)
기본 필드 편집 기능 활성화
메모 추가/수정 기능 활성화

7.1.3. 시각화 화면

일반 사용자도 모든 시각화 기능 사용 가능
자신의 부서 데이터만 강조 표시 (옵션)

7.2. 관리자 UI/UX
7.2.1. 대시보드 화면

모든 상태 변경 버튼 활성화 (자유로운 상태 변경 가능)
모든 주문에 대한 배차 가능 (체크박스 선택 제한 없음)
삭제 버튼 표시
사이드바에 "관리"/"통계" 메뉴 표시

7.2.2. 상세 정보 모달

모든 상태 간 변경 가능 (상태 선택 제한 없음)
상태 변경 시 관련 시간 필드(depart_time, complete_time) 영향 안내
버전 정보 표시
강화된 수정 권한 (제한 없는 필드 수정)

7.2.3. 시각화 화면

일반 사용자와 동일한 기능
전체 부서 데이터에 대한 동등한 접근 권한