배송 관제 대시보드 시스템 종합 개선 계획
핵심 요약
현재 배송 관제 대시보드 시스템의 프론트엔드는 백엔드 API와의 연동이 불완전하며, 핵심 기능들이 정상적으로 작동하지 않는 심각한 문제를 안고 있습니다. 특히 인증 시스템, 대시보드 관리, 동시성 제어, 권한 관리 등 핵심 영역에서 구조적인 개선이 필요합니다. 아래는 시스템 안정화를 위한 체계적이고 구체적인 개선 계획입니다.
1. 인증 시스템 전면 재구성
1.1. 인증 흐름 최적화

강제 리디렉션 메커니즘 구현

AuthContext.js에 글로벌 인증 상태 감시 로직 추가
인증되지 않은 모든 페이지 접근 시 /login 경로로 자동 리디렉션
인증 실패 이벤트(401 응답) 발생 시 로그인 페이지로 강제 이동
AxiosConfig.js의 응답 인터셉터에 인증 만료 감지 및 리디렉션 로직 구현



1.2. 토큰 관리 체계 재설계

LocalStorage 활용 최적화

AuthService.js의 토큰 저장/조회 로직 개선: access_token, refresh_token, user 정보 일관된 처리
토큰 만료 시간 관리 추가: 액세스 토큰(60분), 리프레시 토큰(7일)
세션 스토리지 대신 LocalStorage로 통일하여 브라우저 탭 간 상태 공유



1.3. 로그인 프로세스 개선

LoginPage.js 재구성

백엔드 API 응답 구조(success, token, user 필드)에 맞게 처리 로직 수정
로그인 성공 시 LocalStorage에 사용자 정보 및 토큰 저장 메커니즘 최적화
로그인 실패 시 구체적인 오류 메시지 표시 및 사용자 경험 개선



1.4. 토큰 갱신 자동화

AuthService.refreshToken() 함수 개선

리프레시 토큰을 사용한 액세스 토큰 갱신 로직 최적화
갱신 실패 시 로그아웃 처리 및 로그인 페이지로 리디렉션
백엔드 API 요청 구조: POST /auth/refresh 엔드포인트 호출 방식 수정



2. 대시보드 핵심 기능 정상화
2.1. 대시보드 생성 기능

CreateDashboardModal.js 개선

백엔드 API 요청/응답 구조에 맞게 수정: POST /dashboard 엔드포인트 호출 형식 최적화
날짜/시간 필드(eta)의 ISO 형식 변환 로직 개선
필수 필드 유효성 검증 강화(우편번호, 연락처 등)



2.2. 상세 정보 조회 기능

DashboardDetailModal.js 재구성

백엔드 API 호출 구조 최적화: GET /dashboard/{dashboard_id} 엔드포인트 처리
비관적 락 감지 및 사용자 피드백 메커니즘 구현(423 상태 코드 처리)
메모 관리 기능과 필드 수정 기능 명확히 분리



2.3. 날짜 기간 조회 개선

useDateRange.js 커스텀 훅 최적화

백엔드 API 응답 구조(date_range 객체)에 맞게 처리 로직 수정
날짜 범위 유효성 검증 및 예외 처리 강화
백엔드 API 호출: GET /visualization/date_range 응답 처리 개선



2.4. 필드 수정 기능

필드 수정 로직 재구현

메모 수정 UI/기능을 필드 수정에서 완전히 분리
낙관적 락을 위한 버전 관리 로직 구현: version 필드 추적 및 충돌 처리
백엔드 API 호출 구조 최적화: PATCH /dashboard/{dashboard_id}/fields 엔드포인트 처리



2.5. 메모 수정 기능

독립적 메모 관리 시스템 구현

별도의 메모 수정 UI를 통해서만 접근 가능하도록 설계
비관적 락 처리 로직 구현(423 상태 코드)
백엔드 API 호출 구조: PATCH /dashboard/{dashboard_id}/remark 엔드포인트 처리



2.6. 상태 변경 기능

권한별 상태 변경 제약 구현

USER 권한: WAITING → IN_PROGRESS → COMPLETE/ISSUE/CANCEL 흐름 제한
ADMIN 권한: 모든 상태 간 변경 허용
비관적 락 및 낙관적 락 충돌 처리 메커니즘 구현



2.7. 배차 처리 기능

AssignDriverModal.js 개선

다중 선택 배차 처리 로직 최적화
각 대시보드별 버전 관리 및 낙관적 락 충돌 처리
백엔드 API 호출 구조: POST /dashboard/assign 엔드포인트 요청 형식 수정



3. 검색 및 필터링 기능 재설계
3.1. 검색 기능 개선

주문번호 검색 UI 재배치

RangePicker와 같은 위치에 배치하여 시각적 일관성 확보
검색 기능은 백엔드 API 호출 방식으로 구현: GET /dashboard/search?order_no={value}
검색 결과 표시 및 초기화 메커니즘 개선



3.2. 필터링 기능 최적화

클라이언트 사이드 렌더링(CSR) 방식 구현

타입, 부서, 출발 허브 등의 필터링은 프론트엔드에서 처리
이미 로드된 데이터에 대한 필터링으로 서버 부하 감소
필터링 상태 관리 및 UI 피드백 개선



3.3. 검색과 필터링 분리

기능적/시각적 분리를 통한 사용자 혼란 방지

검색(서버 API 호출)과 필터링(CSR)의 차이를 UI로 명확히 표현
검색 결과에 대한 필터링 적용 가능하도록 구현
검색 모드와 일반 모드 전환 시 상태 초기화 로직 개선



4. 페이지 통합 및 권한 관리 체계 개선
4.1. 관리자/사용자 페이지 통합

단일 컴포넌트 구조로 재설계

AdminPage.js와 DashboardPage.js를 통합하여 중복 코드 제거
사용자 권한(user.user_role)에 따른 조건부 렌더링 로직 구현
공통 기능과 권한별 특수 기능 명확히 분리



4.2. 권한별 UI 요소 조건부 렌더링

ADMIN 전용 기능 구현

삭제 버튼: user.user_role === 'ADMIN' 조건부 렌더링
제한 없는 상태 변경: 권한별 상태 변경 옵션 필터링
전체 주문에 대한 배차 기능: 대기 상태 제약 없이 배차 가능



4.3. 권한 검증 로직 강화

API 호출 전 권한 검증

관리자 전용 기능 접근 시 사전 권한 검증
권한 부족 시 적절한 사용자 피드백 제공
비인가 접근 시도 감지 및 로깅



5. 동시성 제어 메커니즘 구현
5.1. 비관적 락(Pessimistic Lock) 처리

423 상태 코드(Locked) 처리 로직 구현

락 충돌 시 사용자 친화적인 메시지 표시: "현재 {locked_by}님이 편집 중입니다"
대기 및 재시도 옵션 제공
락 타입별 차별화된 메시지 제공(편집, 상태 변경, 배차, 메모 작성)



5.2. 낙관적 락(Optimistic Lock) 충돌 관리

409 Conflict 상태 코드 처리 로직 구현

버전 불일치 감지 및 사용자 피드백 제공
응답에 포함된 최신 버전 정보(current_version)를 활용한 자동 재시도 메커니즘
충돌 해결을 위한 UI 가이드 제공



5.3. 락 관련 UX 개선

락 상태 시각적 표시

편집 중인 항목에 대한 시각적 표시(아이콘, 색상 등)
락 획득/해제 상태에 따른 UI 요소 활성화/비활성화
락 만료 시간 표시 및 카운트다운(해당하는 경우)



6. 백엔드 연동 표준화
6.1. API 요청/응답 구조 일관화

AxiosConfig.js 최적화

모든 API 호출의 기본 설정 통일(타임아웃, withCredentials 등)
응답 형식(success, message, data) 처리 로직 표준화
토큰 처리 및 인증 헤더 설정 로직 개선



6.2. 에러 처리 체계화

ErrorHandler.js 확장

HTTP 상태 코드별 에러 처리 로직 구현(400, 401, 403, 404, 409, 423, 500 등)
특수 상태 코드(낙관적/비관적 락) 전용 처리 함수 추가
사용자 친화적인 에러 메시지 시스템 구축



6.3. 서비스 레이어 최적화

각 서비스 클래스 개선

AuthService, DashboardService, VisualizationService 등의 API 호출 로직 표준화
요청/응답 데이터 변환 및 검증 로직 강화
백엔드 API 명세와 완벽하게 일치하는 인터페이스 구현



7. 컴포넌트별 구체적 개선 사항
7.1. AuthContext.js

인증 상태 관리 개선

토큰 만료 감지 및 자동 갱신 로직 구현
인증 상태 변경 이벤트 처리 메커니즘 보완
강제 리디렉션 로직 구현: 인증되지 않은 모든 페이지 접근 시 로그인 페이지로 이동



7.2. DashboardContext.js

데이터 관리 로직 강화

검색 모드와 일반 모드의 명확한 구분 및 전환 메커니즘
낙관적 락을 위한 버전 관리 통합
데이터 조회 및 갱신 로직 최적화



7.3. DashboardTable.js

테이블 컴포넌트 개선

검색 UI 재배치 및 기능 분리
필터링 로직 CSR 방식으로 최적화
권한별 조건부 렌더링 및 기능 제한 구현



7.4. 모달 컴포넌트 개선

CreateDashboardModal.js, DashboardDetailModal.js, AssignDriverModal.js

비관적 락 및 낙관적 락 처리 로직 통합
폼 유효성 검증 강화
사용자 피드백 메커니즘 개선



7.5. 시각화 컴포넌트 최적화

StatusPieChart.js, HourlyBarChart.js

백엔드 데이터 형식에 맞는 처리 로직 구현
데이터 누락 및 형식 불일치에 대한 방어적 코딩
차트 렌더링 성능 최적화



8. 테스트 및 품질 보증 계획
8.1. 단위 테스트 확장

핵심 기능별 테스트 케이스 구현
에러 상황 및 예외 처리 테스트
락 충돌 시나리오 테스트

8.2. 통합 테스트 구현

백엔드 API와의 연동 테스트
전체 사용자 흐름 테스트
권한별 기능 접근 제어 테스트

8.3. 성능 최적화

대량 데이터 처리 성능 테스트
렌더링 최적화 및 메모리 사용 분석
네트워크 요청 최소화 전략 구현

이 종합적인 개선 계획을 체계적으로 구현함으로써, 현재 기능이 정상 작동하지 않는 배송 관제 대시보드 시스템을 안정적이고 효율적인 시스템으로 변모시킬 수 있습니다. 백엔드 API와의 완벽한 통합을 통해 업무 효율성을 극대화하고, 사용자 경험을 크게 향상시킬 것입니다.