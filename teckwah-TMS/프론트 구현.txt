아래는 사용할 Pretendard 웹 폰트 주소 양식이야
웹폰트
CDN을 이용해 Pretendard를 사용할 수 있으며, 토글을 확인해 기본적으로 추천하는 jsDelivr 외에도 cdnjs와 UNPKG 중에 원하는 CDN을 사용하실 수 있습니다.

모든 기능을 포함한 Pretendard를 웹폰트로 사용하려면 아래 코드를 사용하세요. 사용하는 font-family 이름은 Pretendard 입니다.

HTML
<link rel="stylesheet" as="style" crossorigin href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/static/pretendard.min.css" />
cdnjs 및 UNPKG
cdnjs
<link rel="stylesheet" as="style" crossorigin href="https://cdnjs.cloudflare.com/ajax/libs/pretendard/1.3.9/static/pretendard.min.css" />
UNPKG
<link rel="stylesheet" as="style" crossorigin href="https://unpkg.com/pretendard@1.3.9/dist/web/static/pretendard.css" />
CSS
@import url("https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/static/pretendard.min.css");
cdnjs 및 UNPKG
cdnjs
@import url("https://cdnjs.cloudflare.com/ajax/libs/pretendard/1.3.9/static/pretendard.min.css");
UNPKG
@import url("https://unpkg.com/pretendard@1.3.9/dist/web/static/pretendard.css");


# Teckwah TMS 클라이언트 구현 계획서

## 1. 프로젝트 개요

Teckwah TMS(Transport Management System)는 배송 실시간 관제 시스템으로, ETA(Estimated Time of Arrival) 기준으로 주문을 조회하고 관리하며, 담당자(기사) 배정 및 상태 관리를 통합적으로 제공하는 시스템입니다. 이 계획서는 React 18, React Query, Axios, Ant Design 5.x를 활용한 프론트엔드 구현 전략을 상세히 설명합니다.

## 2. 폴더 구조 및 파일 계획

```
C:\MyMain\teckwah-dashboard\teckwah-TMS\client\
├── public/                         # 정적 파일
│   ├── favicon.ico                 # 파비콘
│   ├── logo.png                    # 로고 이미지
│   ├── index.html                  # HTML 템플릿
│   └── fonts/                      # Pretendard 폰트 파일
│       └── pretendard/
├── src/                            # 소스 코드
│   ├── api/                        # API 호출 관련 모듈
│   │   ├── auth.js                 # 인증 관련 API
│   │   ├── dashboard.js            # 대시보드 관련 API
│   │   ├── handover.js             # 인수인계 관련 API
│   │   └── api.js                  # API 공통 설정
│   ├── components/                  # 재사용 가능한 컴포넌트
│   │   ├── common/                  # 공통 컴포넌트
│   │   │   ├── ErrorBoundary.js     # 에러 처리 컴포넌트
│   │   │   ├── LoadingSpinner.js    # 로딩 스피너
│   │   │   └── StatusTag.js         # 상태 태그 컴포넌트
│   │   ├── dashboard/               # 대시보드 관련 컴포넌트
│   │   │   ├── DashboardTable.js    # 대시보드 테이블
│   │   │   ├── DashboardFilter.js   # 필터 컴포넌트
│   │   │   ├── DashboardDetail.js   # 상세 정보 모달
│   │   │   ├── StatusChangeModal.js # 상태 변경 모달
│   │   │   └── AssignDriverModal.js # 배차 처리 모달
│   │   ├── handover/                # 인수인계 관련 컴포넌트
│   │   │   ├── HandoverList.js      # 인수인계 목록
│   │   │   ├── HandoverDetail.js    # 인수인계 상세
│   │   │   └── HandoverForm.js      # 인수인계 작성/수정 폼
│   │   ├── layout/                  # 레이아웃 컴포넌트
│   │   │   ├── Sidebar.js           # 사이드바
│   │   │   └── PageHeader.js        # 페이지 헤더
│   │   └── visualization/           # 시각화 관련 컴포넌트
│   │       ├── StatusChart.js       # 상태별 차트
│   │       ├── TimeChart.js         # 시간대별 차트
│   │       └── DepartmentChart.js   # 부서별 차트
│   ├── hooks/                       # 커스텀 훅
│   │   ├── useDashboard.js          # 대시보드 데이터 관리 훅
│   │   ├── useHandover.js           # 인수인계 데이터 관리 훅
│   │   └── useAuth.js               # 인증 관리 훅
│   ├── pages/                       # 페이지 컴포넌트
│   │   ├── LoginPage.js             # 로그인 페이지
│   │   ├── DashboardPage.js         # 대시보드 메인 페이지
│   │   ├── HandoverPage.js          # 인수인계 페이지
│   │   ├── VisualizationPage.js     # 시각화 페이지
│   │   └── NotFoundPage.js          # 404 페이지
│   ├── styles/                      # 스타일 파일
│   │   ├── global.css               # 전역 스타일
│   │   ├── variables.css            # CSS 변수
│   │   └── fonts.css                # 폰트 설정
│   ├── utils/                       # 유틸리티 함수
│   │   ├── auth.js                  # 인증 관련 유틸
│   │   ├── date.js                  # 날짜 관련 유틸
│   │   ├── format.js                # 포맷팅 유틸
│   │   └── constants.js             # 상수 정의
│   ├── App.js                       # 앱 컴포넌트
│   └── index.js                     # 진입점
└── package.json                     # 패키지 정보
```

## 3. 기술 스택 및 라이브러리

- **React 18**: 최신 기능과 성능 개선을 활용
- **React Router 6**: 클라이언트 라우팅
- **React Query**: 서버 상태 관리 및 API 통신
- **Axios**: HTTP 요청 처리
- **Ant Design 5.x**: UI 컴포넌트 라이브러리
- **dayjs**: 날짜 처리
- **recharts**: 시각화 차트

## 4. 주요 기능별 상세 구현 계획

### 4.1 인증 시스템

#### 구현 파일
- `src/api/auth.js`: 인증 관련 API 호출
- `src/utils/auth.js`: 토큰 관리 및 유틸리티 함수
- `src/hooks/useAuth.js`: 인증 관련 커스텀 훅
- `src/pages/LoginPage.js`: 로그인 페이지

#### 주요 기능
- JWT 기반 인증 (액세스 토큰, 리프레시 토큰)
- 자동 토큰 갱신
- 권한 기반 접근 제어
- 로그인 및 로그아웃 처리

#### 구현 내용
```javascript
// auth.js
export const isAuthenticated = () => {
  const token = localStorage.getItem('accessToken');
  if (!token) return { isAuth: false };
  
  try {
    // 토큰 유효성 검증 로직
    const userData = JSON.parse(localStorage.getItem('userData')) || {};
    return { isAuth: true, userData };
  } catch (error) {
    return { isAuth: false };
  }
};

// LoginPage.js에서는 로그인 폼, 제출 처리, 에러 처리를 구현
```

### 4.2 대시보드 관리

#### 구현 파일
- `src/api/dashboard.js`: 대시보드 API 호출
- `src/hooks/useDashboard.js`: 대시보드 데이터 관리 훅
- `src/pages/DashboardPage.js`: 대시보드 메인 페이지
- `src/components/dashboard/*.js`: 대시보드 관련 컴포넌트

#### 주요 기능
- ETA 기준 주문 조회 및 관리
- 필터링, 정렬, 페이지네이션
- 상태별 주문 요약 통계
- 주문 상세 정보 조회
- 상태 변경 및 배차 처리
- 주문 생성 및 수정

#### 구현 내용
```javascript
// dashboard.js API
export const getDashboardList = async (params) => {
  return await api.get('/dashboard/list', { params });
};

// DashboardPage.js에서는 데이터 로딩, 필터링, 테이블 구현
// React Query를 활용한 서버 상태 관리 및 캐싱
```

### 4.3 인수인계 관리

#### 구현 파일
- `src/api/handover.js`: 인수인계 API 호출
- `src/hooks/useHandover.js`: 인수인계 데이터 관리 훅
- `src/pages/HandoverPage.js`: 인수인계 메인 페이지
- `src/components/handover/*.js`: 인수인계 관련 컴포넌트

#### 주요 기능
- 인수인계 목록 조회
- 인수인계 상세 조회
- 인수인계 작성 및 수정
- 공지사항 관리

#### 구현 내용
```javascript
// handover.js API
export const getHandoverList = async (params) => {
  return await api.get('/handover/list', { params });
};

// HandoverPage.js에서는 목록 조회, 필터링, 작성/수정 기능 구현
```

### 4.4 시각화 대시보드

#### 구현 파일
- `src/pages/VisualizationPage.js`: 시각화 페이지
- `src/components/visualization/*.js`: 시각화 관련 컴포넌트

#### 주요 기능
- 상태별 주문 통계 차트
- 시간대별 주문 추이 차트
- 부서별 주문 분포 차트
- 필터링 및 날짜 범위 설정

#### 구현 내용
```javascript
// VisualizationPage.js
// recharts를 활용한 차트 구현
// React Query를 활용한 데이터 페칭과 캐싱
```

## 5. UI/UX 디자인 설계

### 5.1 스타일 및 테마 설정

- Pretendard 폰트 적용
- TWLKRTMS-mock에서 가져온 디자인 참조
- 색상 변수 통일
  - 주 색상: `#1890ff` (Ant Design 기본 테마 색상)
  - 상태 색상: 각 상태별 구분 색상
  - 레이아웃 색상: 사이드바, 헤더, 컨텐츠 영역 구분 색상

### 5.2 반응형 디자인

- 모바일, 태블릿, 데스크탑 화면 크기에 따른 반응형 레이아웃
- Ant Design Grid 시스템 활용
- 모바일에서는 사이드바 닫기, 간소화된 테이블 뷰 제공

### 5.3 사용자 경험 최적화

- 로딩 상태 표시
- 오류 발생 시 사용자 친화적 메시지
- 빠른 피드백 (성공/실패 메시지)
- 직관적인 인터페이스와 일관된 디자인

## 6. API 통합 계획

### 6.1 API 통신 설정

```javascript
// src/api/api.js
import axios from 'axios';

const API_BASE_URL = '/'; // 프록시 설정으로 상대 경로 사용

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// 요청 인터셉터 - 토큰 첨부
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('accessToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// 응답 인터셉터 - 토큰 갱신 및 오류 처리
api.interceptors.response.use(
  (response) => response.data,
  async (error) => {
    // 토큰 만료 시 갱신 처리 로직
    // 오류 응답 처리 로직
    return Promise.reject(error);
  }
);

export default api;
```

### 6.2 React Query 설정

```javascript
// src/hooks/useDashboard.js
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { getDashboardList, updateDashboard } from '../api/dashboard';

export const useDashboardList = (params) => {
  return useQuery(
    ['dashboardList', params],
    () => getDashboardList(params),
    {
      keepPreviousData: true,
      staleTime: 5 * 60 * 1000, // 5분
    }
  );
};

export const useUpdateDashboard = () => {
  const queryClient = useQueryClient();
  
  return useMutation(
    (data) => updateDashboard(data.id, data),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('dashboardList');
      },
    }
  );
};
```

## 7. 보안 및 성능 최적화

### 7.1 보안 강화

- JWT 토큰 안전한 저장 및 관리
- 액세스 토큰과 리프레시 토큰 분리 관리
- 리프레시 토큰은 HttpOnly 쿠키로 관리
- 권한 기반 접근 제어

### 7.2 성능 최적화

- React.memo를 통한 리렌더링 최적화
- React Query의 캐싱 기능 활용
- 데이터 페이지네이션과 지연 로딩
- 코드 스플리팅 적용

## 8. 테스트 및 오류 처리

### 8.1 오류 처리 전략

- ErrorBoundary 컴포넌트를 통한 전역 에러 처리
- API 요청 에러 처리 및 사용자 친화적 메시지 제공
- 네트워크 오류, 타임아웃에 대한 대응
- 새로고침 버튼 제공으로 사용자가 복구 가능하도록 지원

```javascript
// src/components/common/ErrorBoundary.js
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="error-container">
          <h2>오류가 발생했습니다</h2>
          <p>페이지 로딩 중 문제가 발생했습니다. 다시 시도해 주세요.</p>
          <Button 
            type="primary" 
            onClick={() => window.location.reload()}
          >
            새로고침
          </Button>
        </div>
      );
    }

    return this.props.children;
  }
}
```

## 9. 구현 일정 계획

1. **기본 구조 및 환경 설정 (1일)**
   - 프로젝트 폴더 구조 설정
   - 패키지 설치 및 구성
   - 기본 UI 테마 및 스타일 설정

2. **인증 시스템 구현 (1일)**
   - 로그인 페이지 구현
   - 토큰 관리 및 인증 로직 구현
   - 접근 제어 구현

3. **공통 컴포넌트 및 레이아웃 (1일)**
   - 사이드바 구현
   - 공통 컴포넌트 구현
   - 기본 레이아웃 구성

4. **대시보드 페이지 구현 (2일)**
   - 대시보드 목록 및 필터링
   - 상세 정보 모달
   - 상태 변경 및 배차 기능

5. **인수인계 페이지 구현 (1일)**
   - 인수인계 목록 및 필터링
   - 상세 정보 및 작성/수정 기능

6. **시각화 페이지 구현 (1일)**
   - 차트 구현
   - 필터링 및 데이터 연동

7. **통합 및 테스트 (1일)**
   - 컴포넌트 간 통합
   - 기능 테스트 및 오류 수정
   - 성능 최적화

## 10. 배포 전략

### 10.1 빌드 및 배포 프로세스

1. **빌드 과정**
   - `npm run build` 명령어로 정적 파일 생성
   - 환경별 환경변수 적용

2. **배포 구성**
   - Docker 컨테이너 활용
   - nginx로 정적 파일 서빙
   - Express 서버와 통합

3. **CI/CD 구성**
   - 자동 빌드 및 배포 파이프라인 구성
   - 테스트 자동화

### 10.2 Docker 배포 설정

docker-compose.yml 및 Dockerfile을 활용한 배포 구성

## 11. 요약 및 결론

Teckwah TMS 프론트엔드 구현 계획은 루트 명세서의 요구사항을 충실히 반영하며, React, React Query, Axios, Ant Design을 활용한 최신 웹 기술을 적용합니다. 주요 기능인 대시보드 관리, 인수인계 관리, 시각화 대시보드를 구현하고, 사용자 경험을 최적화하기 위한 UI/UX 디자인을 적용합니다. 

코드 구조는 컴포넌트 재사용성을 높이고 유지보수성을 향상시키기 위해 기능별로 모듈화되어 있으며, API 통신과 상태 관리를 위한 React Query를 적극 활용합니다. 보안과 성능 최적화를 위한 전략도 수립하여 안정적이고 효율적인 시스템을 구현할 계획입니다.

배포는 Docker 컨테이너를 활용하여 백엔드와 통합하며, CI/CD 파이프라인을 구성하여 지속적인 배포와 업데이트를 지원할 것입니다.

해당 계획을 토대로 Teckwah TMS 프론트엔드를 단계적으로 구현해 나갈 예정입니다.