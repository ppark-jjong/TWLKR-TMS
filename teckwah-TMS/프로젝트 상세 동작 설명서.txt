# 프로젝트 상세 동작 설명서

*기준 문서: 프로젝트 기본 설명서.txt *
*기준 코드: main/routes/, main/service/, main/schema/ 등*
*렌더링 전략: 초기 SSR(첫 페이지) + 전체 데이터 CSR (대시보드, 인수인계 공통)*
*인증: 모든 보호된 라우트 접근 시 인증 확인 및 리디렉션 적용*
*스키마 변경 금지 : 기존에 있는 db 스키마와 model 필드들을 절대 수정하지 마세요
---

## 0. 공통 사항

*   **인증:** 아래 명시된 엔드포인트 중 `/login`, `/logout` 및 정적 파일(`/static/...`)을 제외한 **모든 페이지 및 API 접근 시** 서버 측에서 사용자 세션 유효성을 검증합니다. (예: 각 라우터의 `dependencies=[Depends(get_current_user)]` 또는 `Depends(get_admin_user)` 적용)
    *   **인증 실패 시:** 전역 401 예외 핸들러가 사용자를 즉시 로그인 페이지 (`/login`)로 리다이렉트합니다. (`return_to` 쿼리 파라미터 포함)
    *   **권한:** 특정 기능(예: 사용자 관리, 주문 삭제)은 `Depends(get_admin_user)`를 통해 ADMIN 역할만 접근 가능하도록 제한합니다. 권한 부족 시 403 Forbidden 오류를 반환합니다.
*   **락(Lock) 메커니즘:** 주문 및 인수인계 데이터의 동시 수정을 방지하기 위해, **수정 페이지 로드 시** 및 **수정/삭제 처리 시** 관련 서비스 함수 내에서 락 상태를 확인하고 필요한 경우 락을 획득/해제합니다.
    *   **수정 페이지 로드 시 락 확인:** `GET /orders/{id}/edit`, `GET /handover/{id}/edit` 요청 시 서비스 함수(`get_lock_status`, `check_handover_lock_status` 등 활용)가 락 상태를 확인합니다. 다른 사용자가 락을 보유하고 있다면, **상세 페이지로 리다이렉트**하고 사용자에게 알림 메시지 (예: "{user_id}님이 수정 중입니다.")를 URL 쿼리 파라미터 (`?error=...`)로 전달합니다.
    *   **수정/삭제 처리 시 락 획득:** `POST /api/orders/{id}`, `POST /api/orders/{id}/delete`, `POST /api/handover/{id}`, `POST /api/handover/{id}/delete` 등의 요청 처리 시, 해당 서비스 함수(`update_dashboard`, `delete_dashboard`, `update_handover`, `delete_handover` 등)가 **먼저 락 획득을 시도**합니다. 락 획득 실패 시 (다른 사용자가 편집 중) HTTP 423 Locked 상태 코드 및 오류 메시지를 반환합니다. 작업 완료 또는 실패 시 서비스 함수 내에서 **락을 해제**합니다.
*   **오류 처리:** API 호출 실패 시 표준화된 JSON 응답 (`{ "success": false, "message": "오류 내용", "error_details": "..." }`) 및 적절한 HTTP 상태 코드를 반환합니다. 페이지 로드 실패 시 `error.html` 템플릿을 렌더링합니다.
*   **알림 기능:** 사용자 액션(생성, 수정, 삭제, 복사 등) 결과 및 락 경고는 **클라이언트 JavaScript**를 통해 알림창으로 표시됩니다.
    *   **서버 응답:** 서버는 Form 처리 후 리다이렉션 시 URL 쿼리 파라미터(`?success=...`, `?error=...`, `?warning=...`)에 메시지를 담아 전달합니다.
    *   **클라이언트 처리:** 페이지 로드 시 JavaScript(`base.js` 또는 각 페이지 JS)가 쿼리 파라미터를 확인하여 `Utils.alerts` 함수를 호출, 알림을 표시합니다. 클라이언트 액션(예: 복사) 결과는 해당 이벤트 핸들러에서 직접 `Utils.alerts`를 호출합니다.
*   **시간:** 모든 시간은 KST (UTC+9) 기준이며, `YYYY-MM-DD HH:MM` 형식으로 표시/처리됩니다. 무조건 해당 방식으로 통일하세요
*   **로깅:** 각 동작 포인트별 디버깅에 용이하게 표준 `logging` 라이브러리를 활용한 로그를 구현합니다. (기존 `logger.py` 사용 로직 제거)

## 1. 인증 (Authentication)

### 1.1 로그인 (`/login` - 페이지 및 처리)

*   **페이지 로드:** `GET /login` (HTML 응답)
*   **로그인 처리:**
    *   **HTTP Method:** `POST`
    *   **경로:** `/login`
    *   **전송 방식:** **Form** (`application/x-www-form-urlencoded`)
    *   **요청 필드:** `user_id` (문자열, 필수), `password` (문자열, 필수)
    *   **인증:** 없음
    *   **응답:** 성공 시 `/dashboard` 리다이렉트 (세션 쿠키 `session` 설정), 실패 시 로그인 페이지(`/login`)에 오류 메시지 표시.
    *   **동작:** 사용자 인증 (DB 조회 및 비밀번호 검증) 후 성공 시 세션 생성 및 대시보드 리다이렉트, 실패 시 오류 메시지 표시.

### 1.2 로그아웃 (`/logout`)

*   **HTTP Method:** `POST` (CSRF 방어)
*   **경로:** `/logout`
*   **전송 방식:** **Form**
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **응답:** `/login` 페이지로 리다이렉트 (세션 쿠키 제거 또는 무효화).
*   **동작:** 현재 세션 무효화 후 로그인 페이지로 리다이렉트.

---

## 2. 주문 관리 (Dashboard/Order) - `dashboard_route.py`, `order_routes.py`

### 2.1 대시보드 페이지 초기 로드 (`/dashboard`)

*   **HTTP Method:** `GET`
*   **경로:** `/dashboard`
*   **전송 방식:** HTML (SSR - **첫 페이지 데이터 포함**)
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 파라미터 (Query):** `start_date`(선택), `end_date`(선택)
*   **응답:**
    *   `dashboard.html` 템플릿 렌더링
    *   `initial_data_json` (컨텍스트 변수, JSON 문자열 - 첫 30개 주문, 페이지 정보 등 포함)
    *   `current_user`
*   **동작 설명:** 인증 확인 -> 날짜 범위 확정 -> `get_dashboard_list_paginated` 호출 -> 페이지 정보 계산 -> `initial_data_json` 생성 -> 템플릿 렌더링. JS는 이후 `/api/dashboard/list` 호출하여 전체 데이터 로드.

### 2.2 주문 목록 조회 API (`/api/dashboard/list`)

*   **HTTP Method:** `GET`
*   **경로:** `/api/dashboard/list`
*   **전송 방식:** **JSON**
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 파라미터 (Query):** `start_date`, `end_date`
*   **응답:** (`DashboardListResponse` JSON)
*   **동작:** 인증 확인 -> `get_dashboard_list` 호출 (페이지네이션 없음) -> JSON 응답.

### 2.3 주문번호 검색 API (`/api/dashboard/search`)

*   **HTTP Method:** `GET`
*   **경로:** `/api/dashboard/search`
*   **전송 방식:** **JSON**
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 파라미터 (Query):** `order_no`
*   **응답:** (JSON - `{success, message, data: {order: DashboardListItem | null}}`)
*   **동작:** 인증 확인 -> `search_dashboard_by_order_no` 호출 (단일 검색) -> JSON 응답.

### 2.4 주문 상세 페이지 조회 (`/orders/{id}`)

*   **HTTP Method:** `GET`
*   **경로:** `/orders/{id}`
*   **전송 방식:** HTML (SSR)
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 파라미터 (Path):** `id`
*   **응답:** `order_page.html` 렌더링 (`order` 객체, `lock_info`, `current_user` 포함)
*   **동작:** 인증 확인 -> `get_dashboard_by_id` 호출 -> `get_lock_status` 호출 -> 템플릿 렌더링.

### 2.5 주문 생성 처리 (`/api/orders`)

*   **HTTP Method:** `POST`
*   **경로:** `/api/orders`
*   **전송 방식:** **Form**
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 필드:** `orderNo`, `type`, `department`, ... , `remark`(선택)
*   **응답:** 성공 시 `/orders/{new_id}` 리다이렉트 (성공 메시지 포함), 실패 시 오류 응답 또는 리다이렉트 (오류 메시지 포함).
*   **동작:** 인증 확인 -> Form 데이터 유효성 검증 -> `create_dashboard` 서비스 호출 -> 성공 시 리다이렉트.

### 2.6 주문 수정 페이지 로드 (`/orders/{id}/edit`)

*   **HTTP Method:** `GET`
*   **경로:** `/orders/{id}/edit`
*   **전송 방식:** HTML (SSR)
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 파라미터 (Path):** `id`
*   **응답:**
    *   **락 없음:** `order_form.html` 렌더링 (`order` 정보 등 포함)
    *   **락 있음 (타인):** `/orders/{id}` 로 리다이렉트 + 알림 메시지 (`?error=...`)
*   **동작:** 인증 확인 -> `get_dashboard_by_id` 호출 -> **락 상태 확인 (`get_lock_status`)** -> 조건에 따라 렌더링 또는 리다이렉트.

### 2.7 주문 수정 처리 (`/api/orders/{id}`)

*   **HTTP Method:** `POST`
*   **경로:** `/api/orders/{id}`
*   **전송 방식:** **Form**
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 파라미터 (Path):** `id`
*   **요청 필드:** `type`, `department`, ..., `status`(선택), `driver_name`(선택), `driver_contact`(선택)
*   **응답:** 성공 시 `/orders/{id}` 리다이렉트 (성공 메시지 포함), 실패 시 오류 응답 또는 리다이렉트 (오류 메시지 포함).
*   **동작:** 인증 확인 -> **락 획득 시도** (서비스 내) -> Form 데이터 유효성 검증 -> `update_dashboard` 서비스 호출 (상태 변경 로직 포함) -> **락 해제** (서비스 내) -> 성공 시 리다이렉트.

### 2.8 주문 삭제 처리 (`/api/orders/{id}/delete`)

*   **HTTP Method:** `POST`
*   **경로:** `/api/orders/{id}/delete`
*   **전송 방식:** **Form**
*   **인증:** 필요 (`Depends(get_admin_user)`)
*   **권한:** **ADMIN**
*   **요청 파라미터 (Path):** `id`
*   **응답:** 성공 시 `/dashboard` 리다이렉트 (성공 메시지 포함), 실패 시 `/orders/{id}` 리다이렉트 (오류 메시지 포함).
*   **동작:** 인증/권한 확인 -> **락 획득 시도** (서비스 내) -> `delete_dashboard` 서비스 호출 -> 성공/실패에 따라 리다이렉트.

---

## 3. 인수인계 (Handover) - `handover_route.py`

### 3.1 인수인계 페이지 로드 (`/handover`)

*   **HTTP Method:** `GET`
*   **경로:** `/handover`
*   **전송 방식:** HTML (SSR - 첫 페이지 데이터 포함)
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 파라미터 (Query):** `page`(선택), `page_size`(선택)
*   **응답:** `handover.html` 렌더링 (`initial_data_json`, `current_user` 포함)
*   **동작:** 인증 확인 -> `get_handover_list_paginated` 호출 (첫 페이지) -> `get_notice_list` 호출 -> `initial_data_json` 생성 -> 템플릿 렌더링. JS는 이후 `/api/handover/list` 호출하여 전체 데이터 로드.

### 3.2 인수인계 목록 조회 API (`/api/handover/list`)

*   **HTTP Method:** `GET`
*   **경로:** `/api/handover/list`
*   **전송 방식:** **JSON**
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 파라미터 (Query):** `is_notice` (boolean, 선택)
*   **응답:** (JSON - `{success, message, data: List[HandoverListItem]}`)
*   **동작:** 인증 확인 -> `get_handover_list_all` 서비스 호출 -> JSON 응답.

### 3.3 인수인계 상세 페이지 조회 (`/handover/{id}`)

*   **HTTP Method:** `GET`
*   **경로:** `/handover/{id}`
*   **전송 방식:** HTML (SSR)
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **응답:** `handover_detail.html` 렌더링 (`handover` 객체, `lock_info`, `current_user` 포함)
*   **동작:** 인증 확인 -> `get_handover_by_id` 호출 -> `check_handover_lock_status` 호출 -> 템플릿 렌더링.

### 3.4 인수인계 생성 페이지 로드 (`/handover/new`)

*   **HTTP Method:** `GET`
*   **경로:** `/handover/new`
*   **전송 방식:** HTML (SSR)
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **응답:** `handover_form.html` 렌더링
*   **동작:** 인증 확인 -> 생성 폼 렌더링.

### 3.5 인수인계 생성 처리 (`/api/handover`)

*   **HTTP Method:** `POST`
*   **경로:** `/api/handover`
*   **전송 방식:** **Form**
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 필드:** `title`, `content`, `is_notice`
*   **응답:** 성공 시 `/handover/{new_id}` 리다이렉트 (성공 메시지 포함), 실패 시 오류 응답 또는 리다이렉트 (오류 메시지 포함).
*   **동작:** 인증 확인 -> (ADMIN 권한 확인) -> `create_handover` 서비스 호출 -> 성공 시 리다이렉트.

### 3.6 인수인계 수정 페이지 로드 (`/handover/{id}/edit`)

*   **HTTP Method:** `GET`
*   **경로:** `/handover/{id}/edit`
*   **전송 방식:** HTML (SSR)
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 파라미터 (Path):** `id`
*   **응답:**
    *   **락 없음:** `handover_form.html` 렌더링 (`handover` 정보 등 포함)
    *   **락 있음 (타인):** `/handover/{id}` 로 리다이렉트 + 알림 메시지 (`?error=...`)
*   **동작:** 인증 확인 -> `get_handover_by_id` 호출 -> **락 상태 확인 (`check_handover_lock_status`)** -> 조건에 따라 렌더링 또는 리다이렉트.

### 3.7 인수인계 수정 처리 (`/api/handover/{id}`)

*   **HTTP Method:** `POST`
*   **경로:** `/api/handover/{id}`
*   **전송 방식:** **Form**
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **요청 필드:** `title`, `content`, `is_notice`
*   **응답:** 성공 시 `/handover/{id}` 리다이렉트 (성공 메시지 포함), 실패 시 오류 응답 또는 리다이렉트 (오류 메시지 포함).
*   **동작:** 인증 확인 -> (ADMIN 권한 확인) -> **락 획득 시도** (서비스 내) -> `update_handover` 서비스 호출 -> **락 해제** (서비스 내) -> 성공 시 리다이렉트.

### 3.8 인수인계 삭제 처리 (`/api/handover/{id}/delete`)

*   **HTTP Method:** `POST`
*   **경로:** `/api/handover/{id}/delete`
*   **전송 방식:** **Form**
*   **인증:** 필요 (`Depends(get_current_user)`)
*   **권한:** ADMIN 또는 작성자 본인 (서비스 내 확인)
*   **응답:** 성공 시 `/handover` 리다이렉트 (성공 메시지 포함), 실패 시 `/handover/{id}` 리다이렉트 (오류 메시지 포함).
*   **동작:** 인증 확인 -> **락 획득 시도** (서비스 내) -> 권한 확인 -> `delete_handover` 서비스 호출 -> 성공/실패에 따라 리다이렉트.

---

## 4. 사용자 관리 (Admin 전용) - `users_route.py`

*   **기본 페이지 경로:** `/admin/users`
*   **기본 API 경로:** `/api/admin/users`
*   **인증:** 모든 경로 ADMIN 권한 필요 (`Depends(get_admin_user)`).

### 4.1 사용자 목록 조회 페이지 (`/admin/users`)
*   **HTTP Method:** `GET`, **전송:** HTML(SSR), **응답:** `users.html`
*   **동작:** ADMIN 확인 -> `get_user_list` 호출 -> 템플릿 렌더링.

### 4.2 사용자 생성 처리 (`/api/admin/users`)
*   **HTTP Method:** `POST`, **경로:** `/api/admin/users`
*   **전송:** **Form**, **요청:** `user_id`, `user_password`, `user_role`, `user_department`(선택)
*   **응답:** 성공 시 `/admin/users` 리다이렉트 (성공 메시지 포함), 실패 시 리다이렉트 (오류 메시지 포함).
*   **동작:** ADMIN 확인 -> 유효성/중복 검증 -> 비밀번호 해싱 -> `create_user` 호출 -> 리다이렉트.

### 4.3 사용자 삭제 처리 (`/api/admin/users/{user_id}/delete`)
*   **HTTP Method:** `POST`, **경로:** `/api/admin/users/{user_id}/delete`
*   **전송:** **Form**
*   **응답:** 성공 시 `/admin/users` 리다이렉트 (성공 메시지 포함), 실패 시 리다이렉트 (오류 메시지 포함).
*   **동작:** ADMIN 확인 -> (자기 자신 삭제 불가 처리) -> `delete_user` 호출 -> 리다이렉트.

---

## 5. 클라이언트 사이드 동작 (JavaScript)

*   **공통 원칙:** 오류 방지, 성능 최적화, 코드 구조화, 상태 관리, 로딩 상태 처리, **알림 기능(`Utils.alerts.*` 및 URL 파라미터 확인)**.
*   **대시보드 페이지 (`dashboard.html` 내 JS):**
    *   **초기화:** SSR 데이터(`initial_data_json`) 파싱 -> 테이블 초기 렌더링 -> 비동기 `/api/dashboard/list` 호출 (`fetchAllOrders`) -> `allOrders` 업데이트 및 렌더링.
    *   **데이터 로딩/렌더링:** 날짜/필터 변경 시 `applyFiltersAndRender` 호출 (`allOrders` 기반 필터링/페이징), 새로고침 시 `fetchAllOrders` 호출.
    *   **검색:** `/api/dashboard/search` 호출 (`fetch`).
    *   **복사:** `copyOrderNumber` 함수 (`navigator.clipboard`).
*   **인수인계 페이지 (`handover.html` 내 JS):**
    *   **초기화:** SSR 데이터(`initial_data_json`) 파싱 -> 테이블 초기 렌더링 -> 비동기 `/api/handover/list` 호출 (`fetchAllItems`) -> `allItems` 업데이트 및 렌더링.
    *   **렌더링:** `allItems` 기반 필터링(유형)/페이징 후 테이블 렌더링 (`applyFiltersAndRender`).
    *   **필터 변경:** `typeFilter` 변경 시 `applyFiltersAndRender` 호출.
*   **주문 상세 페이지 (`order_detail.js`):**
    *   **초기화:** SSR 데이터(`page_data_json`) 파싱 -> 데이터 표시 -> `checkLockStatus` 호출 및 UI 업데이트.
    *   **삭제:** 버튼 클릭 -> `confirm()` -> Form (`action="/api/orders/{id}/delete"`) 제출.
    *   **락 확인:** `checkLockStatus` 함수 (`GET /api/lock/order/{id}` 호출 - fetch 사용).
*   **사용자 관리 페이지 (`users.js`):**
    *   **초기화:** URL 파라미터 확인하여 알림 표시 (`checkUrlParamsForNotifications`).
    *   **생성:** 다이얼로그 -> 저장 버튼 -> Form 데이터 `/api/admin/users` 로 POST (`fetch`).
    *   **삭제:** 삭제 버튼 -> `confirm()` -> `/api/admin/users/{id}/delete` 로 POST (`fetch`).
*   **`utils.js`:**
    *   `Utils.auth`, `Utils.alerts`, `Utils.ui` 등 필요 함수 제공. `fetch` API 직접 사용으로 `postForm` 불필요.

--- 