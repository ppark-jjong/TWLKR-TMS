# 프로젝트 규칙·상세 동작 설명서 **페이지 기반 최종 업데이트**

> 본 문서는 원본 **"프로젝트 규칙.txt"**와 **"상세 동작 설명서.txt"**의 모든 내용을 *누락 없이* 통합하되,
>
> 1. **모달 구조를 전면 제거**하고 **전용 페이지(SSR) 렌더링** 방식으로 수정하였습니다.
> 2. **컬럼 커스터마이징 기능**은 필수로 유지하였습니다.
> 3. URL · API 경로·데이터 포맷 상세는 기술 외부 문서로 분리하고 여기서 삭제했습니다.
> 4. **알림 UI**는 순수 **SSR Flash Message** 방식으로 단순화했습니다.
> 5. **무료 디자인 라이브러리**(Bootstrap/Tailwind 등) 사용을 적극 허용합니다.

---

## Ⅰ. 프로젝트 규칙 (배송 실시간 관제 시스템 – 루트 명세서)

### 1. 프로젝트 개요 및 목표

- **실시간 배송 주문 관리** : ETA 기준으로 주문을 조회하고 상태를 관리합니다.
- **효율적 배차 처리** : 담당자(기사) 배정 및 상태 관리를 통합 제공합니다.
- **권한별 기능 구분** : 일반 사용자 / 관리자 권한으로 분리하여 처리합니다.
- **지역 특화 시스템** : 한국어 UI, 국내 사용자 전용.
- **고정 브랜드 컬러** : `#D72519` (포인트 색상).
- **배포 테스트** : 로컬 Docker 단일 컨테이너 환경 = 운영과 동일.
- **렌더링 방식** : 초기 요청 시 SSR(서버 사이드 렌더링)으로 전체 페이지를 렌더링하고, 이후 사용자 상호작용에 따라 CSR(JavaScript)로 동적 동작을 처리합니다.

### 2. 아키텍처 원칙 및 기술 스택

#### 2.1 아키텍처 원칙

1. 과도한 추상화·복잡성 지양.
2. **YAGNI** – 지금 필요한 기능만 구현.
3. **명시적 액션 기반** – 자동화 최소화, 사용자 명시적 액션으로 데이터 갱신.
4. 핵심 보안·정합성 검증만 백엔드 수행.
5. **프론트엔드 검증 중심** – UI 단에서 대부분의 유효성 검증 수행.
6. **일관된 UI** – 동일 상황에서 동일 UI 요소·패턴.
7. **SSR 우선** – 초기 로딩 성능·단순성 확보.

#### 2.2 기술 스택

- **백엔드** : Python 3.12.9, FastAPI, Jinja2 (SSR)
- **프론트엔드** : 기본 HTML/CSS + Jinja2 템플릿, 필요 시 JavaScript 모듈화
- **데이터베이스** : MySQL 8.0 (init‑db.sql 기반 스키마)
- **배포 환경** : Docker 컨테이너 (GAE Flexible Environment runtime `custom`)
- **Cloud SQL 연동** : Private IP, IAM DB Auth, 자동 백업, SSL / Cloud SQL Auth Proxy(로컬)

### 3. 성능 및 안정성 고려사항

- 필요한 필드만 인덱싱, 과도한 인덱스 금지.
- 복잡한 조인 최소화·트랜잭션 범위 축소.
- 네트워크 오류·타임아웃 예외 처리.
- **요청 자동 재시도 금지** – 사용자의 명시적 재시도만 허용.

### 4. 개발 및 배포 지침

#### 4.1 개발 환경

- 로컬 MySQL (컨테이너 외부) 사용, 추후 Cloud SQL 교체 예정.
- Windows + PowerShell + Cursor 에디터.
- 오픈소스 무료 라이브러리만 채택.

#### 4.2 코드 작성 원칙

- 주석은 한국어, 가독성 유지.
- 과도한 계층화·추상화 지양.
- 일관된 오류 처리·YAGNI 엄수.
- SSR 템플릿 기반 구조.

#### 4.3 배포 고려사항

- Dockerfile 하나로 간단 빌드·배포.
- 필수 설정은 환경 변수로 관리.
- 헬스 체크·로그는 1회 선언.
- **CORS** : 최소 허용 도메인만 화이트리스트.
- **보안 헤더** : `Strict‑Transport‑Security`, `X‑Content‑Type‑Options`, `X‑Frame‑Options`.
- **GAE 기본 보호** : DDoS / TLS / 방화벽 / (선택) IAP.

##### 4.3.1 Docker 기반 단일 컨테이너

- FastAPI + Jinja2 단일 애플리케이션.
- 정적 파일 → `StaticFiles` 제공.
- GAE Flex에서 빌드된 컨테이너 직접 실행.

#### 4.4 사용자 경험 & 인터페이스 원칙

- 동일 기능은 동일 방식·스타일.
- 상태(로딩/성공/실패) 시각화.
- 오류 알림: 한 번만 표시, 다음 단계 제안, 자동 해제 가능.
- 반응형 디자인: 작은 화면 시 컬럼 축소·UI 재배치.

#### 4.5 보안 설계 원칙

- 세션 기반 로그인 (`httponly`, `secure` 쿠키).
- 역할 기반 접근 제어.
- 세션 만료·갱신 메커니즘.
- 입력값 검증·살균, 최소 개인정보 저장.
- 행 수준 락으로 동시 편집 보호.
- **Cloud SQL** : 자동 백업·파라미터 최소 권한.

### 5. 유지보수 고려사항

- 요청된 기능만 수정·생성, 기존 구조 존중.
- DB 모델 변경 시 사전 협의.
- 과도한 로깅 금지, 문제 해결용 핵심 로그만.
- 템플릿·정적 리소스 구성 체계적 관리, JS 적절히 사용.

### 6. 기타

- 예상 부하 : 동시 접속 50명 · TPS 100 · 시간당 ≤ 100 MB.
- API 버전 문서화는 별도 내부 문서에서 관리.
- 자동 재시도 로직 없음.
- **색상 규격** : 메인 `#D72519`, 상태별 색상은 상세 동작 설명서 4.3 참조.

---

## Ⅱ. 상세 동작 설명서 (배송 실시간 관제 시스템)

### 1. 권한 구조

| 구분 | 접근 페이지 | CRUD 권한 | 상태 변경 |
|------|-------------|-----------|-----------|
| **ADMIN** | 대시보드, 인수인계, 사용자 관리 | 전체(락 확보 시) | 5가지 상태 간 자유 전이(역행·롤백 포함) |
| **USER**  | 대시보드, 인수인계 | 조회, 생성, 수정(락 확보 시) | 대기 → 진행, 진행 → 완료/이슈/취소 |

### 2. 행 단위 락 (Row‑Level Lock)

- 데이터 변경 전 반드시 락 필요.
- **락 필드**: `update_by`, `update_at` 사용, 타임아웃 5분.
- 다른 사용자가 락 → 작업 거부·알림(SSR Flash).
- 작업 완료 후 자동 해제.

### 3. 인증·세션

- 로그인 필수, 미인증 시 로그인 페이지 리다이렉트.
- 세션 쿠키 설정 후 대시보드 진입.
- 세션 만료 시 자동 로그아웃.
- 로그아웃 → 세션 삭제·로그인 페이지 이동.

### 4. 대시보드 (Dashboard Page)

#### 4.1 초기 로드

- ETA 기본값 : **오늘**.
- SSR로 today ETA 주문 로드 → 이후 상태·부서·창고는 CSR 필터링.

#### 4.2 데이터 조회 & 필터링

| 구분 | 처리 방식 |
|------|-----------|
| 서버 조회(SSR) | 날짜(ETA) 범위 · order no 검색 |
| 클라이언트 필터(CSR) | 상태 · 부서 · 창고 · 페이지 크기 재필터링 |

#### 4.3 테이블·컬럼·색상 규격

- **행 배경색** : `대기 rgb(255,246,203)`, `진행 rgb(179,228,250)`, `완료 rgb(210,250,171)`, `이슈 rgb(252,173,161)`, `취소 rgb(196,196,196)`
- 기본 컬럼: 부서, 유형, 창고, 주문번호, ETA, 상태, 도착지, 고객명, 기사명.
- **컬럼 커스터마이징** : 체크박스 UI로 선택 후 *Submit* → CSR 렌더링 (설정은 세션 또는 쿠키 저장)
- 페이지네이션: 10·30·50행 (쿼리 파라미터 기반 SSR)

#### 4.4 행 상호작용 & 선택

- **행 클릭 → 주문 상세 페이지** (`/orders/{id}`)

#### 4.5 주문 상세 페이지

- 모든 필드·마지막 업데이트 정보 표시.
- **편집 모드** 진입 버튼: 락 확보 시에만 표시.
- 편집 가능 항목:
  - 기본 정보: type, department, warehouse, SLA, ETA
  - 배송 정보: postalCode, address, customer, contact
  - 상태 정보: status (상태 변경 통합)
  - 배차 정보: driverName, driverContact (기사 배정 통합)
  - 기타 정보: remark
- 편집 완료 시 POST 후 **PRG(Post–Redirect–Get)** 패턴 적용 → Flash 메시지로 결과 표시.
- 관리자에게만 **삭제** 버튼 노출.

#### 4.6 주문 생성·삭제

- **신규 주문 페이지** (`/orders/new`) : 필수 입력 ↗ order_no, type, department, warehouse, SLA, ETA, postal_code(5), address, customer, contact.
- postal_code 4자리 입력 시 0 자동 보완(프론트 엔드 실시간 / 백엔드 재검증).
- **삭제** : 관리자만, 락 확인 후 진행, Flash Message 알림.

#### 4.7 주문 상태 변경

- 상태 종류: 대기 · 진행 · 완료 · 이슈 · 취소.
- 변경 시 depart_time / complete_time 자동 기록.
- 락 확인 로직 유지.

#### 4.8 배차 (기사 배정)

- 주문 상세 페이지에서 driverName, driverContact 수정.
- 락 확인 로직 유지.

### 5. 인수인계 (Handover Page)

- 초기 로드: 공지(30%) · 인수인계(70%) 동시에 SSR 로드.
- 공지사항 : 관리자만 생성·삭제.
- 인수인계 : USER 생성 가능, 본인 작성 항목만 수정, 관리자 예외.
- CRUD 전용 페이지 구조(`/handover/new`, `/handover/{id}/edit` 등) 적용.
- 락·알림 로직 동일.

### 7. 사용자 관리 (User Manage Page – 관리자 전용)

- 초기 로드: 모든 사용자 목록(권한, ID, 이름, 부서) 테이블.
- 기능: 사용자 추가(ID, PW, department, 권한), 사용자 삭제 (관리자만).

### 8. 우편번호 처리

- 독립 우편번호 API 제거.
- 주문 생성·수정 시 5자리 입력, 4자리 → '0' 보완.

### 9. UI/UX 특성 및 디자인 원칙

#### 9.1 테이블 디자인

- 상태별 행 배경색, 컬럼 커스터마이징, 행 상호작용 규칙.

#### 9.2 액션 & 상호작용

- 상단 상시 버튼: 새로고침, 신규 등록.
- **모든 액션은 전용 페이지**(상세·신규·수정) **내에서 수행**.
- 락 알림은 SSR Flash 메시지로 표시 후 자동 해제.

#### 9.3 반응형 디자인

- 화면 크기에 따라 자동 레이아웃 조정·컬럼 축소.

#### 9.4 JavaScript 사용·구조화 원칙

- **SSR & JavaScript 균형** : 기본 구조·데이터 → SSR, 즉각 피드백·경량 UX → JS.
- **JavaScript 적용 영역(최소)** :
  - 입력값 즉시 검증(우편번호 보완 등)
  - Date/Time Picker 보조
  - Flash 메시지 auto‑dismiss (3~5 줄 JS)
- 전역 네임스페이스 오염 방지, 이벤트 핸들러 중복 방지.

### 10. 공통 처리 사항

#### 10.1 마지막 수정자·수정 시간

- CRUD·상태 변경 시 `update_by`, `update_at` 갱신(이력 테이블 없음).

#### 10.2 알림 시스템 (SSR Flash)

| 유형 | 배경색 예시 | 기본 지속 시간 |
|------|------------|----------------|
| 오류 | 빨간색 | 사용자가 닫을 때까지 |
| 경고 | 주황색 | 5초 |
| 성공 | 녹색 | 3초 |
| 정보 | 파란색 | 3초 |

- 우상단 Toast / Alert Box 하나만 렌더링.
- 우선순위: 오류 > 경고 > 성공 > 정보 (동시 존재 시 상위 우선)
- 동일 메시지 중복 표시하지 않음.

#### 10.3 로그 / 알림

- 상태 롤백·락 거부·일괄 처리 결과 Flash Message 기록.
- 서버 측 에러는 5xx 로깅 + Flash 오류 표시.

#### 10.4 시간/날짜 표준

- **시간대**: 모든 날짜/시간은 KST(UTC+9) 기준.
- **날짜 형식**: `YYYY‑MM‑DD` (예: 2025‑04‑25)
- **시간 형식**: `HH:MM` (예: 14:30)
- **일시 형식**: `YYYY‑MM‑DD HH:MM`
- **DB 저장**: `DATETIME`(KST) 필드 사용.

#### 10.5 JavaScript ↔ 서버 통신 원칙

- 비동기 호출 최소화. 가능하면 full‑page POST → Redirect → GET.
- 세션 만료 시 서버가 로그인 페이지로 리다이렉트.
- 프론트 캐싱(localStorage) 및 폴링 기능 제거.
- 이벤트 위임 최소화, 필요 시 이벤트 Listener 1회 바인딩.

---

(계속 수정 중이며, 본 공유 버전은 실제 배포 버전과 다른 **샘플 버전**입니다. 참고 부탁드립니다.)

