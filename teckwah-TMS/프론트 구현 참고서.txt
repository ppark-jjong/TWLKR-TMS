# 현재 백엔드 구현 명세서

백엔드 코드 검토 결과, 다음과 같은 구현 사항을 확인했습니다. 이 명세서를 기준으로 프론트엔드 연동을 진행해야 합니다.

## 1. 인증 및 세션 관리

### 1.1 인증 메커니즘
- **세션 기반 인증**: `SessionMiddleware`를 통해 구현
- **세션 쿠키 속성**: 
  - **유효기간**: `SESSION_EXPIRE_HOURS` 환경변수 (시간 단위)
  - **쿠키 이름**: `session`
  - **HTTPS**: 프로덕션에서는 활성화 필요
  - **SameSite**: `lax` 모드로 설정
- **세션 정리**: `initialize_session_cleanup` 호출로 만료된 세션 정리

### 1.2 인증 흐름
- **로그인 경로**: `/login` (POST)
- **데이터 구조**: `{"login_id": string, "password": string, "remember": boolean}`
- **리턴값**: 성공 시 `{"success": true, "message": string}`
- **로그아웃 경로**: `/logout` (GET/POST)
- **인증 실패 처리**: 401 응답 또는 로그인 페이지 리다이렉트

### 1.3 세션 검증 및 미들웨어
- **inject_user_middleware**: 모든 요청에 사용자 정보 주입
- **인증 검증**: 보호된 경로 접근 시 자동으로 세션 확인 후 인증 안된 경우 `/login`으로 리다이렉트
- **사용자 정보**: 세션에 `user` 키로 저장 (`user_id`, `user_name`, `user_role` 등 포함)

## 2. 권한 관리

### 2.1 권한 종류
- **USER**: 일반 사용자
- **ADMIN**: 관리자

### 2.2 권한별 기능 제한
- **USER 권한**:
  - 대시보드, 인수인계 페이지 접근 가능
  - 주문 조회, 생성, 락 확보시 수정 가능
  - 상태 변경 제한: `대기→진행`, `진행→완료/이슈/취소`만 가능
  - 본인이 작성한 인수인계만 수정 가능

- **ADMIN 권한**:
  - 대시보드, 인수인계, 사용자관리 페이지 모두 접근 가능
  - 전체 데이터 완전 접근 (락 확보 시)
  - 모든 상태 간 자유로운 전이 가능 (역행/롤백 포함)
  - 모든 인수인계 수정 가능
  - 주문 및 사용자 삭제 가능
  - 공지사항 생성/수정/삭제 가능

### 2.3 권한 검증 메커니즘
- **API 함수**: `get_current_user`, `get_admin_user` 의존성 함수
- **권한 확인 로직**: 각 API에서 `current_user.get("user_role")` 검증
- **삭제 기능**: 명시적으로 `user_role == "ADMIN"` 확인 후 허용

## 3. 락(Lock) 메커니즘

### 3.1 락 구현 방식
- **락 필드**: `update_by`, `update_at` 필드 사용
- **타임아웃**: 5분 (300초)
- **락 확인 API**: `/lock/{dashboard_id}` (GET)
- **응답 구조**: `{"locked": boolean, "owner": string?, "editable": boolean}`

### 3.2 락 처리 로직
- **락 획득**: 데이터 수정 전 자동으로 락 확인 및 획득 시도
- **락 충돌**: 이미 락이 있으면 HTTP 403 또는 에러 응답 반환
- **자동 해제**: 작업 완료 후 락 자동 해제
- **타임아웃**: 마지막 업데이트 시간으로부터 5분 후 자동 만료

## 4. API 엔드포인트

### 4.1 인증 관련 API
- **GET /login**: 로그인 페이지 렌더링
- **POST /login**: 로그인 처리
- **GET/POST /logout**: 로그아웃 처리 (세션 삭제)

### 4.2 대시보드(주문) 관련 API
- **GET /dashboard**: 대시보드 페이지 렌더링
- **GET /orders**: 주문 목록 조회
  - **필터 파라미터**: `start_date`, `end_date`, `status`, `department`, `warehouse`, `page`, `page_size`
  - **응답**: `{"success": true, "message": string, "data": Array, "pagination": Object, "stats": Object}`
- **GET /search**: 주문번호로 검색
  - **파라미터**: `order_no`, `page`, `page_size`
  - **응답**: `{"success": true, "message": string, "data": Array, "pagination": Object, "stats": Object}`
- **GET /orders/{dashboard_id}**: 주문 상세 조회
  - **응답**: 주문 상세 데이터 객체
- **POST /orders**: 주문 생성
  - **요청**: 주문 생성 데이터 (DashboardCreate 스키마)
  - **응답**: `{"success": true, "message": string, "id": number}`
- **PUT /orders/{dashboard_id}**: 주문 업데이트
  - **요청**: 주문 업데이트 데이터 (DashboardUpdate 스키마)
  - **응답**: `{"success": true, "message": string, "id": number}`
- **POST /status**: 상태 변경 API
  - **요청**: `{"ids": number[], "status": string}`
  - **응답**: `{"success": true, "message": string, "results": Array}`
- **POST /driver**: 기사 배정 API
  - **요청**: `{"ids": number[], "driver_name": string, "driver_contact": string}`
  - **응답**: `{"success": true, "message": string, "results": Array}`
- **POST /delete**: 주문 삭제 API (관리자 전용)
  - **요청**: `{"ids": number[]}`
  - **응답**: `{"success": true, "message": string, "results": Array}`
- **GET /lock/{dashboard_id}**: 락 상태 확인 API
  - **응답**: `{"locked": boolean, "owner": string?, "editable": boolean}`

### 4.3 인수인계 관련 API
- **GET /handover**: 인수인계 페이지 렌더링
- **GET /handover/list**: 인수인계 목록 조회
  - **필터 파라미터**: `priority`, `type`, `keyword`, `page`, `page_size`
  - **응답**: `{"success": true, "message": string, "data": Array, "pagination": Object}`
- **GET /handover/{handover_id}**: 인수인계 상세 조회
  - **응답**: 인수인계 상세 데이터 객체
- **POST /handover**: 인수인계 생성
  - **요청**: 인수인계 생성 데이터
  - **응답**: `{"success": true, "message": string, "id": number}`
- **PUT /handover/{handover_id}**: 인수인계 업데이트
  - **요청**: 인수인계 업데이트 데이터
  - **응답**: `{"success": true, "message": string, "id": number}`
- **POST /handover/{handover_id}/confirm**: 인수인계 확인 처리
  - **응답**: `{"success": true, "message": string}`
- **POST /handover/{handover_id}/delete**: 인수인계 삭제 (작성자/관리자)
  - **응답**: `{"success": true, "message": string}`

### 4.4 사용자 관리 API (관리자 전용)
- **GET /users**: 사용자 관리 페이지 렌더링
- **GET /users/list**: 사용자 목록 조회
  - **필터 파라미터**: `role`, `department`, `keyword`, `page`, `page_size`
  - **응답**: `{"success": true, "message": string, "data": Array, "pagination": Object}`
- **POST /users**: 사용자 생성
  - **요청**: 사용자 생성 데이터
  - **응답**: `{"success": true, "message": string, "id": number}`
- **PUT /users/{user_id}**: 사용자 업데이트
  - **요청**: 사용자 업데이트 데이터
  - **응답**: `{"success": true, "message": string, "id": string}`
- **POST /users/{user_id}/delete**: 사용자 삭제
  - **응답**: `{"success": true, "message": string}`

## 5. 데이터 스키마

### 5.1 주문(Dashboard) 스키마
```
{
  "dashboard_id": number,         // 주문 ID (PK)
  "order_no": string,            // 주문번호 (필수)
  "type": string,                // 유형: DELIVERY(배송) / RETURN(회수) (필수)
  "status": string,              // 상태: WAITING(대기) / IN_PROGRESS(진행) / COMPLETE(완료) / ISSUE(이슈) / CANCEL(취소) (필수)
  "department": string,          // 부서: CS / HES / LENOVO (필수)
  "warehouse": string,           // 창고: SEOUL / BUSAN / GWANGJU / DAEJEON (필수)
  "sla": string,                 // SLA (필수)
  "eta": string,                 // ETA 일자 (필수, YYYY-MM-DD HH:MM 형식)
  "create_time": string,         // 생성 시간 (자동 생성, YYYY-MM-DD HH:MM 형식)
  "depart_time": string,         // 출발 시간 (IN_PROGRESS 상태로 변경시 자동 생성)
  "complete_time": string,       // 완료 시간 (COMPLETE 상태로 변경시 자동 생성)
  "postal_code": string,         // 우편번호 (필수, 5자리)
  "city": string,                // 도시 (선택)
  "county": string,              // 군/구 (선택)
  "district": string,            // 지역 (선택)
  "region": string,              // 권역 (선택)
  "address": string,             // 주소 (필수)
  "customer": string,            // 고객명 (필수)
  "contact": string,             // 연락처 (선택)
  "driver_name": string,         // 기사명 (선택)
  "driver_contact": string,      // 기사 연락처 (선택)
  "update_by": string,           // 마지막 수정자 (락 소유자)
  "update_at": string,           // 마지막 수정 시간 (YYYY-MM-DD HH:MM 형식)
  "remark": string,              // 메모 (선택)
  "is_locked": boolean,          // 락 상태
}
```

### 5.2 인수인계(Handover) 스키마
```
{
  "handover_id": number,         // 인수인계 ID (PK) 
  "title": string,               // 제목 (필수)
  "type": string,                // 유형: NOTICE(공지) / HANDOVER(인수인계) (필수)
  "priority": string,            // 우선순위: HIGH / MEDIUM / LOW (필수)
  "content": string,             // 내용 (필수)
  "created_by": string,          // 작성자 (자동 생성)
  "created_at": string,          // 작성 시간 (자동 생성, YYYY-MM-DD HH:MM 형식)
  "update_by": string,           // 마지막 수정자
  "update_at": string,           // 마지막 수정 시간 (YYYY-MM-DD HH:MM 형식)
  "confirmations": Array         // 확인 목록: {user: string, confirmed_at: string}
}
```

### 5.3 사용자(User) 스키마
```
{
  "user_id": string,             // 사용자 ID (PK)
  "login_id": string,            // 로그인 ID (unique)
  "user_name": string,           // 사용자 이름
  "password_hash": string,       // 암호화된 비밀번호 (내부용)
  "department": string,          // 부서: CS / HES / LENOVO
  "user_role": string,           // 권한: USER / ADMIN
  "is_active": boolean,          // 활성 상태
  "last_login": string,          // 마지막 로그인 시간
  "created_at": string           // 계정 생성 시간
}
```

## 6. 보안 및 기타 고려사항

### 6.1 입력 유효성 검증
- **우편번호**: 4자리 입력 시 앞에 0을 자동으로 추가하여 5자리로 만듦
- **날짜 형식**: KST(한국 표준시, UTC+9) 기준으로 YYYY-MM-DD HH:MM 형식 사용

### 6.2 오류 처리
- **오류 응답 형식**: `{"success": false, "message": string, "error_code": number?}`
- **Status Code**: 400(잘못된 요청), 401(인증 필요), 403(권한 없음), 404(찾을 수 없음), 500(서버 오류)

### 6.3 리다이렉션
- **인증 필요 URL 접근 시**: `/login?return_to={original_url}` 형태로 리다이렉트
- **대시보드 진입**: 인증 성공 후 `/dashboard`로 리다이렉트

### 6.4 CORS 설정
- **허용 Origin**: 환경 변수 `ALLOWED_ORIGINS`로 설정된 도메인만 허용
- **자격 증명**: `allow_credentials=True` 설정으로 쿠키 전송 허용

### 6.5 캐싱 정책
- **자주 사용하는 데이터**: 클라이언트에서 localStorage 사용 가능
- **세션 캐싱**: 서버 측에서 세션 정보 캐싱 및 주기적 정리

## 7. 구현 시 주의사항

1. 모든 API 요청에 CSRF 토큰이 필요하지 않음 (세션 기반 인증)
2. 백엔드에서는 SSR로 초기 페이지를 렌더링함
3. CSS 및 JavaScript는 `/static` 경로에서 제공됨
4. 상태 변경 시 반드시 권한 및 락 확보 여부 체크
5. 우편번호 처리 시 4자리 → 5자리 자동 변환 로직 필요
6. 모든 시간은 KST 기준으로 처리
7. 프론트엔드에서 요청 자동 재시도 로직 사용 금지 (명세서 규칙)

지속적인 백엔드 연동 시 이 명세서를 기준으로 개발하면 됩니다.