# 대시보드 기능 종합 점검 및 개선

먼저 대시보드 템플릿과 JS 파일을 확인하고, 상세 동작 명세서에 따른 기능 구현 상태를 점검하겠습니다.

## 1. 템플릿 파일 확인

# 대시보드 기능 종합 검토 및 개선 사항

대시보드 기능의 백엔드 로직부터 프론트엔드 템플릿까지 종합적으로 검토한 결과, 몇 가지 문제점과 개선이 필요한 부분을 발견했습니다. 아래에 상세 분석과 개선 방안을 정리했습니다.

## 1. 기본 구조 및 작동 방식 검토

### 정상 작동 확인 부분:
- 대시보드 초기 로드 시 오늘 날짜 기준으로 주문 데이터를 조회합니다.
- 주문 데이터는 서버 측에서 ETA 기반으로 필터링되어 가져오며, 클라이언트에서 추가 필터링이 가능합니다.
- 행 클릭 시 주문 상세 정보를 모달로 표시합니다.
- 주문 생성, 수정, 상태 변경, 배차 처리, 삭제 기능이 구현되어 있습니다.
- 행 단위 락 관리가 구현되어 동시 편집을 방지합니다.

### 문제점 및 개선 필요 사항:

1. **JavaScript 로드 문제**
   - `dashboard.js`에서 모듈을 동적으로 로드하는 방식이 구현되어 있으나, 실제 템플릿에서는 인라인 스크립트로 구현되어 있어 모듈 로드가 작동하지 않습니다.
   - 인라인 스크립트와 외부 모듈 스크립트가 혼재되어 있어 충돌이 발생할 수 있습니다.

2. **필드명 불일치**
   - 백엔드 모델과 API 응답 간 필드명 불일치(`update_by` vs `updatedBy`) 문제가 있습니다.
   - 프론트엔드 템플릿에서 이러한 불일치를 수정하지 않고 사용하고 있습니다.

3. **락 관리 불일치**
   - 상태 변경과 배차 처리에서 락 해제 방식(`order.is_locked = False`)이 일관성 없이 사용되고 있습니다.
   - 주문 수정에서는 `release_lock` 함수를 사용하지만 다른 곳에서는 직접 필드를 수정합니다.

4. **레이아웃 구조 및 스타일링 일관성 부족**
   - 일부 UI 요소에 대한 스타일이 일관되지 않게 적용되어 있습니다.

## 2. 각 핵심 기능별 상세 분석

### 2.1 행 단위 락 및 다중 선택 로직

#### 현재 동작:
- 행 선택 시 체크박스로 다중 선택 가능합니다.
- 선택된 행은 상태 변경, 배차 처리, 삭제 액션을 수행할 수 있습니다.
- 각 행에 대해 락 획득을 시도하고, 락 획득에 실패한 경우 해당 행을 처리에서 제외합니다.
- 락 획득 성공한 행에 대해서만 요청 작업을 수행합니다.

#### 문제점:
1. 장시간 수정 시 락 자동 해제 미구현: 백엔드에서 시간 기반 락 타임아웃 로직은 있으나 UI에 자동 해제 알림이 없습니다.
2. 다중 선택 시 락 획득 과정에서 사용자 피드백이 지연됩니다.
3. 다중 행 처리 시 일부 행만 실패했을 때의 상세 피드백이 부족합니다.

#### 개선 방안:
```javascript
// 락 상태 확인 중에 로딩 표시 추가
document.getElementById('submitStatusBtn').innerHTML = `<i class="fas fa-spinner fa-spin"></i> 락 확인 중...`;
document.getElementById('submitStatusBtn').disabled = true;

// 락 확인 완료 후 버튼 복원
document.getElementById('submitStatusBtn').innerHTML = `확인 (<span id="statusChangeCount">${orderIds.length}</span>건)`;
document.getElementById('submitStatusBtn').disabled = false;

// 락 소유자 정보와 함께 명확한 메시지 제공
let message = '다음 주문은 다른 사용자가 작업 중이어서 상태를 변경할 수 없습니다:\n\n';
lockedIds.forEach((item) => {
  message += `- 주문 ID ${item.id}: ${item.lockedBy}님이 작업 중 (${item.lockedAt})\n`;
});
```

### 2.2 주문 생성/수정 기능

#### 현재 동작:
- 주문 생성 시 필수 필드 검증이 이루어집니다.
- 우편번호 4자리인 경우 앞에 '0'을 추가하는 로직이 있습니다.
- 주문 수정 시 행 단위 락 획득 후 수정이 이루어집니다.
- 수정 후 락이 자동 해제됩니다.

#### 문제점:
1. 우편번호 4자리 자동 보완이 백엔드와 프론트엔드 양쪽에서 중복 구현되어 있습니다.
2. ETA 날짜 형식 변환이 일관되지 않게 처리됩니다.
3. 주문번호 중복 검사가 미구현되어 있습니다.

#### 개선 방안:
```javascript
// 백엔드 validator 방식으로 일원화
@validator('postal_code')
def validate_postal_code(cls, v):
    """우편번호 검증 및 자동 보완 (4자리 → 5자리)"""
    if v and len(v) == 4:
        v = '0' + v
    if v and len(v) != 5:
        raise ValueError('우편번호는 5자리여야 합니다.')
    return v

// 주문번호 중복 검사 로직 추가
async function createNewOrder() {
  // 기존 코드 생략...
  
  // 주문번호 중복 확인 (추가)
  const orderNo = document.getElementById('createOrderNo').value;
  try {
    const checkResult = await fetch(`/dashboard/api/check-order-no?orderNo=${orderNo}`);
    const checkData = await checkResult.json();
    
    if (checkData.exists) {
      alert('이미 존재하는 주문번호입니다.');
      return;
    }
    
    // 주문 생성 코드 계속...
  } catch (error) {
    console.error('주문번호 중복 확인 오류:', error);
  }
}
```

### 2.3 행 클릭 시 데이터 로드

#### 현재 동작:
- 행 클릭 시 해당 행의 ID를 이용해 상세 정보 API를 호출합니다.
- 상세 정보를 모달로 표시합니다.
- 수정 버튼 클릭 시 수정 모드로 전환됩니다.

#### 문제점:
1. 필드명 불일치 문제로 일부 데이터가 제대로 표시되지 않을 수 있습니다.
2. 모든 필드에 대해 일관된 null 처리가 되어 있지 않습니다.
3. 상세 정보와 수정 폼 간의 필드 누락이 있을 수 있습니다.

#### 개선 방안:
```javascript
// 모든 필드에 getattr 사용하여 일관성 확보
const detailHtml = `
  <div class="detail-container">
    <h3>주문 #${data.orderNo || id}</h3>
    <div class="detail-grid">
      <div class="detail-item">
        <label>상태:</label>
        <span>${data.statusLabel || data.status || '-'}</span>
      </div>
      <!-- 다른 필드들도 유사하게 처리 -->
    </div>
  </div>
`;

// API 응답 및 서비스 로직에서 필드명 일치시키기
orderData = {
  "dashboardId": order.dashboard_id,
  "orderNo": order.order_no,
  // ...
  "updatedBy": order.update_by,  // update_by로 수정
  "updateAt": order.update_at,
  // ...
}
```

## 3. 종합 개선 권장사항

### 3.1 백엔드 개선사항

1. **필드명 일관성 확보**
```python
# dashboard_model.py 필드명과 schema 필드명 일치시키기
class DashboardResponse(DashboardBase):
    """주문 응답 스키마"""
    dashboard_id: int = Field(..., description="대시보드 ID", alias="dashboardId")
    # ...
    update_by: Optional[str] = Field(None, description="마지막 업데이트 사용자", alias="updatedBy")
    update_at: Optional[datetime] = Field(None, description="마지막 업데이트 시간", alias="updateAt")
    # ...
```

2. **락 관리 일관성 개선**
```python
# change_status 함수 내 락 해제 부분 수정
# 변경 전
order.is_locked = False

# 변경 후
release_lock(db, "dashboard", dashboard_id, user_id)
```

3. **주문번호 중복 검사 추가**
```python
@router.get("/check-order-no")
async def check_order_no_exists(
    order_no: str,
    db: Session = Depends(get_db),
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """주문번호 중복 확인 API"""
    exists = db.query(Dashboard).filter(Dashboard.order_no == order_no).first() is not None
    return {"exists": exists}
```

### 3.2 프론트엔드 개선사항

1. **JavaScript 모듈 로드 방식 수정**
```html
<!-- dashboard.html -->
{% block extra_js %}
<script src="/static/js/common/utils.js"></script>
<script src="/static/js/common/api.js"></script>
<script src="/static/js/common/modal.js"></script>
<script src="/static/js/dashboard/filter.js"></script>
<script src="/static/js/dashboard/table.js"></script>
<script src="/static/js/dashboard/actions.js"></script>
<script src="/static/js/dashboard/init.js"></script>
{% endblock %}
```

2. **락 관리 UI 개선**
```javascript
// 락 상태 확인 및 표시 함수
async function checkAndDisplayLockStatus(orderId) {
  const lockStatus = await Api.lockOrder(orderId);
  
  if (!lockStatus.editable) {
    // 사용자 친화적인 락 정보 표시
    const lockInfo = document.createElement('div');
    lockInfo.className = 'lock-info';
    lockInfo.innerHTML = `
      <div class="lock-icon"><i class="fas fa-lock"></i></div>
      <div class="lock-message">
        <strong>${lockStatus.lockedBy}</strong>님이 현재 편집 중입니다.
        <br><small>락 획득 시간: ${new Date(lockStatus.lockedAt).toLocaleString()}</small>
      </div>
    `;
    
    document.getElementById('orderDetailContent').prepend(lockInfo);
    document.getElementById('editOrderBtn').disabled = true;
  }
}
```

3. **에러 처리 및 사용자 피드백 개선**
```javascript
// 일괄 처리 결과 표시 개선
function showProcessingResults(results) {
  const successCount = results.filter(r => r.success).length;
  const failCount = results.length - successCount;
  
  let message = `처리 결과: ${successCount}건 성공, ${failCount}건 실패`;
  
  if (failCount > 0) {
    message += '\n\n실패한 항목:';
    results.filter(r => !r.success).forEach(item => {
      message += `\n- 주문 ID ${item.id}: ${item.message}`;
    });
  }
  
  if (typeof Swal !== 'undefined') {
    Swal.fire({
      title: '처리 완료',
      html: message.replace(/\n/g, '<br>'),
      icon: successCount > 0 ? 'success' : 'warning',
      confirmButtonText: '확인'
    });
  } else {
    alert(message);
  }
}
```

## 4. 결론

대시보드 기능은 상세 동작 명세서의 요구사항을 대체로 충족하고 있으나, 일부 불일치와 개선이 필요한 부분이 있습니다. 위에서 제안한 개선 사항을 적용하면 기능의 안정성과 사용자 경험이 크게 향상될 것입니다.

특히 JavaScript 로딩 문제는 여러 기능에 영향을 미치므로 최우선적으로 해결해야 하며, 필드명 일관성 문제와 락 관리 일관성 문제도 중요한 개선 대상입니다. 이러한 기본적인 문제를 해결한 후에 더 세부적인 UI/UX 개선을 진행하는 것이 좋습니다.

모든 개선 사항을 적용한 후 테스트하여 각 기능이 상세 동작 명세서에 맞게 정확히 작동하는지 확인해야 합니다.