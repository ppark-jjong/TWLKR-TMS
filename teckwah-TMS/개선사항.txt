# 수정된 프로젝트 개선 계획서

## 1. API 일관성 문제 (상세 검토)

### 1.1. 각 서비스별 API 엔드포인트 비일관성

#### 대시보드 API
- **백엔드 라우트**: `/dashboard`, `/dashboard/{order_id}`, `/dashboard/status-multiple`
- **프론트엔드 호출**: 
  - `DashboardService.js`에서 `/dashboard` 호출
  - 응답 형태: `{ success: true, message: "...", data: {...} }`

#### 인수인계 API
- **백엔드 라우트**: `/handover`, `/handover/{handover_id}`
- **프론트엔드 호출**: 
  - `HandoverService.js`에서 `/handover` 호출
  - 응답 형태: `{ success: true, message: "...", data: {...} }`

#### 시각화 API
- **백엔드 라우트**: `/visualization/stats`
- **프론트엔드 호출**: 
  - `VisualizationService.js`에서 `/visualization/stats` 호출
  - 응답 처리가 일관되지 않음

#### 사용자 관리 API
- **백엔드 라우트**: `/users`
- **프론트엔드 호출**: 
  - `UserService.js`에서 `/users` 호출
  - 오류 처리 방식이 다른 API와 다름

#### 인증 API
- **백엔드 라우트**: `/auth/login`, `/auth/logout`, `/auth/me`
- **프론트엔드 호출**: 
  - `AuthService.js`에서 `/auth/*` 호출
  - 응답 처리 방식이 각각 다름

### 1.2. API 매핑 및 호출 불일치
- **문제**: 각 서비스 파일마다 API 호출 방식과 응답 처리가 일관되지 않음
- **개선 방향**:
  - 모든 API 호출 패턴 통일
  - 모든 서비스 파일에서 동일한 응답 구조 및 오류 처리 사용

## 2. Postal Code 처리 자동화

### 2.1. 현재 구현 문제
- **현재 상태**: `PostalCodeService.js`가 있지만 직접 호출할 필요 없음
- **문제**: 서버/DB 레벨에서 자동 처리되어야 하나 현재 수동 호출 패턴 존재

### 2.2. 개선 방향
- `PostalCodeService.js` 파일을 삭제하거나 비활성화
- 백엔드의 `DashboardService`에서 우편번호 처리 로직 통합
- `order_data` 저장/업데이트 시 자동으로 우편번호 포맷팅 처리

## 3. 백엔드 API 로직 오류

### 3.1. Dashboard API 참조 오류
- **문제**: `/dashboard/status-multiple` 엔드포인트에서 `order_ids` 변수 오류
- **개선 방향**: `status_data.order_ids` 참조로 수정

### 3.2. Auth API 응답 처리
- **문제**: 쿠키 설정 및 응답 생성 방식 오류 가능성
- **개선 방향**: FastAPI 표준 응답 메커니즘 사용

## 4. 프론트엔드 버튼 동작 및 클릭 이벤트 문제

### 4.1. 대시보드 페이지 기능
- **문제**: 
  - 데이터 로드 후 상태 업데이트 불일치
  - 버튼 클릭 핸들러 미작동
- **개선 방향**:
  - API 호출 성공/실패 모두 일관된 상태 업데이트 구현
  - 이벤트 버블링 및 전파 방지 코드 확인

### 4.2. 인수인계 페이지 기능
- **문제**: 
  - 데이터 로드는 되나 UI 업데이트 안됨
  - 일부 버튼 클릭 이벤트 무시됨
- **개선 방향**:
  - UI 상태 업데이트 로직 수정
  - 이벤트 핸들러 바인딩 확인

### 4.3. 시각화 페이지 기능
- **문제**:
  - 데이터 형식 불일치로 차트 렌더링 실패
  - 필터 적용 시 API 호출은 되나 결과 반영 안됨
- **개선 방향**:
  - 데이터 포맷 일관성 확보
  - 필터 적용 후 상태 업데이트 로직 수정

## 5. UI 일관성 및 디자인 요구사항

### 5.1. 전체 화이트 톤 디자인
- **문제**: 
  - 사이드바 및 메뉴가 다크 모드 사용
  - 전체적인 색상 일관성 부족
- **개선 방향**:
  - MainLayout.js의 테마 설정을 화이트 톤으로 통일
  - 콘텐츠 영역 배경색 및 메뉴 스타일 수정

### 5.2. 로고 위치 조정
- **문제**: 로고가 상단에 위치하여 요구사항과 불일치
- **개선 방향**: 로고를 사이드바 하단으로 이동

## 6. 로깅 시스템 최적화

### 6.1. 과도한 로그
- **문제**: 불필요한 로그로 주요 이슈 파악 어려움
- **개선 방향**: 
  - 핵심 정보 위주 로깅으로 변경
  - 서비스 로직 주요 지점에만 로그 유지

## 7. 통합 테스트 및 검증 계획

### 7.1. API 일관성 검증
- 모든 API 호출이 일관된 URL 패턴과 응답 구조를 사용하는지 확인
- 모든 페이지의 데이터 로드 및 처리 방식 통일성 확인

### 7.2. 기능 테스트
- 각 페이지의 모든 버튼 및 상호작용 요소 작동 확인
- CRUD 작업 전체 사이클 테스트

### 7.3. UI 검증
- 화이트 톤 디자인 적용 검증
- 로고 위치 확인 및 모바일/데스크탑 레이아웃 테스트

이 개선 계획은 불필요한 postal_code API 사용을 제거하고, 각 API 엔드포인트의 일관성을 강화하며, 버튼 동작 및 이벤트 처리 문제를 해결하는 데 중점을 둡니다. 모든 수정은 프로젝트 규칙을 준수하며 과도한 설계 없이 실용적인 방식으로 진행됩니다.