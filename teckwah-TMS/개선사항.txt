# 프로젝트 개선 계획서

## 1. 프론트엔드 API 및 데이터 연동 문제

### 1.1. API 경로 매핑 문제 (frontend/src/services/api.js)
- **문제**: URL 매핑 로직이 불필요하게 복잡하고 `/postal-codes` 경로가 누락됨
- **개선 방향**: 
  - 불필요한 자기 자신에 대한 매핑 제거 또는 간소화
  - `/postal-codes` 경로 추가

### 1.2. 비일관적인 오류 처리 (모든 서비스 파일)
- **문제**: 서비스 파일마다 오류 처리 방식과 반환 형식이 다름
- **개선 방향**:
  - 중앙화된 오류 처리 방식으로 통일
  - API 응답 구조에 맞춘 일관된 리턴 형식 사용

### 1.3. 데이터 변환 일관성 문제 (frontend/src/services/api.js)
- **문제**: snake_case → camelCase 변환 과정에 일관성 부족
- **개선 방향**:
  - 데이터 변환 로직 강화 및 예외 처리 추가
  - 가능하면 라이브러리(예: humps) 사용 고려

## 2. 백엔드 API 로직 오류

### 2.1. 참조 오류 (backend/routes/dashboard.py)
- **문제**: `status_data.order_ids` 대신 존재하지 않는 `order_ids` 변수 참조
- **개선 방향**: 올바른 변수명으로 수정

### 2.2. 응답 객체 생성 오류 (backend/routes/auth.py)
- **문제**: Response 객체에 직접 JSON 문자열화 처리 방식 사용
- **개선 방향**: FastAPI의 JSONResponse 활용으로 변경

### 2.3. SPA 미들웨어 복잡성 (backend/main.py)
- **문제**: HTTP 미들웨어가 너무 복잡하고 중첩 조건문이 많음
- **개선 방향**: 
  - 로직 단순화 및 함수 분리
  - 인증 검사 로직 간소화

## 3. 로깅 시스템 과도한 사용

### 3.1. 과도한 로깅 (모든 백엔드 라우트 파일)
- **문제**: 너무 많은 DEBUG/INFO 로그가 섞여있어 중요 정보 식별 어려움
- **개선 방향**:
  - 핵심 진입점/종료점 로그만 유지
  - 에러 상황 로그는 유지하되 과도한 정보 로깅 제거
  - 로그 레벨 적절히 조정 (DEBUG와 INFO 구분)

### 3.2. 데이터베이스 세션 로깅 (backend/database.py)
- **문제**: 모든 DB 세션에 과도한 UUID 및 로그 생성
- **개선 방향**: 필요한 트랜잭션 정보만 로깅하도록 간소화

## 4. 인증 시스템 개선

### 4.1. 인증 컨텍스트 복잡성 (frontend/src/contexts/AuthContext.js)
- **문제**: 중첩 조건문과 과도한 체크 로직으로 가독성 저하
- **개선 방향**: 
  - 인증 체크 로직 단순화
  - 중복 코드 제거 및 함수화

### 4.2. 세션 관리 코드 (backend/utils/security.py)
- **문제**: 메모리 기반 세션 관리에 불필요한 메타데이터
- **개선 방향**: 꼭 필요한 세션 정보만 유지하도록 간소화

## 5. 테마 및 UI 일관성

### 5.1. 레이아웃 디자인 (frontend/src/components/layout/MainLayout.js)
- **문제**: 화이트 톤으로 변경 및 로고 위치 조정 요구사항 미적용
- **개선 방향**: 
  - 전체 테마를 화이트 톤으로 변경
  - 로고 위치 하단으로 이동

## 6. 버튼 기능 및 클릭 동작 복구

### 6.1. 대시보드 페이지 기능
- **문제**: 버튼 클릭 시 API 호출은 되나 적절한 응답 처리 부재
- **개선 방향**: 
  - 클릭 핸들러 및 상태 업데이트 로직 수정
  - 응답 결과에 따른 UI 업데이트 추가

### 6.2. 인수인계 페이지 기능
- **문제**: 데이터 로드 및 기능 미작동
- **개선 방향**: 
  - API 응답 처리 코드 수정
  - 클릭 이벤트 핸들러 동작 확인 및 수정

이상의 문제점을 해결하면 프로젝트의 API 연동, 버튼 동작, 인증 시스템 및 데이터 처리가 정상화되어 사용자 경험이 크게 향상될 것입니다. 각 수정사항은 프로젝트 규칙을 준수하며 과도한 설계나 복잡성을 최소화하는 방향으로 진행해야 합니다.