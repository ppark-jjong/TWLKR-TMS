1. 패키지 설치 및 환경 설정 명령어

pip install -r requirements.txt           # 의존성 패키지 설치
python -m pip install --upgrade pip       # pip 업그레이드
python -m venv venv                       # 가상 환경 생성
venv\Scripts\activate                     # 가상 환경 활성화
deactivate                                # 가상 환경 비활성화

C:\MyMain\config\Scripts\activate.ps1 #수동 활성화

======================================================================================
2. Docker 및 Docker Compose 명령어

docker-compose down                                   # 기존 컨테이너 중지 및 제거
docker-compose build                                  # Docker 이미지 빌드
docker-compose -f docker/DockerFile build --no-cache  # Docker 이미지 빌드 (캐시 미사용)
docker-compose up                                     # Docker 컨테이너 실행
docker-compose up -d                                  # Docker 컨테이너 실행 (백그라운드 모드)
docker-compose -f docker/docker-compose.yaml up -d    # 특정 compose 파일 실행

docker-compose ps                                     # 실행 상태 확인
docker images                                         # 도커 이미지 목록 확인
docker-compose logs -f                                # 실시간 로그 확인
 
docker exec -it <container_name> /bin/bash            # 컨테이너 내부 접근
docker cp test-kafka.py <container_name>:/path/to/new_directory/  # 컨테이너에 파일 복사

# 컨테이너 다운 후 재빌드
docker-compose -f docker-compose-dev.yaml down
docker-compose -f docker-compose-dev.yaml up --build

docker-compose -f docker-compose-dev.yaml up --build frontend  #특정서비스만 재빌드
docker-compose build --no-cache frontend


코드와 로직만 변경되었다면, 일반적으로는 굳이 캐시를 전부 삭제하지 않고 
docker-compose down && docker-compose up --build -d 정도의 프로세스로도 충분합니다.

의존성이나 기반 이미지가 바뀐 경우, 혹은 캐시 꼬임이 의심된다면 캐시를 삭제하고 빌드
(예: docker builder prune -a 후 docker-compose build --no-cache)하는 편이 안전합니다.
docker system prune -f



---------------------------------------------------------------------------------------------------------------------------------------------------------
백엔드 컨테이너에 접속
docker-compose exec backend /bin/bash
docker exec -it main_project-backend-1 /bin/bash

컨테이너 내부에서 Python 스크립트 실행
python config/init_user.py create --user-id admin --password 1234 --authority manager

또는 한 줄 명령어로 직접 실행:
docker-compose exec backend python config/init_user.py create --user-id admin --password 1234 --authority manager

사용 가능한 명령어들:
# 기존 기능
python init_user.py create --user-id admin --password 1234 --authority manager
python init_user.py delete --user-id admin
python init_user.py list

# 새로운 비밀번호 재설정 기능
python init_user.py initiate-reset --user-id admin
python init_user.py reset-password --session-id [세션_ID] --password new_password


python -c "from config.settings import SessionLocal; db=SessionLocal(); db.execute('SELECT 1')"
python -c "from sqlalchemy import text; from config.settings import SessionLocal; db=SessionLocal(); db.execute(text('SELECT 1'))"





4. Redis 명령어
서버 실행
redis-server.exe

다른 포트로 실행
redis-server.exe --port 6380

포트번호로 포트 점유 확인
netstat -ano | find "8080"

netstat -ano

PID를 통해 프로세스 애플리케이션 확인
tasklist | findstr 8444

서버 종료 (포트 다운) 보통 PID를 봐야함
taskkill /PID 8444 /F






사용자 생성

python user_manager.py create --user-id john.doe --password 1234 --department CS --role user

사용자 삭제

python user_manager.py delete --user-id john.doe

사용자 목록 조회

python user_manager.py list
