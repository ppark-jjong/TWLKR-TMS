


프론트엔드 요구사항

백엔드에서 구축된 코드(api, 주고받는 데이터 형식)에 따라 데이터 송수신을 활용하고,
전체 디자인은 깔끔하고 유저 친화적인 디자인을 원해
** 또한 타입 오류, 유저 토큰 유지 오류, 기본 데이터 유지에 대한 오류들이 많이 생깁니다 이를 확실히 지정해주세요 **

1. 로그인 페이지
        로그인 백엔드 코드와 연동 되어야 해 또한 백엔드의 기능과 같이 움직여야 해
        세션, jwt 인증 관리도 백엔드 코드와 같이 연동 되어야 해
	로그인 페이지는 간단하고 깔끔하게 만들어
	logo.png가 public에 존재해 이를 활용해
2. 메인 페이지​ 는 dashboard 페이지야
3. 왼쪽 사이드 바 
        유저이름, 담당부서(user테이블의 user_department 정보)는 단순 텍스트로 띄우고
	배송현황(dashboard 기능 페이지로 ), 통계(visualization 기능 페이지), 로그아웃 이렇게 들어가게 만들어
	logo.png가 public에 존재해 이를 활용해

* 로그인 후 바로 dashboard 페이지를 적용하여 보여지는게 기본값 입니다.
4. dashboard 페이지
        - 테이블 형태의 배송 현황 리스트 깔끔한 디자인
	- 사이드 바에서 배송현황을 클릭하면 보여지는 페이지 이며 기본 요청 값에는 오늘 날짜를 넣어 요청 api를 해야합니다.
	- 리스트 조회는 무조건 날짜별 조회 밖에 안돼 또한 이 날짜 오회를 위해 맨 위에는 현재 선택된 날짜를 보여주고 YYYY-MM-DD 형식을 따라줘
	- 날짜를 클릭하면 작은 달력 컴포넌트를 띄워주고 여기서 날짜를 선택하면 해당 날짜에 맞는 api 요청을 해야해
	- 날짜는 시각화와 동일하게 1개월 전까지의 데이터 24시간 형식을 따라야해
        - 검색 CSR 형태로 가능
	- 부서별 필터링 기능(CSR형태)
	- 검색바 옆 필터 선택 드롭다운, 생성 버튼과 배차 버튼, 새로고침 버튼, 삭제 버튼 필요
        - 프론트에 테이블형태로 리스트업 될 예정입니다. (컬럼별 필터 기능과 오름차순 정렬도 필요 없습니다.)
	- 리스트 조회 api는 아래의 컬럼 순으로 순차적으로 보여줘야합니다. 또한 실제 보여지는 화면에서는 괄호안의 표기로 표현해주세요
		선택유무 컬럼 - 체크박스(이 컬럼의 제목은 없어도 됩니다), 
		type(종류), department(부서), warehouse(출발 허브), driver_name (담당 기사), order_no(order_no), 
		create_time(생성시간), depart_time(출발 시각)eta(ETA : YYYY-MM-DD HH:MM 형식),
 		status(배송 상태), region(도착 지역)
	- 리스트에서 새롭게 데이터를 받을 때 마다 status 데이터를 확인 후 행마다 색을 유저 친화적으로 바꿔야 합니다.
		status == waiting : 일반 회색
		status == in_progress : 노란색
		complete == 초록색
		issue == 빨간색
	- 리스트에서 status 데이터를 보여줄 때는 아래 조건에 따라 변형해서 보여주세요 (백엔드의 대문자 신경쓰세요)
		waiting => 대기
		in_progress => 진행
		complete => 완료
		issue => 이슈
	- 리스트 에서는 대기인 상태만 삭제, 배차가 가능해야합니다.
	- CSR 형태의 페이지 네이션과 필터링
		최대 50개 행을 볼 수 있고, 필터링이 있는 걸 유지하는 상태로 페이지 이동이 가능해야해
	- 스크롤 시 검색바에 해당하는 것들과 테이블의 첫컬럼 제목컬럼은 상단 고정으로 유지시켜 UX를 높여야해
	- 각 행들의 체크박스는 하나 이상을 클릭할 수 있고 클릭은 선택된 행이며 선택된 행은 UI/UX로 표현해주세요 
	  선택 유무 컬럼 체크박스를 활용해주세요
	- 하나이상의 체크 박스를 클릭하게 되면 기사할당과 삭제를 할 수 있어 해당 버튼은 그때 활성화 되어야 해
	- 배차 버튼을 누르면 백엔드에 기사 리스트를 조회하는 api를 보냄과 동시에 기사 모달창을 띄워
	- 기사 모달창에서는 드롭다운으로 현재 기사들을 선택 지정 할 수 있으며, 드롭다운에는 기사 리스트 조회시 받은 기사 리스트의
		driver_name을 보여주면 됩니다. 이 때 기타를 클릭하게 되면 driver_remark를 기입할 수 있게 해야합니다
	- 기사 모달창에서는 현재 선택된 order_no들을 보여줘야합니다.
	- 기사 모달창에서 확인과 취소가 있고 확인을 누르면 해당 dashboard에 driver_id와 같이 api 호출합니다.
	- 하나 이상의 체크박스로 선택된 dashboard는 삭제 버튼 클릭 시 삭제 요청을 보냅니다.
	- 대시보드 생성 버튼 클릭 시 생성 데이터를 입력 할 수 있는 모달창이 띄워져야합니다
		- 아래 컬럼이 무조건 입력 받아야 합니다. 각 명칭은 괄호안의 명칭을 사용해주세요 또한 db 길이 만큼의 공간과 길이를 확보하세요
		- type(종류), order_no(order_no), department(부서), warehouse(출발허브)
	 	sla(SLA), eta(ETA), postal_code(우편번호), address(도착주소), customer(수령인), contact(연락처), remark(메모)
		- 여기서 부서는 로그인 되어있는 user의 user_department를 값을 자동으로 입력합니다

	- 상세 정보 조회 api는 테이블 형태로 된 리스트에서 하나의 행을 클릭하면 
	  그 행의 dashboard 상세정보를 보여주는 모달창이 띄워질 예정입니다.
		- 아래 데이터들이 순차적으로 보여져야 합니다. 또한 실제 보여지는 화면에서는 괄호안의 표기 제목을 만들고 그에 맞는  데이터를 넣어주세요
		type(종류), department(부서), warehouse(출발 허브), driver_name(담당 기사), driver_contact(기사 연락처), 
		order_no(order_no), eta(ETA : YYYY-MM-DD HH:MM 형식), status(배송 상태), 
		create_time(접수 시각), depart_time(출발 시각), complete_time(완료 시각), address(주소),  distance(거리), 
		duration_time(예상 소요 시간), customer(수령인), contact(연락처), remark(메모)
	- 상세정보에서 status 데이터를 보여줄 때는 아래 조건에 따라 변형해서 보여주세요
		waiting => 대기
		in_progress => 진행
		complete => 완료
		issue => 이슈
	- 상세정보에서는 status를 변경할 수 있습니다. 변경에 맞게 api 요청을 해야합니다.
	- 상세정보에서는 remark를 변경할 수 있습니다. 변경에 맞게 api 요청을 해야합니다
	- 대시보드의 상태와 배차기능, remark 수정 기능 말고는 다른 수정 기능은 필요 없습니다.	

5. 시각화 페이지
	- 기본 api는 주제 명 : 현재 배송 상황 을 처음 클릭 했을 때 호출해야합니다.
	- 시각화 페이지는 상단의 옵션을 선택할 수 있는 드롭다운 메뉴가 있습니다.
	- 각 드롭다운 메뉴는 주제명을 보여주면 되고 주제 명은 아래 리스트 입니다.
			- 프론트에서 받은 기간을 기준으로 이 기간의 dashboard.eta 컬럼이 맞는 데이터를 가져와
			총 dashboard의 갯수와 status 별 갯수 및 비율 => 주제 명 : 배송 현황
			-프론트에서 받은 기간을 기준으로 이 기간의 dashboard.eta 컬럼이 맞는 데이터를 가져와 
			총 dashboard의 갯수에서 create_time을 24시 시간을 1시간 단위로 나눠 각 시간별 갯수 그래프 
			=> 주제 명 : 시간별 접수량
	- 각 메뉴의 2가지 기능은 무조건 날짜 기간을 선택해야하고 그에 맞게 그래프를 그려야 합니다
	- 날짜 기간을 선택할 수 있는 컴포넌트가 활성화 되어야 합니다. 또한 날짜는 오늘 기준으로 1개월 이내만 선택할 수 있고 벗어날 경우 알림을 띄우세요
	- 여기서의 날짜는 ETA 컬럼에 적용될 예정입니다. 날짜는 YYYY-MM-DD 형식입니다. 또한 시간값은 고정 00:00 입니다.
		각 주제는 아래의 그래프 형식으로 구현해주세요
			- 배송 현황 : 카드별 원그래프
			- 시간별 접수량 : 막대그래프(각시간별)


백엔드 요구사항은 아래와 같습니다.
api 부터 api 데이터 형식 (스키마), service 로직, repository, model 로직을 구축해주세요
구성하며 필요한 폴더는 저의 검토를 받아주세요
- db의 enum값을 잘 따르세요 (model은 변동 되면 안됩니다)

유저 생성 삭제
	backend/config/init_user.py 코드를 기반으로 서버 콘솔창에서 컨트롤 
	기타 다른 기능 필요 없음


로그인 기능

	user_id와 비밀번호를 받아 DB에서 검증
	비밀번호는 bcrypt 해싱 후 비교
	액세스 토큰 & 리프레시 토큰 발급

	액세스 토큰 (JWT): 짧은 만료시간 (15분)
	리프레시 토큰: 긴 만료시간 (7일) → DB에 저장
	로그인 성공 시 DB에 리프레시 토큰 저장
	API 요청 시 JWT 인증

	클라이언트가 API 호출 시 헤더에 액세스 토큰 포함
	액세스 토큰이 유효하면 요청 처리, 만료되었으면 리프레시 토큰 사용
	토큰 갱신 (Refresh Token 사용)

	액세스 토큰이 만료되면, 저장된 리프레시 토큰을 검증
	검증 성공 시 새로운 액세스 토큰 발급
	리프레시 토큰이 만료되었으면 재로그인 필요
	로그아웃 처리

	리프레시 토큰을 DB에서 삭제하여 무효화
	

	
대시보드 기능

	대시보드 생성 시 받는 데이터 (model 컬럼 기준)
		- type, order_no, department, warehouse, sla, eta, postal_code, address, customer, contact, remark + driver_remark
		- 여기서 department는 현재 로그인 되어있는 user의 department 값을 채워 넣으면 됩니다.
		- 또한 생성 시 쿼리 트리거  trg_dashboard_before_insert_postal 를 같이 실행 시켜야 하는점 참고하세요
	
	대시보드 삭제 기능
		- 대시보드를 삭제할 수 있어야합니다.
		- 대시보드의 상태와 배차기능, remark 수정 기능 말고는 다른 수정 기능은 필요 없습니다.
		- 수정 기능은 각 api를 정확하게 데이터를 받아 dashboard를 수정하세요
	
	대시보드 상태 변경
		- status 컬럼은 기본 waiting 값으로 들어갑니다.
		- 이 때 상세정보 모달창에서 상태 변경 요청을 할 수 있고 이 요청이 들어오면 status를 업데이트 하고
		- waiting => in_progress 변경 시 depart_time에 현재 시각
		- in_progree => complete, issue 변경 시 complete_time 에 현재 시각을 넣는 로직을 구현하세요
		

	기사 리스트 조회 기능
		- 배차 기능 시 필요합니다.
		- 프론트에서 기사할당 버튼 클릭 요청이 오면 기사 리스트를 보내줘야 합니다.
		- 기사 테이블에 있는 정보를 리스트업 해서 보내주면 됩니다.
		
	배차 기능
		- dashboard_id와 함께 driver_id가 같이 요청 받아야합니다.
		- 하나 이상의 dashboard_id 리스트가 동시 기사 할당 될 수 있습니다
		- 배차 시 driver_name == 기타 인 경우는 driver_remark가 있어야 합니다
		- 이에 맞는 driver_id 값을 업데이트 시키며,
		- trg_dashboard_after_update_driver 쿼리 트리거를 같이 실행 시켜야 하는점 참고하세요
	

	대시보드 리스트 조회, 상세정보 조회
		- 대시보드 는 2가지 api 조회가 필요합니다.
		- 리스트를 조회, 상세정보 조회 이렇게 2가지 api가 필요합니다
		- 기본 대시보드 리스트 조회는 ETA컬럼의 날짜별로 리스트 됩니다. 따라서 요청 받는 기본값은 오늘이며, 
		   날짜별 요청 데이터가 있습니다.
		- 프론트에 테이블형태로 리스트업 될 예정입니다.
			type(Type), department(부서), warehouse(출발 허브), driver_name (담당 기사), order_no(order_no), 
			create_time(생성시간), depart_time(출발 시각), eta(ETA : YYYY-MM-DD HH:MM 형식),
 			status(배송 상태), region(도착 지역)
		- 리스트를 보내줄 때는 eta 오름차 순으로 정렬 후 보내주세요

		- 상세 정보 조회는 테이블 형태로 된 리스트 업 에서 하나의 행을 클릭하면 그 행의 dashboard 상세정보를 보여주는 모달창이 띄워질 예정입니다.
			- 아래 데이터들이 순차적으로 보여져야 합니다. (한글은 필요 없습니다 그냥 그대로 제목으로 띄우세요)
			각 데이터들은 제목과 그 값들이 UI/UX가 확실히 구분되어 잘 보여야해
			type, department, warehouse, driver_name, driver_contact, driver_remark, order_no, eta, status, create_time, depart_time, complete_time, address, distance, duration_time, customer, contact, remark

	- 대시보드 리스트 조회 창에서의 검색 기능과 페이지네이션
		검색 기능과 페이지 네이션은 CSR로 이루어질 예정입니다.
		여기서 eta컬럼 날짜별로 리스트업을 띄우게 될겁니다.
		따라서 리스트 조회에 eta컬럼 날짜별로 리스트 read를 할 수 있어야 합니다.
		그래서 eta 컬럼 인덱싱을 활용하세요
	
	- 대시보드 삭제 기능
		- api 요청에서 날라온 dashboard 에 맞는 여러개의 dashboard들을 삭제합니다.
		- 하나 이상의 대시보드가 삭제 가능합니다
시각화 기능
	mysql에 있는 데이터 기반 시각화 기능
		pandas를 이용해서 데이터 전처리된 내용을 프론트로 보내야 합니다.
		현재 mysql 테이블을 활용하여 아래 전처리들을 시행하여 각각 api를 만드세요
		처음 화면은 '배송현황' 이라는 주제명의 시각화를 보여주세요
		프론트에서는 드롭다운 선택지로 api들에 접근할 수 있습니다.
			- 프론트에서 받은 기간을 기준으로 이 기간의 dashboard.eta 컬럼이 맞는 데이터를 가져와
			총 dashboard의 갯수와 status 별 갯수 및 비율 => 주제 명 : 배송 현황
			-프론트에서 받은 기간을 기준으로 이 기간의 dashboard.eta 컬럼이 맞는 데이터를 가져와 
			총 dashboard의 갯수에서 create_time을 24시 시간을 1시간 단위로 나눠 각 시간별 갯수 그래프 
			=> 주제 명 : 시간별 접수량
		- 여기서의 날짜는 ETA 컬럼에 적용될 예정입니	다. 날짜는 YYYY-MM-DD 형식입니다. 또한 시간값은 00:00으로 기본 받아야합니다 (날짜 기준으로 기간을 잡을 예정)
	


DB 쿼리 트리거 참고
 
1. trg_dashboard_before_insert_postal (BEFORE INSERT)
	역할:
		dashboard 생성 시, 입력된 postal_code를 기반으로 도시(city), 지역(district), 거리(distance), 소요 시간(duration_time) 값을 자동 설정함.
	작동 시점:
		dashboard 테이블에 새로운 레코드가 INSERT될 때.
	구현 방법:
		postal_code 테이블에서 데이터를 조회하여 dashboard의 관련 컬럼 값을 업데이트.

2. trg_dashboard_after_update_driver (AFTER UPDATE)
	역할:
		기사(driver)가 배정될 때(driver_id가 업데이트될 때), 해당 기사 정보를 dashboard에 자동 반영함.
	작동 시점:
		dashboard 테이블의 driver_id가 변경될 때.
	구현 방법:
		driver 테이블에서 driver_id를 조회하여 driver_name, driver_contact, driver_remark 업데이트.

	
	