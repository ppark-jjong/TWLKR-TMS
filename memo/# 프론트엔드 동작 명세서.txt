# 프론트엔드 동작 명세서

## 1. 시스템 개요

### 1.1 시스템 목적
- 배송 실시간 관제 시스템의 프론트엔드 애플리케이션으로, 배송 추적, 시각화, 관리 기능을 제공합니다.
- 다양한 사용자 권한 레벨(일반 사용자, 관리자)에 따른 차별화된 기능을 제공합니다.
- React 기반의 SPA(Single Page Application)로 구현되어 사용자 경험을 최적화합니다.

### 1.2 기술 스택
- **프레임워크**: React 18
- **라우팅**: React Router 6
- **UI 컴포넌트**: Ant Design 5.9.0
- **상태 관리**: Context API
- **HTTP 클라이언트**: Axios
- **시각화 라이브러리**: @ant-design/plots
- **날짜 처리**: Dayjs
- **빌드 도구**: Create React App (React Scripts 5.0.1)
- **코드 최적화**: 지연 로딩(Lazy Loading) 및 코드 분할(Code Splitting)

### 1.3 시스템 아키텍처

#### 1.3.1 디렉토리 구조
```
src/
├── components/            # UI 컴포넌트
│   ├── admin/             # 관리자 관련 컴포넌트
│   ├── common/            # 공통 컴포넌트
│   ├── dashboard/         # 대시보드 관련 컴포넌트
│   └── visualization/     # 시각화 관련 컴포넌트
├── contexts/              # React Context 정의
├── controllers/           # 비즈니스 로직 컨트롤러
├── hooks/                 # 커스텀 훅
├── pages/                 # 페이지 컴포넌트
├── services/              # API 서비스
├── utils/                 # 유틸리티 함수
├── App.js                 # 루트 App 컴포넌트
├── AppRoutes.js           # 라우팅 설정
├── index.js               # 진입점
└── lazyComponents.js      # 지연 로딩 설정
```

#### 1.3.2 아키텍처 개념도
```
사용자 → [브라우저] → [SPA (React)] → [컨텍스트 API (상태 관리)]
                            ↓
                   [컨트롤러/서비스 레이어]
                            ↓
                    [API 클라이언트(Axios)]
                            ↓
                     [백엔드 서버 API]
```

## 2. 주요 기능 및 페이지

### 2.1 페이지 구성

#### 2.1.1 로그인 페이지
- **경로**: `/login`
- **주요 기능**: 사용자 인증, 권한에 따른 리디렉션
- **컴포넌트**: `LoginPage`
- **권한 제한**: 인증되지 않은 사용자만 접근 가능
- **상세 동작**:
  - 성공적인 로그인 후 권한에 따라 대시보드 또는 관리자 페이지로 리디렉션
  - 사용자 정보 및 토큰은 localStorage에 저장
  - 로그인 실패 시 적절한 오류 메시지 표시

#### 2.1.2 대시보드 페이지
- **경로**: `/dashboard`
- **주요 기능**: 배송 목록 조회, 필터링, 상태 변경, 상세 정보 조회, 배차 관리
- **컴포넌트**: `DashboardPage`, `DashboardTable`, `DashboardFilters`
- **권한 제한**: 인증된 사용자만 접근 가능
- **상세 동작**:
  - 날짜 범위 기반 배송 데이터 조회
  - 종류, 부서, 창고별 필터링
  - 주문번호 검색
  - 선택한 항목 배차 처리
  - 상세 정보 모달을 통한 배송 정보 조회 및 수정
  - 상태별로 색상 구분된 목록 표시

#### 2.1.3 시각화 페이지
- **경로**: `/visualization`
- **주요 기능**: 배송 데이터 시각화, 차트 표시, 통계 정보 제공
- **컴포넌트**: `VisualizationPage`, `StatusPieChart`, `HourlyBarChart`
- **권한 제한**: 인증된 사용자만 접근 가능
- **상세 동작**:
  - 배송 상태별 파이 차트 표시
  - 시간대별 접수량 바 차트 표시
  - 날짜 범위 지정 및 데이터 새로고침
  - 부서별 통계 정보 제공

#### 2.1.4 관리자 페이지
- **경로**: `/admin`
- **주요 기능**: 사용자 관리, 시스템 설정, 데이터 관리
- **컴포넌트**: `AdminPage`, `AdminModule`, `UserManagementTab`
- **권한 제한**: 관리자 권한 사용자만 접근 가능
- **상세 동작**:
  - 사용자 목록 조회, 추가, 수정, 삭제
  - 시스템 설정 관리
  - 데이터 내보내기 및 정리 기능
  - 통계 정보 표시

### 2.2 공통 컴포넌트

#### 2.2.1 메인 레이아웃
- **컴포넌트**: `MainLayout`, `Sidebar`
- **기능**: 일관된 레이아웃 제공, 네비게이션, 세션 정보 표시
- **상세 동작**:
  - 좌측 사이드바를 통한 메뉴 접근
  - 사용자 정보 및 역할 표시
  - 세션 만료 시간 표시
  - 권한에 따른 메뉴 항목 차등 표시

#### 2.2.2 오류 경계
- **컴포넌트**: `ErrorBoundary`, `ErrorBoundaryWithFallback`
- **기능**: 예외 처리 및 대체 UI 표시
- **상세 동작**:
  - 컴포넌트 렌더링 오류 포착
  - 사용자 친화적인 오류 메시지 표시
  - 복구 기능 제공
  - 로깅을 통한 오류 추적

#### 2.2.3 로딩 스피너
- **컴포넌트**: `LoadingSpin`
- **기능**: 데이터 로딩 상태 표시
- **상세 동작**:
  - API 호출 중 로딩 상태 표시
  - 사용자 정의 팁 메시지 지원

## 3. 상태 관리

### 3.1 Context API

#### 3.1.1 인증 컨텍스트
- **파일**: `AuthContext.js`
- **주요 기능**: 사용자 인증 상태 관리, 로그인/로그아웃 처리, 권한 확인
- **주요 상태**:
  - `user`: 현재 로그인한 사용자 정보
  - `isAuthenticated`: 인증 여부
  - `isAdmin`: 관리자 권한 여부
  - `authChecking`: 인증 확인 중 상태
- **주요 함수**:
  - `login(userId, password)`: 로그인 처리
  - `logout()`: 로그아웃 처리
  - `retryAuth()`: 인증 재시도
  - `checkSession()`: 세션 유효성 검사

#### 3.1.2 대시보드 컨텍스트
- **파일**: `DashboardContext.js`
- **주요 기능**: 대시보드 데이터 관리, 검색, 필터링
- **주요 상태**:
  - `dashboards`: 대시보드 항목 목록
  - `loading`: 로딩 상태
  - `dateRange`: 조회 날짜 범위
  - `searchMode`: 검색 모드 여부
- **주요 함수**:
  - `fetchDashboards(startDate, endDate, forceRefresh)`: 대시보드 데이터 조회
  - `searchByOrderNo(orderNo)`: 주문번호로 검색
  - `resetSearchMode()`: 검색 모드 초기화
  - `updateDashboard(dashboardId, updates)`: 대시보드 항목 업데이트
  - `removeDashboards(dashboardIds)`: 대시보드 항목 삭제

### 3.2 커스텀 훅

#### 3.2.1 대시보드 상세 정보 훅
- **파일**: `useDashboardDetail.js`
- **주요 기능**: 대시보드 상세 정보 관리, 락 관리, 편집 모드 관리
- **주요 상태**:
  - `dashboard`: 대시보드 상세 정보
  - `loading`: 로딩 상태
  - `editMode`: 편집 모드 (필드, 메모)
  - `lockInfo`: 락 정보
- **주요 함수**:
  - `fetchDashboardDetail()`: 상세 정보 조회
  - `startFieldsEdit()`: 필드 편집 시작
  - `startRemarkEdit()`: 메모 편집 시작
  - `updateFields(fields)`: 필드 업데이트
  - `updateRemark()`: 메모 업데이트
  - `updateStatus(status)`: 상태 업데이트

#### 3.2.2 비동기 작업 관리 훅
- **파일**: `useAsync.js`
- **주요 기능**: 비동기 작업 관리, 로딩/에러 상태 처리
- **주요 상태**:
  - `loading`: 로딩 상태
  - `error`: 에러 상태
  - `data`: 결과 데이터
- **주요 함수**:
  - `execute(...args)`: 비동기 함수 실행

#### 3.2.3 날짜 범위 관리 훅
- **파일**: `useDateRange.js`
- **주요 기능**: 날짜 범위 선택 및 관리
- **주요 상태**:
  - `dateRange`: 선택된 날짜 범위
  - `availableDateRange`: 가능한 날짜 범위
  - `loading`: 로딩 상태
- **주요 함수**:
  - `handleDateRangeChange(dates)`: 날짜 범위 변경 처리
  - `disabledDate(current)`: 날짜 선택 제한

#### 3.2.4 테이블 상태 관리 훅
- **파일**: `useTableState.js`
- **주요 기능**: 테이블 정렬, 필터링, 페이징 관리
- **주요 상태**:
  - `sortedInfo`: 정렬 상태
  - `filters`: 필터 상태
  - `filteredData`: 필터링된 데이터
- **주요 함수**:
  - `handleSortChange(sorter)`: 정렬 변경 처리
  - `handleFilterChange(filterType, value)`: 필터 변경 처리
  - `handleFilterReset()`: 필터 초기화
  - `processData(data)`: 데이터 처리 (필터링, 정렬)

## 4. API 통신

### 4.1 API 서비스

#### 4.1.1 API 기본 서비스
- **파일**: `ApiService.js`
- **주요 기능**: 백엔드 API 요청 처리
- **주요 함수**:
  - 인증 관련: `login()`, `refreshToken()`, `logout()`, `checkSession()`
  - 대시보드 관련: `getDashboardList()`, `getDashboardDetail()`, `createDashboard()`
  - 대시보드 조작: `updateDashboardFields()`, `updateStatus()`, `assignDriver()`
  - 시각화 관련: `getDeliveryStatus()`, `getHourlyOrders()`, `getDateRange()`
  - 락 관련: `acquireLock()`, `releaseLock()`, `checkLockStatus()`

#### 4.1.2 대시보드 서비스
- **파일**: `DashboardService.js`
- **주요 기능**: 대시보드 비즈니스 로직 처리
- **주요 함수**:
  - `getDashboardList(startDate, endDate)`: 대시보드 목록 조회
  - `searchByOrderNo(orderNo)`: 주문번호로 검색
  - `getDashboardDetail(dashboardId)`: 상세 정보 조회
  - `updateFields(dashboardId, fields)`: 필드 업데이트
  - `updateStatus(dashboardId, status, isAdmin)`: 상태 업데이트
  - `assignDriver(driverData)`: 배차 처리
  - `sortDashboardsByStatus(dashboards)`: 상태별 정렬

#### 4.1.3 시각화 서비스
- **파일**: `VisualizationService.js`
- **주요 기능**: 시각화 데이터 처리
- **주요 함수**:
  - `getDeliveryStatus(startDate, endDate)`: 배송 상태 데이터 조회
  - `getHourlyOrders(startDate, endDate)`: 시간대별 접수량 데이터 조회
  - `getDateRange()`: 가능한 날짜 범위 조회

### 4.2 Axios 설정

#### 4.2.1 인터셉터
- **파일**: `AxiosConfig.js`
- **주요 기능**: 요청/응답 인터셉터, 에러 처리, 토큰 관리
- **상세 동작**:
  - JWT 토큰 자동 포함
  - 중복 요청 방지
  - 응답 캐싱
  - 토큰 만료 처리 및 자동 갱신
  - HTTP 상태 코드별 에러 처리
  - 락 충돌 처리

#### 4.2.2 요청 제어
- **파일**: `AxiosConfig.js`
- **주요 기능**: 요청 취소, 캐시 관리, 재시도 로직
- **주요 함수**:
  - `cancelAllPendingRequests()`: 모든 진행 중인 요청 취소
  - `invalidateCache(urlPattern)`: 캐시 무효화
  - `clearCache()`: 전체 캐시 초기화
  - `withRetry(apiCall, maxRetries, retryDelay)`: 재시도 로직

## 5. 컴포넌트 상세

### 5.1 대시보드 컴포넌트

#### 5.1.1 대시보드 테이블
- **파일**: `DashboardTable.js`
- **주요 기능**: 배송 데이터 테이블 표시, 정렬, 선택
- **주요 속성**:
  - `dataSource`: 표시할 데이터
  - `loading`: 로딩 상태
  - `selectedRows`: 선택된 행
  - `onRowClick`: 행 클릭 핸들러
- **상세 동작**:
  - 상태별 행 배경색 설정
  - 열 정렬 기능
  - 행 선택 기능
  - 페이지네이션 처리

#### 5.1.2 대시보드 필터
- **파일**: `DashboardFilters.js`
- **주요 기능**: 필터링 UI 제공
- **주요 속성**:
  - `filters`: 필터 상태
  - `onFilterChange`: 필터 변경 핸들러
  - `onResetFilters`: 필터 초기화 핸들러
  - `onApplyFilters`: 필터 적용 핸들러
- **상세 동작**:
  - 종류, 부서, 창고별 필터 드롭다운
  - 주문번호 검색 입력
  - 필터 적용/초기화 버튼

#### 5.1.3 대시보드 상세 모달
- **파일**: `DashboardDetailModal.js`
- **주요 기능**: 대시보드 상세 정보 표시 및 편집
- **주요 속성**:
  - `visible`: 모달 표시 여부
  - `dashboard`: 대시보드 데이터
  - `onCancel`: 취소 핸들러
  - `onSuccess`: 성공 핸들러
- **상세 동작**:
  - 필드 편집 모드
  - 메모 편집 모드
  - 상태 변경 버튼
  - 락 정보 표시

### 5.2 시각화 컴포넌트

#### 5.2.1 상태 파이 차트
- **파일**: `StatusPieChart.js`
- **주요 기능**: 배송 상태별 파이 차트 표시
- **주요 속성**:
  - `data`: 차트 데이터
  - `dateRange`: 날짜 범위
- **상세 동작**:
  - 부서별 파이 차트 표시
  - 상태별 색상 구분
  - 통계 정보 표시

#### 5.2.2 시간대별 바 차트
- **파일**: `HourlyBarChart.js`
- **주요 기능**: 시간대별 접수량 바 차트 표시
- **주요 속성**:
  - `data`: 차트 데이터
  - `dateRange`: 날짜 범위
- **상세 동작**:
  - 시간대별 접수량 막대 표시
  - 부서별 그룹화
  - 주간/야간 구분
  - 통계 정보 표시

### 5.3 관리자 컴포넌트

#### 5.3.1 사용자 관리 탭
- **파일**: `UserManagementTab.js`
- **주요 기능**: 사용자 관리 UI 제공
- **주요 속성**:
  - `userList`: 사용자 목록
  - `onUserSave`: 사용자 저장 핸들러
  - `onUserDelete`: 사용자 삭제 핸들러
- **상세 동작**:
  - 사용자 목록 테이블
  - 사용자 추가/편집 모달
  - 권한 및 부서 관리

#### 5.3.2 시스템 설정 탭
- **파일**: `SystemSettingsTab.js`
- **주요 기능**: 시스템 설정 UI 제공
- **주요 속성**:
  - `systemSettings`: 시스템 설정
  - `onSettingsSave`: 설정 저장 핸들러
- **상세 동작**:
  - API 타임아웃 설정
  - 자동 새로고침 간격 설정
  - 락 메커니즘 설정

#### 5.3.3 데이터 관리 탭
- **파일**: `DataManagementTab.js`
- **주요 기능**: 데이터 관리 UI 제공
- **주요 속성**:
  - `dataStats`: 데이터 통계
  - `onDataExport`: 데이터 내보내기 핸들러
  - `onDataCleanup`: 데이터 정리 핸들러
- **상세 동작**:
  - 데이터 통계 표시
  - 데이터 내보내기 기능
  - 오래된 데이터 정리 기능

## 6. 인증 및 권한

### 6.1 인증 흐름

#### 6.1.1 로그인 프로세스
- **주요 파일**: `AuthService.js`, `LoginPage.js`
- **상세 동작**:
  1. 사용자가 로그인 페이지에서 ID/비밀번호 입력
  2. `login()` API 호출
  3. 성공 시 토큰 및 사용자 정보 저장
  4. 권한에 따라 대시보드 또는 관리자 페이지로 리디렉션

#### 6.1.2 토큰 관리
- **주요 파일**: `TokenManager.js`
- **상세 동작**:
  - 액세스 토큰 및 리프레시 토큰 localStorage에 저장
  - 토큰 만료 감지
  - 리프레시 토큰을 통한 액세스 토큰 갱신
  - 세션 만료 시 로그인 페이지로 리디렉션

### 6.2 권한 제어

#### 6.2.1 권한 기반 라우팅
- **주요 파일**: `AppRoutes.js`
- **상세 동작**:
  - `PrivateRoute` 컴포넌트를 통한 인증 필요 경로 보호
  - 관리자 전용 경로 (`/admin`) 별도 권한 체크
  - 권한 없는 접근 시 적절한 경로로 리디렉션

#### 6.2.2 UI 권한 제어
- **주요 파일**: `Sidebar.js`, `DashboardPage.js`
- **상세 동작**:
  - 권한에 따른 메뉴 항목 표시/숨김
  - 관리자 전용 버튼 (삭제 등) 조건부 렌더링
  - 상태 변경 제한 (관리자는 모든 상태 변경 가능, 일반 사용자는 제한)

## 7. 성능 최적화

### 7.1 코드 분할 및 지연 로딩

#### 7.1.1 페이지 레벨 코드 분할
- **주요 파일**: `AppRoutes.js`, `lazyComponents.js`
- **상세 동작**:
  - React.lazy 및 Suspense를 통한 페이지 레벨 코드 분할
  - 필요한 시점에 컴포넌트 로드
  - 초기 로딩 시간 개선

#### 7.1.2 모달 코드 분할
- **주요 파일**: `lazyComponents.js`
- **상세 동작**:
  - 모달 컴포넌트 지연 로딩
  - 사용자 인터랙션 예상 시점에 사전 로드
  - 모달 표시 지연 최소화

### 7.2 메모이제이션

#### 7.2.1 컴포넌트 메모이제이션
- **주요 파일**: `DashboardList.js`, `DashboardTable.js`
- **상세 동작**:
  - React.memo를 통한 불필요한 리렌더링 방지
  - 컴포넌트별 최적의 비교 함수 구현

#### 7.2.2 핸들러 메모이제이션
- **주요 파일**: `DashboardPage.js`, `VisualizationPage.js`
- **상세 동작**:
  - useCallback을 통한 이벤트 핸들러 메모이제이션
  - 렌더링마다 핸들러 재생성 방지

#### 7.2.3 계산 값 메모이제이션
- **주요 파일**: `DashboardDetailModal.js`, `StatusPieChart.js`
- **상세 동작**:
  - useMemo를 통한 계산 값 메모이제이션
  - 복잡한 데이터 변환 최적화

### 7.3 네트워크 최적화

#### 7.3.1 API 응답 캐싱
- **주요 파일**: `AxiosConfig.js`
- **상세 동작**:
  - GET 요청 응답 캐싱
  - 캐시 TTL 관리
  - 필요 시 캐시 무효화

#### 7.3.2 중복 요청 방지
- **주요 파일**: `AxiosConfig.js`
- **상세 동작**:
  - 동일 요청 식별 및 중복 요청 취소
  - 불필요한 API 호출 절감

## 8. 에러 처리

### 8.1 에러 경계

#### 8.1.1 전역 에러 경계
- **주요 파일**: `ErrorBoundary.js`
- **상세 동작**:
  - 리액트 컴포넌트 트리의 JavaScript 에러 포착
  - 대체 UI 표시
  - 오류 로깅
  - 복구 옵션 제공

#### 8.1.2 컴포넌트별 에러 경계
- **주요 파일**: `ErrorBoundaryWithFallback.js`
- **상세 동작**:
  - 특정 컴포넌트 영역의 에러 격리
  - 컴포넌트별 맞춤형 폴백 UI

### 8.2 API 에러 처리

#### 8.2.1 HTTP 에러 처리
- **주요 파일**: `AxiosConfig.js`, `ErrorHandler.js`
- **상세 동작**:
  - HTTP 상태 코드별 표준화된 에러 처리
  - 인증 오류 (401): 토큰 갱신 또는 로그인 페이지 리디렉션
  - 권한 오류 (403): 권한 없음 메시지 표시
  - 락 충돌 (423): 락 정보 표시
  - 서버 오류 (500): 사용자 친화적인 오류 메시지 표시

#### 8.2.2 필드 유효성 검증 오류
- **주요 파일**: `validator.js`, `CreateDashboardModal.js`
- **상세 동작**:
  - 백엔드 필드 유효성 검증 오류 처리
  - 폼 필드에 오류 메시지 표시
  - 사용자에게 명확한 피드백 제공

## 9. 국제화 및 지역화

### 9.1 언어 설정

#### 9.1.1 UI 언어
- **주요 파일**: `App.js`
- **상세 동작**:
  - Ant Design 로케일 설정 (koKR)
  - 한국어 UI 제공

#### 9.1.2 날짜 및 시간 형식
- **주요 파일**: `Formatter.js`
- **상세 동작**:
  - 한국 날짜/시간 형식 적용
  - Dayjs를 통한 일관된 날짜 처리

### 9.2 숫자 및 통화 형식

#### 9.2.1 숫자 포맷팅
- **주요 파일**: `Formatter.js`
- **상세 동작**:
  - 숫자 천 단위 콤마 추가
  - 한국 로케일 적용

## 10. 보안 고려사항

### 10.1 인증 보안

#### 10.1.1 토큰 관리
- **주요 파일**: `TokenManager.js`, `AxiosConfig.js`
- **상세 동작**:
  - JWT 토큰 안전한 저장 및 관리
  - 토큰 만료 처리
  - 자동 토큰 갱신

#### 10.1.2 세션 타임아웃
- **주요 파일**: `Sidebar.js`
- **상세 동작**:
  - 세션 만료 시간 표시
  - 만료 임박 시 경고 메시지

### 10.2 권한 보안

#### 10.2.1 최소 권한 원칙
- **주요 파일**: `AppRoutes.js`, `DashboardPage.js`
- **상세 동작**:
  - 사용자 역할에 따른 기능 제한
  - 관리자 전용 기능 보호

#### 10.2.2 락 메커니즘
- **주요 파일**: `useDashboardDetail.js`
- **상세 동작**:
  - 동시 편집 충돌 방지
  - 락 획득 및 해제
  - 락 만료 처리

## 11. 배포 고려사항

### 11.1 빌드 최적화

#### 11.1.1 번들 크기 최적화
- **주요 파일**: `package.json`
- **상세 동작**:
  - 소스맵 생성 비활성화 (프로덕션)
  - 번들 분석 도구 설정

#### 11.1.2 브라우저 지원
- **주요 파일**: `package.json`
- **상세 동작**:
  - browserslist 설정
  - 지원 브라우저 정의

### 11.2 환경별 설정

#### 11.2.1 개발 환경
- **주요 파일**: `Logger.js`
- **상세 동작**:
  - 개발 환경에서만 디버그 로그 출력
  - 상세 디버깅 정보 제공

#### 11.2.2 프로덕션 환경
- **주요 파일**: `Logger.js`, `package.json`
- **상세 동작**:
  - 디버그 로그 제거
  - 성능 최적화 빌드 설정
