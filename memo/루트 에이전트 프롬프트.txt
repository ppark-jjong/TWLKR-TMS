# 배송 실시간 관제 시스템 프롬프트 (최종 완성본)

아래는 지금까지의 전체 요구사항과 추가 지침을 통합하고,  
**폴더 구조 정보는 제외**한 **최종 문서**입니다.  
(이 문서는 내부 협업/개발 시 **공통 참고 자료**로 사용됩니다.)

---

## 1. 프로젝트 개요 및 배경

### 1.1 목적

- **기업 내부에서 사용할 배송 실시간 관제 및 데이터 시각화 서비스**를 개발한다.
- **실시간 배송 주문 관리 및 모니터링**  
  - ETA(도착 예정 시간) 기준으로 주문을 조회하고 상태를 관리한다.
- **효율적인 배차 관리**  
  - 담당자 배정 및 상태 변경을 통한 배송 과정 최적화.
- **데이터 기반 의사결정 지원**  
  - 직관적인 시각화와 시간대별 주문 데이터 분석 기능 제공.
- **권한별 차별화된 기능 제공**  
  - 일반 사용자와 관리자의 권한 및 기능을 구분하여 제공.
- **동시성 제어**  
  - **비관적 락(Pessimistic Lock)**을 통해 다중 사용자 환경에서 데이터 무결성을 보장한다.

### 1.2 배경

- 본 프로젝트는 **전 풀스택/데이터 엔지니어**가 단독 개발을 시작했고, 곧 **서비스 배포**가 예정되어 있다.
- 모든 **주석은 한국어**로 작성하며, **요청된 기능**만 수정·생성한다.
- 추가 요청이 있으면 **새로운 로직**을 구현하되, 기존 구조는 최대한 유지한다.

### 1.3 특징

- **상세한 설명 및 한국어 주석** 제공.
- **비관적 락**으로 동시성 제어(낙관적 락은 오버엔지니어링으로 판단, 배제).
- **DB 모델(테이블 구조) 변경은 사전 허가** 후 진행 가능.
- **무료 라이브러리만** 사용(유료 라이선스 라이브러리 사용 불가).

### 1.4 배송 데이터 흐름

1. **주문 접수**  
   - `order_no`를 생성하고, 초기 상태를 `WAITING`으로 설정  
   - `create_time` 자동 기록
2. **배차 처리**  
   - 기사 정보(`driver_name`, `driver_contact`)를 업데이트
3. **상태 변경**  
   - `WAITING` → `IN_PROGRESS` → `COMPLETE` / `ISSUE` / `CANCEL`
4. **시간 기록**  
   - 접수 시간: `create_time`  
   - 진행 시작: `depart_time` (상태가 `IN_PROGRESS`로 변할 때 기록)  
   - 완료/이슈: `complete_time` (`COMPLETE`/`ISSUE` 상태일 때 기록)

---

## 2. 기술 스택 및 아키텍처

### 2.1 프론트엔드

- **주요 기술**  
  - React 18.x.x (Create React App 기반, `.js` 파일만 사용)  
  - Ant Design 5.x.x (추가 커스터마이징 최소화)  
  - Axios 1.x.x (RESTful API 호출)  
  - Context API (전역 상태 관리, 필요한 경우 local state 병행)

- **코드 스타일**  
  - jsdoc 활용 (주석과 디버깅 메시지는 모두 한국어)  
  - 가독성과 간결성 중시, DRY 원칙 준수

- **빌드/설정**  
  - CRA(Create React App) 그대로 사용 (webpack, babel 등 세부 설정 불필요)  
  - 프론트엔드와 백엔드는 **동일 도메인** 내에서 통신  
  - 무료 라이브러리만 사용

### 2.2 백엔드

- **프레임워크**: FastAPI 0.95.x 이상 (Python)
- **구조**  
  - **API 라우터**: 요청/응답 처리  
  - **서비스 레이어**: 비즈니스 로직 담당  
  - **레포지토리 레이어**: DB 접근 로직 담당  
  - **모델/스키마**:  
    - `models` 디렉토리에 DB 모델  
    - `schemas` 디렉토리에 요청/응답용 스키마  
    - DB 구조 변경 시 사전 허가 필수
- **ORM**: SQLAlchemy 2.0.x
- **인증**: JWT 기반 인증
- **API 호출 흐름**  
  - 클라이언트 → API 라우터(엔드포인트) → 서비스 레이어 → 레포지토리 → DB  
  - 응답은 역순으로 전달

### 2.3 데이터베이스

- **핫 데이터**: MySQL 8.0 (최근 1개월치 데이터 유지, ETA 컬럼 인덱스 적용)  
  - 로컬 환경: Docker-compose로 MySQL 컨테이너 실행 (host: `mysql`, port: 3306, DB명: `delivery_system`, 계정: `root/1234`)
- **콜드 데이터**: BigQuery (장기 보관)

### 2.4 배포 및 테스트 환경

- **배포 환경**: Google App Engine (GAE)  
  - 단일 컨테이너 방식, HTTPS/SSL 자동 적용
- **로컬 테스트**: Docker-desktop 사용  
  - 운영 환경과 유사한 단일 컨테이너 구성
- **환경 변수**  
  - 로컬: `.env.local`  
  - 운영: `.env.production`

---

## 3. 주요 기능 및 엔드포인트

### 3.1 대시보드(Dashboard) / 배차 페이지

- **실시간 주문 관리**  
  - 특정 날짜 범위(ETA 기준)로 주문을 조회·필터링하여 리스트 표시  
- **배차(담당자 배정)**  
  - 대기(`WAITING`) 상태의 주문만 배차 가능  
- **상태 관리**  
  - `WAITING`, `IN_PROGRESS`, `COMPLETE`, `ISSUE`, `CANCEL` 등  
  - ETA 수정 시 상태 초기화, 완료/이슈/취소는 일반 유저가 변경 불가 등 제한  
- **주문 생성/수정**  
  - 신규 주문 생성과 ETA, 수령인, 주소, 메모 등 일부 필드 수정 가능  
- **비관적 락 적용**  
  - 편집 전 락 획득(423 Locked)  
  - 다른 사용자가 이미 락 보유 시 편집 불가

### 3.2 관리자(Admin) 페이지

- **관리자 전용 기능**  
  - 무제한 상태 변경(완료/취소/이슈 등도 변경 가능), 주문 삭제 등  
- **조회 기능**  
  - ETA 기준으로 대시보드와 동일하게 주문 리스트 확인  
- **권한 관리**  
  - 관리자 권한 없는 사용자는 해당 페이지에 접근 불가

### 3.3 시각화(Visualization) 페이지

- **배송 현황 차트**  
  - 파이 차트로 상태별 배송 비율 표시  
- **시간대별 주문 분포**  
  - 시간대별(09시~19시는 1시간 단위, 19시~익일09시는 하나로 묶어) 막대 그래프로 주문 수 확인  
- **데이터 분석 기준**  
  - `create_time` 컬럼을 기준으로 기간을 필터링

### 3.4 공통 기능

- **사용자 인증**  
  - JWT 로그인, 토큰 갱신  
- **에러 처리**  
  - API 에러 인터셉터, 메시지 표시, HTTP 상태 코드 준수  
- **페이지 라우팅 보호**  
  - PrivateRoute, AuthProvider 등을 이용해 인증 여부별 접근 제어  
- **기타 공통 보안**  
  - SQL Injection, CSRF, XSS 방지, 보안 이벤트 로깅

---

## 4. 비관적 락(Pessimistic Lock) 및 동시성 제어

1. **락 획득**  
   - 수정 전 특정 주문(혹은 레코드)에 대해 락 정보 저장 (예: `dashboard_lock` 테이블)  
   - DB 레벨에서 `SELECT ... FOR UPDATE NOWAIT` 등 활용
2. **흐름**  
   - 클라이언트가 편집 전 **락 획득 API** 호출 → 성공 시 편집 가능  
   - 이미 다른 사용자가 락을 보유 중이면 423 Locked 응답  
   - 편집 완료 시 락 해제, 또는 일정 시간 경과 후 자동 해제
3. **충돌 시나리오**  
   - B 사용자가 편집하려 할 때 A가 락 보유  
   - 서버가 423 응답: “다른 사용자가 편집 중”  
   - B는 에러 메시지 표시, 편집 불가

---

## 5. QA 테스트 및 문제 해결 지침

### 5.1 QA 테스트 시나리오

1. **테스트 데이터 구축**  
   - DB에 상태가 다양한 주문(complete, issue 등)과 배차 정보가 있는 데이터를 미리 세팅
2. **기대 동작**  
   - 프론트엔드(대시보드, 관리자 페이지 등)에서 DB 상태와 동일하게 표시되는지 확인  
   - 이미 배정된 기사 정보가 임의로 초기화되지 않고 유지되어야 함
3. **테스트 시 확인 항목**  
   - ETA 변경, 상태 변경, 생성/삭제, 배차 동작 등 핵심 기능이 정상 작동  
   - 비관적 락에 의한 423 Locked 상황도 시뮬레이션

### 5.2 문제 해결 지침

1. **API 및 DB 동기화**  
   - 모든 API 호출 시 DB 변경 사항이 즉시 화면에 반영되는지 확인  
   - FastAPI 로그, DB 쿼리 로그로 트랜잭션 상황을 체크
2. **프론트엔드 상태 관리 점검**  
   - Context API, local state 등에서 받아온 데이터를 불필요하게 덮어쓰지 않는지  
   - RangePicker 등 필터링/검색 로직 정확성
3. **캐싱 및 트랜잭션**  
   - 서버 혹은 클라이언트 캐시가 문제를 일으키는지 확인  
   - 트랜잭션 롤백 로직이 제대로 작동하는지 점검
4. **로그/디버깅**  
   - FastAPI와 DB 쿼리 로그, 프론트 콘솔 로그를 통해 오류 구간 파악  
   - 문제 구간에 한국어 주석 혹은 디버깅 메시지 작성

---

## 6. 개발 및 배포 가이드라인

### 6.1 개발 원칙

- **모듈화 및 관심사 분리**: API 라우터, 서비스, 레포지토리, 모델/스키마를 구분
- **주석 및 디버깅 메시지**: 전부 한국어 사용
- **일관성 유지**: 코드 스타일(네이밍, 디렉토리 구조, API 응답 규격 등)
- **DB 모델 변경 제한**: 구조 변경 시 사전에 논의 필요
- **무료 라이브러리만** 사용 가능

### 6.2 구축/테스트

- **로컬 환경**  
  - Docker-desktop으로 **단일 컨테이너** 구성  
  - MySQL 컨테이너와 동일 네트워크  
  - `init-db.sql` 등으로 DB 초기 스키마 생성
- **운영/배포**  
  - Google App Engine(GAE) 배포(HTTPS/SSL 자동)  
  - `.env.local`을 `.env.production`으로 변환 후 사용  
  - 단일 컨테이너 이미지 빌드 → GAE 업로드

### 6.3 예외/에러 처리

- **423 Locked**로 비관적 락 충돌 처리
- **HTTP 상태 코드** 준수 (400, 401, 403, 404, 500 등)
- **에러 메시지**는 한국어로 응답·로그

### 6.4 추가 지침 및 룰

- **동일 도메인 서빙**  
  - 프론트엔드와 백엔드는 동일 도메인에서 상호 호출
- **코드 생성 원칙**  
  - 요청된 내용만 정확히 수정·생성  
  - 추가 요청 시 새 로직 작성 (기존 구조 최대한 유지)
- **문서화**  
  - 프로젝트 내 주석, 로그, 디버깅 메시지는 모두 한국어  
  - jsdoc, docstring 등으로 기본 설명 작성 (불필요한 상세 문서화는 지양)

---

## 7. (추가) 예상 용량 및 사용량

### 7.1 Cloud SQL (MySQL) 저장 용량

- **일평균 50건 주문 + 50건 리마크** → 하루 100행, 연간 36,500행
- 인덱스와 로그 등을 포함해 **1.5배** 여유로 고려하면,  
  - **연간 약 150MB** 수준 (1개월치만 저장 후 BigQuery로 이전)

### 7.2 Cloud SQL (MySQL) 처리량 (TPS)

- **쓰기(Insert)**  
  - 하루 50~100건 → TPS 부담 미미
- **읽기(Query)**  
  - 초당 약 10회(QPS 10), 동시 사용자 50명 미만  
  - 일반적인 중소형 MySQL 인스턴스로 충분 처리 가능

### 7.3 예상 사용량
- **유저 사용량**
	- 일평균 100건 생성, TPS 100 이하, 동시 사용자 50명 미만
---

## 마무리

위 내용은 **프로젝트 전반**(기능 요구사항, 비관적 락 적용, QA 시나리오, 예상 용량 등)을 망라한 **최종 루트 프롬프트**입니다.  
개발·운영 시, 다음 사항을 반드시 준수해 주십시오.

1. **비관적 락**으로 다중 사용자 환경에서의 **데이터 무결성** 유지  
2. **DB 구조 변경은 사전 협의**  
3. **한국어 주석** 및 로그/에러 메시지  
4. **무료 라이브러리만** 활용  
5. **동일 도메인** 내에서 프론트·백엔드 연동

*(위 문서는 txt 형식이며, 필요 시 내부 위키나 협업 툴에 복사·활용하시기 바랍니다.)*
