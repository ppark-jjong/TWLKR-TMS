배송 실시간 관제 시스템 백엔드 동작 방식 설명서
1. 프로젝트 구조 및 아키텍처
1.1 디렉토리 구조
현재 백엔드 코드는 다음과 같은 계층형 아키텍처로 구성되어 있습니다:
복사backend/
├── app/
│   ├── api/            # API 라우터 및 엔드포인트 정의
│   ├── config/         # 설정 관련 모듈
│   ├── models/         # 데이터베이스 모델 정의
│   ├── repositories/   # 데이터 액세스 로직
│   ├── schemas/        # Pydantic 스키마 정의
│   ├── services/       # 비즈니스 로직
│   └── utils/          # 유틸리티 함수
├── static/             # 정적 파일 (클라이언트 빌드 결과물)
└── main.py             # 애플리케이션 진입점
1.2 기술 스택

웹 프레임워크: FastAPI (비동기 API 구현)
ORM: SQLAlchemy (데이터베이스 접근)
데이터 검증: Pydantic (요청/응답 스키마 검증)
인증: JWT (액세스/리프레시 토큰 체계)
데이터베이스: MySQL (InnoDB 엔진)
배포: Docker 기반 컨테이너화

2. 동시성 제어 메커니즘
2.1 비관적 락(Pessimistic Lock)
시스템은 dashboard_lock 테이블을 활용한 비관적 락 메커니즘을 구현합니다:

락 획득 과정:

DashboardLockRepository의 acquire_lock 메서드 호출
대시보드 ID, 사용자 ID, 락 타입, 만료 시간 정보로 레코드 생성
이미 락이 존재하면 소유자 확인 후 충돌 여부 판단


락 타입:

EDIT: 필드 수정 작업
STATUS: 상태 변경 작업
ASSIGN: 배차 처리 작업
REMARK: 메모 작성/수정 작업


락 만료/해제:

기본 타임아웃 5분 (300초)
작업 완료 후 release_lock 메서드로 명시적 해제
만료된 락은 cleanup_expired_locks 메서드로 주기적 정리



2.2 낙관적 락(Optimistic Lock)
대시보드 레코드의 version 필드를 활용한 낙관적 락 메커니즘을 구현합니다:

버전 관리 로직:

DashboardRepository의 각 수정 메서드에서 버전 검증
클라이언트가 제공한 버전과 현재 DB 버전 비교
버전 불일치 시 OptimisticLockException 발생


주요 구현 메서드:

update_dashboard_fields_with_version
update_dashboard_status_with_version
assign_driver_with_version


메모 작업과 연계:

메모 생성/수정 시 대시보드 버전도 함께 증가
DashboardRemarkRepository의 메서드에서 버전 검증



3. 핵심 서비스 로직
3.1 인증 서비스
AuthService 클래스는 다음 인증 관련 기능을 제공합니다:

사용자 인증:

authenticate_user: ID/비밀번호 검증 및 토큰 발급
bcrypt 기반 비밀번호 검증
토큰 페이로드에 사용자 ID, 부서, 권한 정보 포함


토큰 관리:

refresh_token: 리프레시 토큰으로 액세스 토큰 갱신
logout: 리프레시 토큰 무효화



3.2 대시보드 서비스
DashboardService 클래스는 주문 관리의 핵심 비즈니스 로직을 구현합니다:

주문 조회 기능:

get_dashboard_list_by_date: ETA 기준 날짜별 목록 조회
get_dashboard_detail: 상세 정보 조회
search_dashboards_by_order_no: 주문번호 기반 검색


주문 생성/수정 기능:

create_dashboard: 새 주문 생성 및 메모 함께 저장
update_dashboard_fields: 필드 수정 (비관적/낙관적 락 적용)
update_status: 상태 변경 (비관적/낙관적 락 적용)
assign_driver: 배차 처리 (다중 대시보드, 비관적/낙관적 락 적용)


버전 관리 기능:

get_dashboard_with_version_check: 버전 일치 여부 확인



3.3 메모 서비스
DashboardRemarkService 클래스는 메모 관련 비즈니스 로직을 구현합니다:

메모 관리 기능:

get_remarks_by_dashboard_id: 대시보드별 메모 목록 조회
create_remark: 메모 생성 (대시보드 버전 연계)
update_remark: 메모 수정 (대시보드 버전 연계)


메모 이력 관리:

메모 수정 시 새 레코드 생성 방식으로 이력 유지
생성자 정보 및 시간 자동 기록



3.4 시각화 서비스
VisualizationService 클래스는 데이터 시각화를 위한 집계 로직을 구현합니다:

시각화 데이터 집계:

get_delivery_status: 배송 현황 데이터 집계 (부서별/상태별)
get_hourly_orders: 시간대별 접수량 데이터 집계


캐싱 전략:

날짜 범위 정보 인메모리 캐싱 (TTL: 1시간)
대용량 집계 결과 재사용 최적화



4. 리포지토리 계층 구현
4.1 대시보드 리포지토리
DashboardRepository 클래스는 대시보드 데이터 접근 로직을 담당합니다:

주요 조회 메서드:

get_dashboards_by_date_range: ETA 기준 날짜 범위 조회
get_dashboard_detail: 상세 정보 조회 (메모 포함)
search_dashboards_by_order_no: 주문번호 기반 검색


락 관련 메서드:

get_dashboard_detail_with_lock: SELECT FOR UPDATE로 DB 레벨 락 획득
acquire_locks_for_multiple_dashboards: 다중 대시보드 락 획득


낙관적 락 메서드:

update_dashboard_fields_with_version: 버전 검증 후 필드 수정
update_dashboard_status_with_version: 버전 검증 후 상태 변경
assign_driver_with_version: 버전 검증 후 배차 처리



4.2 메모 리포지토리
DashboardRemarkRepository 클래스는 메모 데이터 접근 로직을 담당합니다:

메모 관리 메서드:

get_remarks_by_dashboard_id: 대시보드별 메모 목록 조회
get_remark_by_id: 메모 ID로 조회
create_remark: 메모 생성 (대시보드 버전 확인 포함)
update_remark: 메모 수정 (대시보드 버전 확인 포함)



4.3 락 리포지토리
DashboardLockRepository 클래스는 비관적 락 관리 로직을 담당합니다:

락 관리 메서드:

acquire_lock: 락 획득 시도
release_lock: 락 해제
cleanup_expired_locks: 만료된 락 정리



5. API 라우터 구현
5.1 인증 라우터
auth_router.py는 인증 관련 엔드포인트를 정의합니다:

주요 엔드포인트:

POST /auth/login: 로그인 및 토큰 발급
POST /auth/refresh: 토큰 갱신
GET /auth/check-session: 세션 유효성 확인
POST /auth/logout: 로그아웃 처리



5.2 대시보드 라우터
dashboard_router.py는 대시보드 관련 엔드포인트를 정의합니다:

조회 엔드포인트:

GET /dashboard/list: 날짜 범위별 목록 조회
GET /dashboard/{dashboard_id}: 상세 정보 조회
GET /dashboard/search: 주문번호로 검색


수정 엔드포인트:

POST /dashboard: 새 대시보드 생성
PATCH /dashboard/{dashboard_id}/status: 상태 변경
PATCH /dashboard/{dashboard_id}/fields: 필드 수정
POST /dashboard/assign: 배차 처리
DELETE /dashboard: 대시보드 삭제 (관리자 전용)


낙관적 락 관련 파라미터:

client_version: 클라이언트 버전 정보 (쿼리 파라미터)
client_versions: 다중 대시보드 버전 정보 (요청 바디)



5.3 메모 라우터
dashboard_remark_router.py는 메모 관련 엔드포인트를 정의합니다:

주요 엔드포인트:

GET /dashboard/{dashboard_id}/remarks: 메모 목록 조회
POST /dashboard/{dashboard_id}/remarks: 메모 생성
PATCH /dashboard/{dashboard_id}/remarks/{remark_id}: 메모 수정


버전 관련 파라미터:

dashboard_version: 대시보드 버전 정보 (쿼리 파라미터)



5.4 시각화 라우터
visualization_router.py는 시각화 관련 엔드포인트를 정의합니다:

주요 엔드포인트:

GET /visualization/delivery_status: 배송 현황 데이터 조회
GET /visualization/hourly_orders: 시간대별 접수량 데이터 조회
GET /visualization/date_range: 조회 가능 날짜 범위 조회



6. 배포 구성
6.1 Docker 기반 배포
시스템은 Docker 컨테이너를 통해 배포됩니다:

Dockerfile 구성:

프론트엔드 빌드 스테이지: Node.js 18 기반
백엔드 스테이지: Python 3.11 기반
프론트엔드 빌드 결과물을 백엔드 컨테이너의 /app/static/ 경로에 복사
필요한 시스템 패키지 및 Python 패키지 설치


컨테이너 실행 설정:

포트 매핑: 8000:8000
환경 변수: .env.local 파일에서 로드
볼륨 마운트: /app/data 디렉토리 영속화



6.2 환경 설정
.env.local 파일을 통해 다양한 환경 설정을 관리합니다:

데이터베이스 설정:

호스트, 포트, 사용자, 비밀번호, 데이터베이스 이름
문자셋 설정 (utf8mb4)


서버 설정:

API 포트 (8000)
디버그 모드 여부
API 접두사
프로젝트 이름


인증 설정:

JWT 시크릿 키 (액세스 토큰/리프레시 토큰)
JWT 알고리즘 (HS256)
토큰 만료 시간 (액세스: 60분, 리프레시: 7일)



6.3 데이터베이스 초기화
init-db.sql 스크립트를 통해 데이터베이스 스키마를 초기화합니다:

테이블 생성:

사용자 관리: user, refresh_token
주문 관리: dashboard, dashboard_remark, dashboard_lock
주소 관리: postal_code, postal_code_detail


인덱스 생성:

조회 성능 최적화를 위한 인덱스 설정
외래 키 관계 설정


트리거 생성:

trg_dashboard_before_insert_postal: 우편번호 정보 자동 설정
trg_dashboard_remark_before_insert: 메모 유효성 검증



7. 예외 처리 및 로깅
7.1 예외 클래스 구조
exceptions.py에는 다음과 같은 사용자 정의 예외 클래스가 정의되어 있습니다:

OptimisticLockException:

낙관적 락 충돌 시 발생
상태 코드: 409 Conflict
현재 버전 정보 포함


PessimisticLockException:

비관적 락 충돌 시 발생
상태 코드: 423 Locked
락 보유자 정보 포함



7.2 로깅 시스템
logger.py에 정의된 로깅 유틸리티를 통해 시스템 로깅을 수행합니다:

주요 로깅 함수:

log_info: 정보 로깅
log_error: 에러 로깅 (예외 정보 포함)
log_warning: 경고 로깅


로그 포맷:

컨텍스트 정보 포함
에러 발생 시 예외 스택 트레이스 기록
관련 데이터 함께 로깅 (선택적)



7.3 오류 처리 유틸리티
error_handler.py에는 오류 처리 유틸리티 함수가 정의되어 있습니다:

주요 처리 함수:

handle_database_error: 데이터베이스 오류 처리
handle_validation_error: 입력값 검증 오류 처리



8. 비즈니스 규칙 및 제약사항
8.1 권한별 제약사항
시스템은 사용자 권한에 따라 다음과 같은 제약을 적용합니다:

일반 사용자(USER) 제약:

상태 변경: 규칙에 따른 순차적 변경만 가능
배차 처리: WAITING 상태 주문만 배차 가능
주문 삭제: 불가능 (API 접근 권한 없음)


관리자(ADMIN) 권한:

상태 변경: 모든 상태 간 자유롭게 변경 가능
배차 처리: 모든 상태의 주문 배차 가능
주문 삭제: 가능 (DELETE 요청 권한 있음)



8.2 상태 변경 규칙
상태 변경은 다음과 같은 규칙을 따릅니다:

상태 전이 규칙:

WAITING → IN_PROGRESS, CANCEL
IN_PROGRESS → COMPLETE, ISSUE, CANCEL
COMPLETE → (더 이상 변경 불가)
ISSUE → (더 이상 변경 불가)
CANCEL → (더 이상 변경 불가)


상태 변경 시간 처리:

IN_PROGRESS로 변경 시 depart_time 설정
COMPLETE/ISSUE로 변경 시 complete_time 설정
WAITING/CANCEL로 변경 시 시간 필드 초기화



8.3 입력 데이터 검증 규칙
다양한 필드에 대한 유효성 검증 규칙이 적용됩니다:

주요 검증 규칙:

우편번호: 5자리 숫자
연락처: 정규식 패턴 (xxx-xxxx-xxxx)
ETA: 현재 시간 이후로만 설정 가능
주문번호: 최대 15자, 숫자와 하이픈만 허용



9. 결론
배송 실시간 관제 시스템의 백엔드는 FastAPI 기반의 계층형 아키텍처를 채택하고 있으며, 비관적 락과 낙관적 락을 결합한 고급 동시성 제어 메커니즘을 구현하고 있습니다. 다중 사용자 환경에서 데이터 일관성을 유지하면서도 사용자 경험을 저해하지 않는 효율적인 설계로, 배송 및 반품 주문을 종합적으로 관리할 수 있는 기능을 제공합니다.
핵심 구성요소인 대시보드 서비스, 메모 서비스, 인증 서비스, 시각화 서비스가 각각의 책임을 명확히 분리하고 있으며, 리포지토리 계층을 통해 데이터 접근 로직을 캡슐화하고 있습니다. Docker 기반의 배포 구성으로 환경 간 일관성을 보장하고, 구조화된 예외 처리와 로깅 시스템을 통해 안정적인 운영이 가능합니다.