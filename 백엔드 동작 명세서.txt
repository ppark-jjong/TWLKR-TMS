# 배송 실시간 관제 시스템 백엔드 API 명세서

## 1. 개요

본 문서는 배송 실시간 관제 시스템의 백엔드 API에 대한 상세 명세와 프로세스를 제공합니다. 프론트엔드와 백엔드 간의 일관성 있는 서비스 동작을 위해 API별 요청/응답 데이터와 주요 서비스 로직을 설명합니다.

### 1.1. 공통 응답 형식

모든 API는 다음과 같은 일관된 응답 형식을 사용합니다:

```json
{
  "success": true/false,
  "message": "응답 메시지",
  "data": { ... } // 응답 데이터 (API마다 상이)
}
```

### 1.2. 에러 응답 형식

에러 발생 시 다음과 같은 응답 형식을 사용합니다:

```json
{
  "success": false,
  "message": "에러 메시지",
  "error": {
    "code": "에러 코드",
    "detail": "상세 에러 메시지",
    "fields": { ... } // 필드별 유효성 검증 실패 정보 (선택적)
  }
}
```

### 1.3. 동시성 제어 메커니즘

시스템은 비관적 락(Pessimistic Lock)을 사용하여 동시성 문제를 제어합니다:
- 리소스 편집 시 먼저 락을 획득해야 함
- 락 획득 실패 시 HTTP 423 (Locked) 응답 반환
- 락 타임아웃: 환경 변수로 설정 (기본값: 300초)

## 2. 인증 API

### 2.1. 로그인 (POST /auth/login)

**기능**: 사용자 인증 및 JWT 토큰 발급

**요청 데이터**:
```json
{
  "user_id": "사용자ID",
  "password": "비밀번호"
}
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "type": "delivery_status",
    "total_count": 100,
    "department_breakdown": {
      "CS": {
        "total": 40,
        "status_breakdown": [
          {"status": "WAITING", "count": 10, "percentage": 25.0},
          {"status": "IN_PROGRESS", "count": 15, "percentage": 37.5},
          {"status": "COMPLETE", "count": 10, "percentage": 25.0},
          {"status": "ISSUE", "count": 3, "percentage": 7.5},
          {"status": "CANCEL", "count": 2, "percentage": 5.0}
        ]
      },
      "HES": {
        "total": 35,
        "status_breakdown": [
          // 동일한 구조로 상태별 통계
        ]
      },
      "LENOVO": {
        "total": 25,
        "status_breakdown": [
          // 동일한 구조로 상태별 통계
        ]
      }
    }
  },
  "date_range": {
    "oldest_date": "2023-01-01",
    "latest_date": "2023-01-31"
  }
}
```

**주요 로직**:
1. 날짜 파라미터 검증 및 변환
2. create_time 기준으로 해당 날짜 범위의 데이터 조회
3. pandas DataFrame을 활용해 부서별/상태별 데이터 분석
4. 조회 가능한 날짜 범위 정보 포함
5. 통계 데이터 반환 (부서별, 상태별 건수 및 백분율)

**오류 케이스**:
- 잘못된 날짜 형식: 400 Bad Request
- 서버 오류: 500 Internal Server Error

### 6.2. 시간대별 접수량 데이터 조회 (GET /visualization/hourly_orders)

**기능**: 부서별 시간대별 접수량 통계 데이터 제공

**요청 파라미터**:
```
start_date: "YYYY-MM-DD"
end_date: "YYYY-MM-DD"
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "type": "hourly_orders",
    "total_count": 100,
    "average_count": 33.3,
    "department_breakdown": {
      "CS": {
        "total": 40,
        "hourly_counts": {
          "09-10": 5,
          "10-11": 8,
          "11-12": 6,
          // ... 다른 시간대
          "18-19": 3,
          "야간(19-09)": 2
        }
      },
      "HES": {
        "total": 35,
        "hourly_counts": {
          // 동일한 구조로 시간대별 통계
        }
      },
      "LENOVO": {
        "total": 25,
        "hourly_counts": {
          // 동일한 구조로 시간대별 통계
        }
      }
    },
    "time_slots": [
      {"label": "09-10", "start": 9, "end": 10},
      {"label": "10-11", "start": 10, "end": 11},
      // ... 다른 시간대
      {"label": "18-19", "start": 18, "end": 19},
      {"label": "야간(19-09)", "start": 19, "end": 9}
    ]
  },
  "date_range": {
    "oldest_date": "2023-01-01",
    "latest_date": "2023-01-31"
  }
}
```

**주요 로직**:
1. 날짜 파라미터 검증 및 변환
2. create_time 기준으로 해당 날짜 범위의 데이터 조회
3. 시간대 분류 (주간: 09-19시 1시간 단위, 야간: 19-09시 통합)
4. pandas DataFrame을 활용해 부서별/시간대별 데이터 분석
5. 일평균 계산, 시간대별 접수 현황 및 통계 포함하여 응답

**오류 케이스**:
- 잘못된 날짜 형식: 400 Bad Request
- 서버 오류: 500 Internal Server Error

### 6.3. 조회 가능한 날짜 범위 조회 (GET /visualization/date_range)

**기능**: 시각화 데이터 조회 가능한 날짜 범위 조회

**요청 파라미터**: 없음

**응답 데이터**:
```json
{
  "success": true,
  "message": "조회 가능 날짜 범위를 조회했습니다",
  "date_range": {
    "oldest_date": "2023-01-01",
    "latest_date": "2023-01-31"
  }
}
```

**주요 로직**:
1. 데이터베이스에서 create_time 컬럼의 최소/최대 값 조회
2. 날짜 범위 정보 반환 (캐싱 적용)

**오류 케이스**:
- 서버 오류: 500 Internal Server Error

## 7. 프론트엔드 연동 가이드라인

### 7.1. 인증 흐름

1. **로그인 프로세스**:
   - 사용자가 로그인 정보 입력
   - `/auth/login` API 호출
   - 토큰 받은 후 로컬 스토리지에 저장
   - 액세스 토큰은 모든 API 요청 헤더에 포함

2. **토큰 갱신 프로세스**:
   - API 호출 시 401 응답 수신
   - 리프레시 토큰으로 `/auth/refresh` API 호출
   - 새 토큰으로 로컬 스토리지 업데이트
   - 원래 요청 재시도

3. **로그아웃 프로세스**:
   - 리프레시 토큰으로 `/auth/logout` API 호출
   - 로컬 스토리지에서 토큰 제거
   - 로그인 페이지로 리다이렉트

### 7.2. 대시보드 관리 흐름

1. **대시보드 목록 및 필터링**:
   - 날짜 기준으로 `/dashboard/list` API 호출
   - 응답 데이터로 대시보드 목록 표시
   - 응답에 포함된 날짜 범위 정보로 날짜 선택기 설정

2. **대시보드 상세 정보**:
   - `/dashboard/{dashboard_id}` API 호출
   - 응답 데이터로 상세 정보 표시
   - 락 정보 확인하여 편집 가능 여부 판단

3. **필드 편집 프로세스**:
   - 편집 시작 전 락 획득 API 호출
   - 락 획득 성공 시 필드 편집 활성화
   - 저장 시 업데이트 API 호출
   - 작업 완료 후 명시적 락 해제 API 호출

4. **상태 변경 프로세스**:
   - 상태 변경 버튼 클릭 시 락 획득 시도
   - 락 획득 성공 시 상태 변경 API 호출
   - 실패 시 에러 메시지 표시
   - 작업 완료 후 락 해제

5. **배차 처리 프로세스**:
   - 대시보드 목록에서 여러 항목 선택
   - 배차 정보 입력 후 `/dashboard/assign` API 호출
   - 성공/실패 메시지 표시

### 7.3. 메모 관리 흐름

1. **메모 조회**:
   - 대시보드 상세 조회 시 메모 목록 포함
   - 최신순으로 정렬된 메모 표시

2. **메모 편집 프로세스**:
   - 편집 버튼 클릭 시 락 획득 시도
   - 락 획득 성공 시 편집 모드 활성화
   - 저장 버튼 클릭 시 메모 업데이트 API 호출
   - 작업 완료 후 락 해제

3. **메모 삭제 프로세스**:
   - 삭제 버튼 클릭 시 락 획득 시도
   - 락 획득 성공 시 삭제 API 호출
   - 성공/실패 메시지 표시
   - 작업 완료 후 락 해제

### 7.4. 락 관리 기법

1. **락 획득 및 해제 시점**:
   - 락 획득: 편집 시작 시
   - 락 해제: 저장/취소 버튼 클릭 시, 페이지 이탈 시

2. **락 오류 처리**:
   - 423 응답 수신 시 "다른 사용자가 편집 중입니다" 메시지 표시
   - locked_by 정보 활용하여 락 소유자 표시
   - 편집 모드 비활성화

3. **자동 락 해제 처리**:
   - 페이지 이탈 시 useEffect cleanup에서 락 해제 API 호출
   - 브라우저 닫기 전 beforeunload 이벤트 핸들러에서 락 해제 시도

## 8. 에러 처리 및 상태 코드

### 8.1. HTTP 상태 코드

- **200 OK**: 요청 성공
- **400 Bad Request**: 유효하지 않은, 누락되거나 형식이 잘못된 요청 데이터
- **401 Unauthorized**: 인증 실패 또는 토큰 만료
- **403 Forbidden**: 권한 없음 (인증은 되었으나 접근 권한 없음)
- **404 Not Found**: 리소스를 찾을 수 없음
- **409 Conflict**: 낙관적 락 충돌 (다른 버전과 충돌)
- **423 Locked**: 비관적 락 충돌 (다른 사용자가 락 보유 중)
- **500 Internal Server Error**: 서버 오류

### 8.2. 에러 메시지 가이드라인

- 사용자에게 명확한 에러 메시지 제공
- 필요시 해결 방법 안내
- 개발자용 상세 로그는 서버측에만 기록
- 보안상 민감한 정보는 에러 메시지에 포함하지 않음

## 9. 비관적 락 구현 상세

### 9.1. 비관적 락 흐름

1. **락 획득 과정**:
   - 애플리케이션 레벨 락: `dashboard_lock` 테이블에 레코드 생성
   - 데이터베이스 레벨 락: `SELECT ... FOR UPDATE NOWAIT` 구문으로 로우 락

2. **락 충돌 처리**:
   - 다른 사용자 락 보유 중: HTTP 423 Locked 응답
   - 현재 사용자 락 보유 중: 락 갱신
   - 만료된 락: 자동 삭제 후 새 락 생성

3. **락 해제 과정**:
   - 명시적 해제: DELETE /dashboard/{dashboard_id}/lock API 호출
   - 암묵적 해제: 작업 완료 시 서비스 레이어에서 자동 해제
   - 타임아웃 해제: 락 타임아웃(default 300초) 이후 자동 해제

### 9.2. 락 타입별 사용 사례

1. **EDIT 락**: 대시보드 필드 편집 시 사용
2. **STATUS 락**: 상태 변경 시 사용
3. **ASSIGN 락**: 배차 처리 시 사용
4. **REMARK 락**: 메모 편집 시 사용

각 락 타입은 서로 배타적이며, 한 사용자가 특정 대시보드에 대해 여러 타입의 락을 동시에 보유할 수 없습니다.

## 10. 성능 최적화 및 보안 고려사항

### 10.1. 캐싱 전략

- **데이터 범위 캐싱**: 시각화 API에서 날짜 범위 정보 캐싱 (1시간 TTL)
- **메모리 캐시**: 반복 호출이 많은 데이터 메모리 캐싱

### 10.2. 트랜잭션 관리

- **원자성 보장**: 모든 DB 작업은 트랜잭션 내에서 처리
- **롤백 메커니즘**: 오류 발생 시 자동 롤백
- **일관성 관리**: 락 획득/해제 및 DB 작업 원자적 수행

### 10.3. 보안 고려사항

- **인증 토큰**: JWT 기반 보안 토큰 사용
- **API 접근 제어**: 각 API 별 권한 검증
- **데이터 유효성 검증**: 모든 입력 데이터 검증
- **안전한 에러 처리**: 민감 정보 노출 방지

## 11. 시스템 요구사항 및 종속성

### 11.1. 환경 요구사항

- **Python**: 3.11 이상
- **Database**: MySQL 8.0
- **OS**: Windows, Linux, macOS 호환

### 11.2. 주요 라이브러리 종속성

- **FastAPI**: 0.109.0
- **SQLAlchemy**: 2.0.25
- **Pydantic**: 2.5.3
- **PyJWT**: 2.8.0
- **pandas**: 2.2.0
- **python-jose**: 3.3.0
- **uvicorn**: 0.27.0
"message": "로그인에 성공했습니다",
  "token": {
    "access_token": "JWT_액세스_토큰_문자열",
    "refresh_token": "JWT_리프레시_토큰_문자열"
  },
  "user": {
    "user_id": "사용자ID",
    "user_department": "부서명(CS/HES/LENOVO)",
    "user_role": "권한(ADMIN/USER)"
  }
}
```

**주요 로직**:
1. 사용자 ID로 사용자 정보 조회
2. 비밀번호 검증 (bcrypt 해시 비교)
3. JWT 토큰 생성 (access_token, refresh_token)
4. 리프레시 토큰 DB 저장

**오류 케이스**:
- 사용자 정보 없음: 401 Unauthorized
- 비밀번호 불일치: 401 Unauthorized
- 서버 오류: 500 Internal Server Error

### 2.2. 세션 체크 (GET /auth/check-session)

**기능**: JWT 토큰 유효성 검증 및 사용자 정보 조회

**요청 헤더**:
```
Authorization: Bearer {JWT_액세스_토큰}
```

**응답 데이터**:
```json
{
  "success": true,
  "user": {
    "user_id": "사용자ID",
    "user_department": "부서명",
    "user_role": "권한"
  }
}
```

**주요 로직**:
1. 헤더에서 JWT 토큰 추출
2. 토큰 유효성 및 만료 검증
3. 토큰에서 사용자 정보 추출

**오류 케이스**:
- 토큰 없음: 401 Unauthorized
- 유효하지 않은 토큰: 401 Unauthorized
- 만료된 토큰: 401 Unauthorized

### 2.3. 토큰 갱신 (POST /auth/refresh)

**기능**: 리프레시 토큰을 사용하여 새 액세스 토큰 발급

**요청 데이터**:
```json
{
  "refresh_token": "JWT_리프레시_토큰_문자열"
}
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "토큰이 갱신되었습니다",
  "token": {
    "access_token": "신규_JWT_액세스_토큰",
    "refresh_token": "신규_JWT_리프레시_토큰"
  }
}
```

**주요 로직**:
1. 리프레시 토큰 유효성 검증 (DB에 저장된 값과 비교)
2. 새 액세스 토큰 생성
3. 새 리프레시 토큰 생성 및 DB 업데이트

**오류 케이스**:
- 유효하지 않은 리프레시 토큰: 401 Unauthorized
- DB에 토큰 정보 없음: 401 Unauthorized
- 만료된 리프레시 토큰: 401 Unauthorized

### 2.4. 로그아웃 (POST /auth/logout)

**기능**: 리프레시 토큰 폐기 및 로그아웃 처리

**요청 데이터**:
```json
{
  "refresh_token": "JWT_리프레시_토큰_문자열"
}
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "로그아웃이 완료되었습니다"
}
```

**주요 로직**:
1. DB에서 리프레시 토큰 삭제

**오류 케이스**:
- 서버 오류: 500 Internal Server Error

## 3. 대시보드 API

### 3.1. 대시보드 목록 조회 (GET /dashboard/list)

**기능**: ETA 기준으로 날짜 범위 내 대시보드 목록 조회

**요청 파라미터**:
```
date: "YYYY-MM-DD" (단일 날짜)
```
또는
```
start_date: "YYYY-MM-DD"
end_date: "YYYY-MM-DD" (날짜 범위)
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "date_range": {
      "oldest_date": "YYYY-MM-DD",
      "latest_date": "YYYY-MM-DD"
    },
    "items": [
      {
        "dashboard_id": 1,
        "order_no": "ORDER-12345",
        "type": "DELIVERY",
        "status": "WAITING",
        "department": "CS",
        "warehouse": "SEOUL",
        "sla": "당일배송",
        "eta": "2023-01-01T14:00:00+09:00",
        "create_time": "2023-01-01T09:00:00+09:00",
        "depart_time": null,
        "driver_name": null,
        "customer": "고객명",
        "region": "서울 강남구 역삼동"
      },
      // ... 추가 항목
    ],
    "user_role": "ADMIN",
    "is_admin": true
  }
}
```

**주요 로직**:
1. 날짜 파라미터 검증 및 변환
2. ETA 기준으로 해당 날짜 범위의 대시보드 목록 조회
3. 상태별 정렬: WAITING → IN_PROGRESS → COMPLETE → ISSUE → CANCEL
4. 사용자 권한 정보 포함하여 응답

**오류 케이스**:
- 잘못된 날짜 형식: 400 Bad Request
- 서버 오류: 500 Internal Server Error

### 3.2. 대시보드 상세 조회 (GET /dashboard/{dashboard_id})

**기능**: 대시보드 ID로 상세 정보 조회 (메모 포함)

**요청 파라미터**:
```
dashboard_id: 대시보드 ID (정수)
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "상세 정보를 조회했습니다",
  "data": {
    "dashboard_id": 1,
    "order_no": "ORDER-12345",
    "type": "DELIVERY",
    "status": "WAITING",
    "department": "CS",
    "warehouse": "SEOUL",
    "sla": "당일배송",
    "eta": "2023-01-01T14:00:00+09:00",
    "create_time": "2023-01-01T09:00:00+09:00",
    "depart_time": null,
    "complete_time": null,
    "driver_name": null,
    "driver_contact": null,
    "address": "서울시 강남구 역삼동 123-456",
    "postal_code": "12345",
    "distance": 15,
    "duration_time": 30,
    "customer": "고객명",
    "contact": "010-1234-5678",
    "city": "서울시",
    "county": "강남구",
    "district": "역삼동",
    "remarks": [
      {
        "remark_id": 1,
        "dashboard_id": 1,
        "content": null,
        "created_at": "2023-01-01T09:10:00+09:00",
        "created_by": "사용자ID",
        "formatted_content": null
      }
    ],
    "is_locked": false
  },
  "is_locked": false,
  "lock_info": null
}
```

**주요 로직**:
1. 대시보드 ID로 상세 정보 조회
2. 연관된 메모 목록 조회 (최신순 정렬)
3. 현재 락 상태 확인
4. 메모 목록 및 락 정보 포함하여 응답

**오류 케이스**:
- 대시보드 없음: 404 Not Found
- 서버 오류: 500 Internal Server Error

### 3.3. 대시보드 생성 (POST /dashboard)

**기능**: 새 배송 대시보드 생성 (빈 메모 자동 생성)

**요청 데이터**:
```json
{
  "type": "DELIVERY",
  "warehouse": "SEOUL",
  "order_no": "ORDER-12345",
  "eta": "2023-01-01T14:00:00+09:00",
  "sla": "당일배송",
  "postal_code": "12345",
  "address": "서울시 강남구 역삼동 123-456",
  "customer": "고객명",
  "contact": "010-1234-5678"
}
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "대시보드가 생성되었습니다",
  "data": {
    // 대시보드 상세 정보와 동일한 형식
    // remarks 배열에는 초기 빈 메모가 포함됨
  }
}
```

**주요 로직**:
1. 필드 유효성 검증
2. 대시보드 기본 정보 설정:
   - 현재 사용자의 부서 정보 추가
   - 초기 상태는 "WAITING"으로 설정
   - 현재 시간으로 create_time 설정
3. 우편번호로 지역 정보(city, county, district) 자동 설정
4. 대시보드 생성 후 자동으로 빈 메모 생성
5. 생성된 대시보드의 상세 정보 반환

**오류 케이스**:
- 필드 유효성 검증 실패: 400 Bad Request
- 서버 오류: 500 Internal Server Error

### 3.4. 대시보드 필드 업데이트 (PATCH /dashboard/{dashboard_id}/fields)

**기능**: 대시보드 필드 업데이트 (비관적 락 사용)

**요청 파라미터**:
```
dashboard_id: 대시보드 ID (정수)
client_version: 클라이언트 버전 (정수, 선택적)
```

**요청 데이터**:
```json
{
  "eta": "2023-01-01T15:00:00+09:00",
  "customer": "변경된 고객명",
  "contact": "010-9876-5432",
  "address": "변경된 주소",
  "postal_code": "54321"
}
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "필드가 업데이트되었습니다",
  "data": {
    // 업데이트된 대시보드 상세 정보
  }
}
```

**주요 로직**:
1. 필드 값 유효성 검증 (우편번호, 연락처 등)
2. 비관적 락 획득 시도
3. 필드 업데이트 실행
4. 변경사항 커밋
5. 락 해제
6. 업데이트된 대시보드 정보 반환

**오류 케이스**:
- 필드 유효성 검증 실패: 400 Bad Request
- 대시보드 없음: 404 Not Found
- 락 획득 실패 (다른 사용자가 수정 중): 423 Locked
- 서버 오류: 500 Internal Server Error

### 3.5. 대시보드 상태 업데이트 (PATCH /dashboard/{dashboard_id}/status)

**기능**: 대시보드 상태 변경 (비관적 락 사용, 시간 자동 업데이트)

**요청 파라미터**:
```
dashboard_id: 대시보드 ID (정수)
client_version: 클라이언트 버전 (정수, 선택적)
```

**요청 데이터**:
```json
{
  "status": "IN_PROGRESS",
  "is_admin": false
}
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "IN_PROGRESS 상태로 변경되었습니다",
  "data": {
    // 업데이트된 대시보드 상세 정보
  }
}
```

**주요 로직**:
1. 상태 값 유효성 검증
2. 비관적 락 획득 시도
3. 상태 전이 규칙 검증 (관리자가 아닌 경우):
   - WAITING → IN_PROGRESS/CANCEL
   - IN_PROGRESS → COMPLETE/ISSUE/CANCEL
   - COMPLETE/ISSUE/CANCEL → (전이 불가)
4. 배차 정보 확인 (상태 변경 시 배차 정보 필요)
5. 시간 자동 업데이트:
   - IN_PROGRESS: depart_time 설정
   - COMPLETE/ISSUE: complete_time 설정
   - WAITING/CANCEL: 시간 정보 초기화
6. 변경사항 커밋 및 락 해제
7. 업데이트된 대시보드 정보 반환

**오류 케이스**:
- 유효하지 않은 상태: 400 Bad Request
- 배차 정보 없음: 400 Bad Request
- 규칙에 맞지 않는 상태 전이: 400 Bad Request
- 대시보드 없음: 404 Not Found
- 락 획득 실패: 423 Locked
- 서버 오류: 500 Internal Server Error

### 3.6. 배차 처리 (POST /dashboard/assign)

**기능**: 여러 대시보드에 동일한 배송 담당자 할당 (비관적 락 사용)

**요청 데이터**:
```json
{
  "dashboard_ids": [1, 2, 3],
  "driver_name": "배송기사명",
  "driver_contact": "010-1234-5678"
}
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "배차가 완료되었습니다",
  "data": {
    "updated_dashboards": [
      // 업데이트된 대시보드 정보 배열
    ]
  }
}
```

**주요 로직**:
1. 연락처 형식 검증
2. 여러 대시보드에 대한 비관적 락 획득 시도
3. 배차 정보(driver_name, driver_contact) 일괄 업데이트
4. 변경사항 커밋 및 모든 락 해제
5. 업데이트된 대시보드 목록 반환

**오류 케이스**:
- 연락처 형식 오류: 400 Bad Request
- 일부 대시보드 존재하지 않음: 400 Bad Request
- 락 획득 실패: 423 Locked
- 서버 오류: 500 Internal Server Error

### 3.7. 대시보드 삭제 (DELETE /dashboard)

**기능**: 여러 대시보드 삭제 (관리자 전용)

**요청 데이터**:
```json
{
  "dashboard_ids": [1, 2, 3]
}
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "선택한 항목이 삭제되었습니다",
  "data": {
    "deleted_count": 3
  }
}
```

**주요 로직**:
1. 관리자 권한 검증
2. 해당 ID의 대시보드 삭제 (CASCADE 설정으로 연관 데이터도 삭제)
3. 삭제된 항목 수 반환

**오류 케이스**:
- 권한 없음 (관리자가 아님): 403 Forbidden
- 서버 오류: 500 Internal Server Error

### 3.8. 주문번호로 대시보드 검색 (GET /dashboard/search)

**기능**: 주문번호로 대시보드 검색

**요청 파라미터**:
```
order_no: 검색할 주문번호
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "date_range": {
      "oldest_date": "YYYY-MM-DD",
      "latest_date": "YYYY-MM-DD"
    },
    "items": [
      // 대시보드 목록
    ],
    "user_role": "ADMIN",
    "is_admin": true
  }
}
```

**주요 로직**:
1. 주문번호 형식 검증
2. 주문번호로 대시보드 검색
3. 조회 가능한 날짜 범위 정보 포함
4. 사용자 권한 정보 추가

**오류 케이스**:
- 주문번호 형식 오류: 400 Bad Request
- 서버 오류: 500 Internal Server Error

## 4. 대시보드 메모 API

### 4.1. 메모 생성 (POST /dashboard/{dashboard_id}/remarks)

**기능**: 대시보드에 새 메모 생성 (비관적 락 사용)

**요청 파라미터**:
```
dashboard_id: 대시보드 ID (정수)
dashboard_version: 대시보드 버전 (정수, 선택적)
```

**요청 데이터**:
```json
{
  "content": "메모 내용"
}
```

**응답 데이터**:
```json
{
  "remark_id": 1,
  "dashboard_id": 1,
  "content": "메모 내용",
  "created_at": "2023-01-01T09:15:00+09:00",
  "created_by": "사용자ID",
  "formatted_content": "사용자ID: 메모 내용"
}
```

**주요 로직**:
1. 메모 내용 유효성 검증
2. 비관적 락 획득 시도 (REMARK 유형)
3. 메모 생성
4. 락 해제
5. 생성된 메모 정보 반환

**오류 케이스**:
- 내용 길이 초과: 400 Bad Request
- 대시보드 없음: 404 Not Found
- 락 획득 실패: 423 Locked
- 서버 오류: 500 Internal Server Error

### 4.2. 메모 업데이트 (PATCH /dashboard/{dashboard_id}/remarks/{remark_id})

**기능**: 기존 메모 내용 업데이트 (비관적 락 사용)

**요청 파라미터**:
```
dashboard_id: 대시보드 ID (정수)
remark_id: 메모 ID (정수)
dashboard_version: 대시보드 버전 (정수, 선택적)
```

**요청 데이터**:
```json
{
  "content": "수정된 메모 내용"
}
```

**응답 데이터**:
```json
{
  "remark_id": 1,
  "dashboard_id": 1,
  "content": "수정된 메모 내용",
  "created_at": "2023-01-01T09:15:00+09:00",
  "created_by": "사용자ID",
  "formatted_content": "사용자ID: 수정된 메모 내용"
}
```

**주요 로직**:
1. 메모 존재 여부 확인
2. 비관적 락 획득 시도 (REMARK 유형)
3. 메모 내용 업데이트
4. 락 해제
5. 업데이트된 메모 정보 반환

**오류 케이스**:
- 내용 길이 초과: 400 Bad Request
- 메모 없음: 404 Not Found
- 락 획득 실패: 423 Locked
- 서버 오류: 500 Internal Server Error

### 4.3. 메모 삭제 (DELETE /dashboard/{dashboard_id}/remarks/{remark_id})

**기능**: 메모 삭제 (비관적 락 사용, 작성자/관리자만 가능)

**요청 파라미터**:
```
dashboard_id: 대시보드 ID (정수)
remark_id: 메모 ID (정수)
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "메모가 삭제되었습니다"
}
```

**주요 로직**:
1. 메모 존재 여부 확인
2. 권한 검증 (작성자 본인 또는 관리자만 삭제 가능)
3. 비관적 락 획득 시도 (REMARK 유형)
4. 메모 삭제
5. 락 해제
6. 삭제 성공 여부 반환

**오류 케이스**:
- 메모 없음: 404 Not Found
- 권한 없음: 403 Forbidden
- 락 획득 실패: 423 Locked
- 서버 오류: 500 Internal Server Error

## 5. 대시보드 락 API

### 5.1. 락 획득 (POST /dashboard/{dashboard_id}/lock)

**기능**: 대시보드에 대한 락 획득 시도

**요청 파라미터**:
```
dashboard_id: 대시보드 ID (정수)
```

**요청 데이터**:
```json
{
  "lock_type": "EDIT"  // EDIT, STATUS, ASSIGN, REMARK 중 하나
}
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "락이 획득되었습니다",
  "data": {
    "dashboard_id": 1,
    "locked_by": "사용자ID",
    "lock_type": "EDIT"
  }
}
```

**주요 로직**:
1. 데이터베이스 트랜잭션 락 획득 시도 (FOR UPDATE)
2. 기존 락 정보 확인:
   - 만료된 락인 경우 삭제
   - 현재 사용자의 락인 경우 갱신
   - 다른 사용자의 유효한 락이 있는 경우 충돌 발생
3. 새 락 생성 및 저장 (타임아웃: 환경 변수로 설정)

**오류 케이스**:
- 대시보드 없음: 404 Not Found
- 락 충돌 (다른 사용자의 락 존재): 423 Locked
- 서버 오류: 500 Internal Server Error

### 5.2. 락 해제 (DELETE /dashboard/{dashboard_id}/lock)

**기능**: 대시보드에 대한 락 해제 (본인 소유 락만 해제 가능)

**요청 파라미터**:
```
dashboard_id: 대시보드 ID (정수)
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "락이 해제되었습니다",
  "data": {
    "dashboard_id": 1
  }
}
```

**주요 로직**:
1. 본인 소유의 락인지 확인
2. 락 레코드 삭제
3. 삭제 성공 여부 반환

**오류 케이스**:
- 락이 없거나 본인 소유가 아님: 400 Bad Request
- 서버 오류: 500 Internal Server Error

### 5.3. 락 상태 확인 (GET /dashboard/{dashboard_id}/lock/status)

**기능**: 대시보드에 대한 락 상태 확인

**요청 파라미터**:
```
dashboard_id: 대시보드 ID (정수)
```

**응답 데이터**:
```json
{
  "success": true,
  "message": "락 정보를 조회했습니다",
  "data": {
    "dashboard_id": 1,
    "is_locked": true,
    "locked_by": "사용자ID",
    "lock_type": "EDIT",
    "expires_at": "2023-01-01T09:15:00+09:00"
  }
}
```
또는 락이 없는 경우:
```json
{
  "success": true,
  "message": "락이 없습니다",
  "data": {
    "dashboard_id": 1,
    "is_locked": false
  }
}
```

**주요 로직**:
1. 락 정보 조회
2. 만료된 락인 경우 자동 삭제
3. 락 상태 정보 반환

**오류 케이스**:
- 서버 오류: 500 Internal Server Error

## 6. 시각화 API

### 6.1. 배송 현황 데이터 조회 (GET /visualization/delivery_status)

**기능**: 부서별/상태별 배송 현황 통계 데이터 제공

**요청 파라미터**:
```
start_date: "YYYY-MM-DD"
end_date: "YYYY-MM-DD"
```

**응답 데이터**:
```json
{
  "success": true,