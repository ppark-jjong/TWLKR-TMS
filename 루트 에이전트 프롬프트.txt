## 1. 프로젝트 개요 및 배경

1. **목적**  
   - 기업 내부에서 사용할 **배송 실시간 관제 및 데이터 시각화 서비스**를 개발한다.
   - **실시간 배송 주문 관리 및 모니터링**: ETA(도착 예정 시간) 기준으로 주문을 조회하고 상태를 관리한다.
   - **효율적인 배차 관리**: 담당자 배정 및 상태 변경을 통한 배송 과정 최적화.
   - **데이터 기반 의사결정 지원**: 직관적인 시각화와 시간대별 주문 데이터 분석 기능 제공.
   - **권한별 차별화된 기능 제공**: 일반 사용자와 관리자의 권한 및 기능을 구분하여 제공.
   - **동시성 제어**: 낙관적 락(Optimistic Lock)을 통한 다중 사용자 환경 지원 및 데이터 무결성 보장.

2. **배경**  
   - 전 풀스택/데이터 엔지니어 단독 개발로 시작된 프로젝트이나, 곧 서비스 배포 예정인 상황이다.
   - **모든 주석은 한국어**로 작성하며, *요청한 기능만* 수정/생성한다.  
   - 추가 요청이 있을 경우 *새로운 로직*을 구현한다.

3. **특징**  
   - 상세한 설명 및 주석 제공 (모두 한국어).
   - DB 모델은 임의로 수정 불가(변경 시 사전 허락 필요).
   - 무료 라이브러리만 사용 가능(유료 라이선스 라이브러리 제외).

4. **배송 데이터 흐름**
   - **주문 접수**: order_no 생성 및 초기 상태(WAITING) 설정, create_time 기록
   - **배차 처리**: driver_name, driver_contact 필드 업데이트
   - **상태 변경**: WAITING → IN_PROGRESS → COMPLETE/ISSUE/CANCEL
   - **시간 기록**: 
     - 접수: create_time (자동 기록)
     - 진행 시작: depart_time (IN_PROGRESS 상태 변경 시 기록)
     - 완료/이슈: complete_time (COMPLETE/ISSUE 상태 변경 시 기록)

---

## 2. 기술 스택 및 아키텍처

### 2.1. 프론트엔드

- **주요 기술**:  
  - **React 18.x.x** (Create React App 기반, .js 파일만 사용)  
  - **Ant Design 5.x.x** (추가 커스터마이징 최소화)  
  - **Axios 1.x.x**를 활용한 RESTful API 호출  
  - **Context API**를 사용한 상태 관리 (local state 혼용 가능)

- **코드 스타일**:  
  - `jsdoc` 활용 (주석과 디버깅 메시지는 모두 한국어)  
  - 가독성과 간결성을 중시하며, DRY 원칙 준수

- **빌드/설정**:  
  - CRA(Create React App) 그대로 사용 (webpack, babel 등 세부 설정 불필요)
  - **동일 도메인**에서 백엔드를 호출하도록 구성
  - 무료 라이브러리만 사용 (유료 라이선스 라이브러리 금지)

### 2.2. 백엔드

- **프레임워크**:  
  - **FastAPI 0.95.x 이상 (Python)**

- **구조**:  
  - **API 라우터**: 요청/응답 처리  
  - **서비스 레이어**: 비즈니스 로직 처리  
  - **레포지토리 레이어**: 데이터 접근 로직  
  - **모델/스키마**:
    - `models` 디렉토리: DB 모델 정의  
    - `schemas` 디렉토리: 요청/응답 스키마 (DB 구조 변경 시 사전 허락 필수)

- **ORM**:  
  - **SQLAlchemy 2.0.x**

- **인증**:  
  - **JWT** 기반 인증

- **API 호출 흐름**:
  - 클라이언트 → API 엔드포인트(라우터) → 서비스 레이어 → 레포지토리 레이어 → 데이터베이스
  - 응답은 역순으로 전달: 데이터베이스 → 레포지토리 → 서비스 → API → 클라이언트

### 2.3. 데이터베이스

- **핫 데이터**:  
  - **MySQL 8.0** (최근 1개월치 데이터 유지), `eta` 컬럼 인덱스 적용
  - 로컬은 Docker로 MySQL 컨테이너 실행 (호스트: mysql, 포트: 3306, DB명: `delivery_system`, root/1234)

- **콜드 데이터**:  
  - **BigQuery** (장기 보관 데이터)

### 2.4. 배포 및 테스트 환경

- **배포 환경**:  
  - **Google App Engine (GAE)**  
  - 단일 컨테이너 방식으로 빌드/배포
  - HTTPS/SSL은 GAE 자동 적용

- **로컬 테스트**:  
  - **Docker-desktop** 사용  
  - 운영 환경과 동일하게 단일 컨테이너로 구성해 테스트

- **환경 변수**:  
  - 로컬: `.env.local`  
  - 운영: `.env.production`

---

## 3. 주요 기능 및 엔드포인트

### 3.1. 대시보드(Dashboard)/배차

- **실시간 주문 관리**: ETA 기준 주문 데이터 조회/필터링
- **배차 처리**: 선택한 주문에 배송 담당자 배정
- **상태 관리**: 대기, 진행, 완료, 이슈, 취소 등으로 주문 상태 변경
- **주문 생성/수정**: 신규 주문 생성 및 필드 업데이트
- **낙관적 락 적용**: 버전을 이용해 동시 수정 충돌 시 409 Conflict 반환

### 3.2. 관리자(Admin) 페이지

- **관리자 전용 기능**: 무제한 상태 변경, 주문 삭제 등
- **조회 기능**: ETA 기준 데이터를 대시보드와 동일하게 조회
- **권한 관리**: 관리자 권한 검증 및 접근 제어

### 3.3. 시각화(Visualization)

- **배송 현황 차트**: 파이 차트로 상태별 배송 비율 표시
- **시간대별 주문 분포**: 시간대 기준 막대 그래프로 건수 표시
- **데이터 분석 기준**: `create_time` 컬럼 기준 조회 및 분석

### 3.4. 공통 기능

- **사용자 인증**: JWT 기반 로그인, 토큰 갱신
- **권한 관리**: 일반 사용자/관리자 접근 제어
- **에러 처리**: API 에러 인터셉터 및 메시지 표시
- **페이지 라우팅**: 인증 여부에 따라 접근 제어

## 5. 프로젝트 폴더 구조

아래는 권장 폴더 구조이며, 추가/수정 시 사전 협의가 필요하다.

teckwah_project/
├── backend/                   # 백엔드 관련 코드
│   ├── app/                   # 애플리케이션 관련 코드
│   │   ├── api/               # API 라우터 및 엔드포인트
│   │   ├── config/            # 설정 및 초기화 관련 코드
│   │   ├── models/            # 데이터베이스 모델 정의
│   │   ├── repositories/       # 데이터베이스 접근 레이어
│   │   ├── schemas/           # 데이터 검증 및 직렬화 스키마
│   │   ├── services/          # 비즈니스 로직 및 서비스 레이어
│   │   └── utils/             # 유틸리티 함수 및 헬퍼
│   ├── requirements.txt       # 프로젝트 의존성 목록
│   └── main.py                # FastAPI 애플리케이션의 진입점
├── deploy/                    # 배포 관련 파일
│   ├── local/                 # 로컬 개발 환경 설정
│   │   ├── .env.local         # 환경 변수 설정 파일
│   │   ├── docker-compose.yml  # Docker Compose 설정 파일
│   │   ├── Dockerfile          # Docker 이미지 빌드를 위한 Dockerfile
│   │   └── init-db.sql        # 데이터베이스 초기화 SQL 스크립트
├── frontend/                  # 프론트엔드 관련 코드
│   ├── public/                # 정적 파일
│   ├── src/                   # 소스 코드
│   │   ├── App.js             # 애플리케이션의 메인 컴포넌트
│   │   ├── AppRoutes.js       # 애플리케이션의 라우팅 설정
│   │   ├── components/        # 재사용 가능한 UI 컴포넌트
│   │   ├── contexts/          # React Context API 관련 코드
│   │   ├── pages/             # 페이지 컴포넌트
│   │   ├── services/          # API 호출 및 비즈니스 로직
│   │   ├── utils/             # 유틸리티 함수 및 상수
│   │   ├── index.js           # 애플리케이션의 진입점
│   └── package.json       # 프로젝트 의존성 및 스크립트
├── 룰 프롬프트.txt           # 프로젝트 규칙 관련 문서
└── 요구사항 프롬프트.md      # 프로젝트 요구사항 관련 문서


---

## 6. 개발 및 배포 가이드라인

### 6.1. 개발 원칙

- **모듈화** 및 **관심사 분리** 철저: API(라우터), 서비스, 레포지토리, 모델/스키마.
- **주석 및 디버그 메시지**: 모두 한국어 사용.
- **일관성 유지**: 코드 스타일(네이밍, 디렉토리 구조, API 응답 규격 등) 통일.
- **DB 모델 변경 제한**: 테이블 구조 변경 시 사전 허가 필수.
- **무료 라이브러리만** 사용 가능.

### 6.2. 구축/테스트

- **로컬**:  
  - Docker-desktop으로 **단일 컨테이너** 구성(백엔드, 프론트엔드, DB 연동)
  - MySQL 컨테이너와 동일 네트워크 내에서 동작
  - `init-db.sql` 이용해 DB 초기 스키마 생성

- **운영/배포**:  
  - **GAE**에 배포 (HTTPS/SSL 자동)
  - `.env.local`을 변환해서 활용 예정
  - 단일 컨테이너 이미지로 빌드 → GAE에 업로드

### 6.3. 예외/에러 처리

- 409 Conflict를 통한 낙관적 락 충돌 처리
- HTTP 상태 코드 준수 (400, 401, 403, 404, 500 등)
- 에러 메시지는 한국어로 로그/응답



## . 추가 지침 및 룰

1. **동일 도메인 서빙**  
   - 프론트엔드와 백엔드는 동일 도메인 내에서 상호 호출.

2. **코드 생성 원칙**  
   - 요청된 내용만 정확히 수정/생성.
   - 추가 요청이 있을 경우 새 로직을 작성하되, 기존 구조는 최대한 유지.

3. **문서화**  
   - 프로젝트 내 주석, 로그, 디버깅 메시지는 모두 **한국어** 사용.
   - jsdoc, docstring 등으로 기본 설명 작성(불필요한 상세 문서화는 지양).