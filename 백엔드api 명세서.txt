백엔드 API 인터페이스 명세서
프론트엔드 개발팀을 위한 인터페이스 명세서로 개선하겠습니다. 데이터베이스 테이블 구조보다는 API 인터페이스에 중점을 두어 재구성했습니다.
1. API 개요
배송 실시간 관제 시스템의 백엔드 API는 REST 아키텍처를 따르며, JSON 형식으로 데이터를 교환합니다. 모든 API 요청에는 인증 정보(JWT 토큰)가 필요합니다.
1.1 기본 URL 구조
복사https://{server-domain}/api/{resource}
1.2 공통 응답 형식
json복사{
  "success": true|false,
  "message": "응답 메시지",
  "data": { ... },
  "version_info": {
    "current_version": 2
  },
  "is_latest": true|false
}
1.3 에러 응답 형식
json복사{
  "success": false,
  "message": "에러 메시지",
  "error": {
    "code": "ERROR_CODE",
    "detail": "상세 에러 설명",
    "fields": { "field_name": "필드별 오류 정보" }
  }
}
2. 인증 API
2.1 로그인

URL: POST /auth/login
설명: 사용자 로그인 및 토큰 발급
요청 본문:

json복사{
  "user_id": "user123",
  "password": "password123"
}

응답 예시:

json복사{
  "success": true,
  "message": "로그인 성공",
  "data": {
    "token": {
      "access_token": "eyJhbGc...",
      "refresh_token": "eyJhbGc..."
    },
    "user": {
      "user_id": "user123",
      "user_department": "CS",
      "user_role": "USER"
    }
  }
}
2.2 토큰 갱신

URL: POST /auth/refresh
설명: 리프레시 토큰을 사용해 액세스 토큰 갱신
요청 본문:

json복사{
  "refresh_token": "eyJhbGc..."
}

응답 예시:

json복사{
  "success": true,
  "message": "토큰이 갱신되었습니다",
  "data": {
    "access_token": "eyJhbGc...",
    "refresh_token": "eyJhbGc..."
  }
}
2.3 세션 체크

URL: GET /auth/check-session
설명: 현재 세션의 유효성 확인
응답 예시:

json복사{
  "success": true,
  "data": {
    "user": {
      "user_id": "user123",
      "user_department": "CS",
      "user_role": "USER"
    }
  }
}
2.4 로그아웃

URL: POST /auth/logout
설명: 사용자 로그아웃 및 토큰 무효화
요청 본문:

json복사{
  "refresh_token": "eyJhbGc..."
}

응답 예시:

json복사{
  "success": true,
  "message": "로그아웃이 완료되었습니다"
}
3. 대시보드 API
3.1 대시보드 목록 조회

URL: GET /dashboard/list
설명: 날짜 범위별 대시보드 목록 조회
쿼리 파라미터:

date: 단일 날짜 (YYYY-MM-DD)
또는 start_date & end_date: 날짜 범위


응답 예시:

json복사{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "date_range": {
      "oldest_date": "2025-01-01",
      "latest_date": "2025-03-31"
    },
    "items": [
      {
        "dashboard_id": 123,
        "order_no": "ORD-12345",
        "type": "DELIVERY",
        "status": "WAITING",
        "department": "CS",
        "warehouse": "SEOUL",
        "eta": "2025-03-20T14:30:00+09:00",
        "create_time": "2025-03-18T10:00:00+09:00",
        "depart_time": null,
        "customer": "홍길동",
        "region": "서울 강남구 역삼동",
        "version": 1,
        "sla": "표준"
      },
      // ... 더 많은
    ],
    "user_role": "USER",
    "is_admin": false
  }
}
3.2 대시보드 상세 조회

URL: GET /dashboard/{dashboard_id}
설명: 대시보드 상세 정보 조회
쿼리 파라미터:

client_version: 클라이언트가 알고 있는 현재 버전 (낙관적 락용)


응답 예시:

json복사{
  "success": true,
  "message": "상세 정보를 조회했습니다",
  "data": {
    "dashboard_id": 123,
    "order_no": "ORD-12345",
    "type": "DELIVERY",
    "status": "WAITING",
    "department": "CS",
    "warehouse": "SEOUL",
    "sla": "표준",
    "eta": "2025-03-20T14:30:00+09:00",
    "create_time": "2025-03-18T10:00:00+09:00",
    "depart_time": null,
    "complete_time": null,
    "postal_code": "12345",
    "address": "서울시 강남구 역삼동 123-45",
    "customer": "홍길동",
    "contact": "010-1234-5678",
    "driver_name": null,
    "driver_contact": null,
    "distance": 15,
    "duration_time": 45,
    "region": "서울 강남구 역삼동",
    "city": "서울",
    "county": "강남구",
    "district": "역삼동",
    "version": 1,
    "remarks": [
      {
        "remark_id": 456,
        "dashboard_id": 123,
        "content": "고객이 빠른 배송 요청함",
        "created_at": "2025-03-18T10:30:00+09:00",
        "created_by": "user123",
        "formatted_content": "user123: 고객이 빠른 배송 요청함"
      }
      // ... 더 많은 메모
    ]
  },
  "version_info": {
    "current_version": 1
  },
  "is_latest": true
}
3.3 대시보드 생성

URL: POST /dashboard
설명: 새 대시보드 생성
요청 본문:

json복사{
  "type": "DELIVERY",
  "warehouse": "SEOUL",
  "order_no": "ORD-12345",
  "eta": "2025-03-20T14:30:00+09:00",
  "sla": "표준",
  "postal_code": "12345",
  "address": "서울시 강남구 역삼동 123-45",
  "customer": "홍길동",
  "contact": "010-1234-5678",
  "remark": "고객이 빠른 배송 요청함"
}

응답 예시:

json복사{
  "success": true,
  "message": "대시보드가 생성되었습니다",
  "data": {
    // 생성된 대시보드 정보 (3.2와 동일한 구조)
  }
}
3.4 상태 변경

URL: PATCH /dashboard/{dashboard_id}/status
설명: 대시보드 상태 변경
쿼리 파라미터:

client_version: 클라이언트가 알고 있는 현재 버전 (낙관적 락용)


요청 본문:

json복사{
  "status": "IN_PROGRESS",
  "is_admin": false
}

응답 예시:

json복사{
  "success": true,
  "message": "IN_PROGRESS 상태로 변경되었습니다",
  "data": {
    // 업데이트된 대시보드 정보
  },
  "version_info": {
    "current_version": 2
  }
}
3.5 필드 수정

URL: PATCH /dashboard/{dashboard_id}/fields
설명: 대시보드 필드 수정
쿼리 파라미터:

client_version: 클라이언트가 알고 있는 현재 버전 (낙관적 락용)


요청 본문:

json복사{
  "eta": "2025-03-21T15:30:00+09:00",
  "customer": "김철수",
  "contact": "010-9876-5432"
}

응답 예시:

json복사{
  "success": true,
  "message": "필드가 업데이트되었습니다",
  "data": {
    // 업데이트된 대시보드 정보
  },
  "version_info": {
    "current_version": 2
  }
}
3.6 배차 처리

URL: POST /dashboard/assign
설명: 다중 대시보드 배차 처리
요청 본문:

json복사{
  "dashboard_ids": [123, 124, 125],
  "driver_name": "이기사",
  "driver_contact": "010-5555-6666",
  "client_versions": {
    "123": 1,
    "124": 2,
    "125": 1
  }
}

응답 예시:

json복사{
  "success": true,
  "message": "배차가 완료되었습니다",
  "data": {
    "updated_dashboards": [
      // 업데이트된 대시보드 정보 목록
    ]
  }
}
3.7 주문번호로 검색

URL: GET /dashboard/search
설명: 주문번호로 대시보드 검색
쿼리 파라미터:

order_no: 검색할 주문번호


응답 예시:

json복사{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "date_range": {
      "oldest_date": "2025-01-01",
      "latest_date": "2025-03-31"
    },
    "items": [
      // 검색 결과 대시보드 목록
    ],
    "user_role": "USER",
    "is_admin": false
  }
}
3.8 대시보드 삭제 (관리자 전용)

URL: DELETE /dashboard
설명: 대시보드 삭제
요청 본문:

json복사{
  "dashboard_ids": [123, 124]
}

응답 예시:

json복사{
  "success": true,
  "message": "선택한 항목이 삭제되었습니다",
  "data": {
    "deleted_count": 2
  }
}
4. 메모 API
4.1 메모 목록 조회

URL: GET /dashboard/{dashboard_id}/remarks
설명: 대시보드 ID별 메모 목록 조회
응답 예시:

json복사[
  {
    "remark_id": 456,
    "dashboard_id": 123,
    "content": "고객이 빠른 배송 요청함",
    "created_at": "2025-03-18T10:30:00+09:00",
    "created_by": "user123",
    "formatted_content": "user123: 고객이 빠른 배송 요청함"
  },
  // ... 더 많은 메모
]
4.2 메모 생성

URL: POST /dashboard/{dashboard_id}/remarks
설명: 메모 생성
쿼리 파라미터:

dashboard_version: 클라이언트가 알고 있는 대시보드 버전 (낙관적 락용)


요청 본문:

json복사{
  "content": "고객이 저녁에만 수령 가능하다고 함"
}

응답 예시:

json복사{
  "remark_id": 457,
  "dashboard_id": 123,
  "content": "고객이 저녁에만 수령 가능하다고 함",
  "created_at": "2025-03-18T14:30:00+09:00",
  "created_by": "user123",
  "formatted_content": "user123: 고객이 저녁에만 수령 가능하다고 함"
}
4.3 메모 수정

URL: PATCH /dashboard/{dashboard_id}/remarks/{remark_id}
설명: 메모 수정
쿼리 파라미터:

dashboard_version: 클라이언트가 알고 있는 대시보드 버전 (낙관적 락용)


요청 본문:

json복사{
  "content": "고객이 저녁 6시 이후에만 수령 가능하다고 함"
}

응답 예시:

json복사{
  "remark_id": 458,
  "dashboard_id": 123,
  "content": "고객이 저녁 6시 이후에만 수령 가능하다고 함",
  "created_at": "2025-03-18T14:35:00+09:00",
  "created_by": "user123",
  "formatted_content": "user123: 고객이 저녁 6시 이후에만 수령 가능하다고 함"
}
5. 시각화 API
5.1 배송 현황 데이터

URL: GET /visualization/delivery_status
설명: 배송 현황 시각화 데이터 조회
쿼리 파라미터:

start_date: 시작 날짜 (YYYY-MM-DD)
end_date: 종료 날짜 (YYYY-MM-DD)


응답 예시:

json복사{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "type": "delivery_status",
    "total_count": 250,
    "department_breakdown": {
      "CS": {
        "total": 100,
        "status_breakdown": [
          {"status": "WAITING", "count": 30, "percentage": 30.0},
          {"status": "IN_PROGRESS", "count": 40, "percentage": 40.0},
          {"status": "COMPLETE", "count": 20, "percentage": 20.0},
          {"status": "ISSUE", "count": 5, "percentage": 5.0},
          {"status": "CANCEL", "count": 5, "percentage": 5.0}
        ]
      },
      "HES": {
        // 유사한 구조
      },
      "LENOVO": {
        // 유사한 구조
      }
    }
  },
  "date_range": {
    "oldest_date": "2025-01-01",
    "latest_date": "2025-03-31"
  }
}
5.2 시간대별 접수량 데이터

URL: GET /visualization/hourly_orders
설명: 시간대별 접수량 시각화 데이터 조회
쿼리 파라미터:

start_date: 시작 날짜 (YYYY-MM-DD)
end_date: 종료 날짜 (YYYY-MM-DD)


응답 예시:

json복사{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "type": "hourly_orders",
    "total_count": 250,
    "average_count": 35.7,
    "department_breakdown": {
      "CS": {
        "total": 100,
        "hourly_counts": {
          "09-10": 12,
          "10-11": 15,
          // ... 더 많은 시간대
          "야간(19-09)": 10
        }
      },
      "HES": {
        // 유사한 구조
      },
      "LENOVO": {
        // 유사한 구조
      }
    },
    "time_slots": [
      {"label": "09-10", "start": 9, "end": 10},
      {"label": "10-11", "start": 10, "end": 11},
      // ... 더 많은 시간대
      {"label": "야간(19-09)", "start": 19, "end": 9}
    ]
  },
  "date_range": {
    "oldest_date": "2025-01-01",
    "latest_date": "2025-03-31"
  }
}
5.3 조회 가능 날짜 범위

URL: GET /visualization/date_range
설명: 시각화 데이터 조회 가능 날짜 범위
응답 예시:

json복사{
  "success": true,
  "message": "조회 가능 날짜 범위를 조회했습니다",
  "date_range": {
    "oldest_date": "2025-01-01",
    "latest_date": "2025-03-31"
  }
}
6. 낙관적 락(Optimistic Lock) 처리 가이드
6.1 락 충돌 응답 형식
json복사{
  "success": false,
  "message": "다른 사용자가 이미 수정하여 버전이 변경되었습니다. 최신 데이터를 확인하세요.",
  "data": {
    // 최신 대시보드 정보
  },
  "version_info": {
    "current_version": 2
  },
  "is_latest": false
}
6.2 프론트엔드 구현 가이드
6.2.1 버전 관리

대시보드 조회 시 서버에서 반환된 version_info.current_version 값을 상태에 저장합니다.
수정 요청 시 이 버전 정보를 함께 전송합니다:

필드 수정: client_version 쿼리 파라미터
상태 변경: client_version 쿼리 파라미터
메모 생성/수정: dashboard_version 쿼리 파라미터
배차 처리: client_versions 요청 바디 객체



6.2.2 충돌 처리

success: false 응답이 오면 충돌 여부를 확인합니다.
version_info가 포함되어 있다면 낙관적 락 충돌 상황입니다.
data 필드에서 최신 데이터를 추출하여 UI를 자동으로 갱신합니다.
사용자에게 충돌 발생 및 최신 데이터로 갱신되었음을 알림합니다.
필요한 경우 사용자의 변경 사항을 병합하거나 재적용할 수 있는 옵션을 제공합니다.

6.3 메모 작업 시 버전 관리
메모 작업(생성/수정)은 대시보드 버전과 연계되어 있습니다. 따라서:

메모 작업 시 현재 알고 있는 대시보드 버전을 dashboard_version 쿼리 파라미터로 전송
충돌 발생 시 409 응답에 최신 대시보드 정보와 메모 목록이 포함됨
이를 통해 대시보드 데이터와 메모 목록을 함께 갱신하여 일관성 유지

7. 인증 및 권한 관리
7.1 인증 헤더
모든 API 요청에는 다음 헤더가 필요합니다:
복사Authorization: Bearer {access_token}
7.2 권한별 제약사항
7.2.1 일반 사용자(USER)

상태 변경 제약: WAITING → IN_PROGRESS → COMPLETE/ISSUE/CANCEL만 가능
배차 처리 제약: 대기(WAITING) 상태 주문만 배차 가능
주문 삭제 불가: DELETE 요청 접근 불가

7.2.2 관리자(ADMIN)

상태 변경 자유: 모든 상태 간 자유로운 변경 가능
배차 처리 자유: 모든 상태의 주문 배차 가능
주문 삭제 가능: DELETE 요청 접근 가능

8. 에러 처리
8.1 주요 HTTP 상태 코드

400: 클라이언트 요청 오류 (유효하지 않은 파라미터)
401: 인증 실패 (토큰 만료 또는 유효하지 않음)
403: 권한 부족 (접근 권한 없음)
404: 리소스 없음 (요청한 ID의 데이터 없음)
409: 낙관적 락 충돌 (버전 불일치)
423: 비관적 락 충돌 (다른 사용자가 편집 중)
500: 서버 내부 오류

8.2 비관적 락 충돌 응답
json복사{
  "success": false,
  "message": "다른 사용자가 수정 중입니다: user123",
  "data": null
}
9. API 확장성 고려사항
9.1 필드 추가
API 응답에 새 필드가 추가될 수 있습니다. 클라이언트는 알 수 없는 필드를 무시하도록 구현해야 합니다.
9.2 후속 버전
API 호환성을 유지하기 위해 중요한 변경사항은 별도의 버전으로 제공될 수 있습니다. 이 경우 URL 경로에 버전 정보가 포함됩니다.
10. 클라이언트 요구사항

모든 변경 작업 전 최신 버전 확인 및 전송
낙관적 락 충돌 발생 시 자동 UI 갱신 및 사용자 알림 표시
비관적 락 충돌 발생 시 사용자 알림 및 재시도 옵션 제공
모든 날짜/시간은 ISO 8601 형식으로 전송 (예: "2025-03-18T10:30:00+09:00")
세션 만료 시 로그인 페이지로 리디렉션 및 현재 URL 저장