1. 시스템 개요
1.1 서비스 목적

기업 내부 배송 실시간 관제 및 데이터 시각화 서비스
ETA(예상 도착 시간) 기준 주문 관리 및 모니터링
시간대별 주문 분석 및 효율적인 배차 관리

1.2 주요 특징

실시간 배송 상태 관리 (대기, 진행, 완료, 이슈, 취소)
배차 처리 및 담당자 배정
권한 기반 접근 제어 (일반 사용자/관리자)
낙관적 락과 비관적 락을 활용한 동시성 제어
대시보드와 메모 관리 기능 분리

2. API 공통 규칙
2.1 기본 응답 형식
jsonCopy{
  "success": true/false,
  "message": "작업 결과 메시지",
  "data": { /* 응답 데이터 */ }
}
2.2 인증 헤더

모든 API 요청에 JWT 토큰을 포함해야 함
형식: Authorization: Bearer {access_token}

2.3 오류 응답 코드

400 Bad Request: 요청 데이터 형식 오류
401 Unauthorized: 인증 실패/토큰 만료
403 Forbidden: 권한 부족
404 Not Found: 리소스 없음
409 Conflict: 낙관적 락 충돌
423 Locked: 비관적 락 충돌
500 Internal Server Error: 서버 내부 오류

2.4 날짜/시간 형식

요청/응답 데이터: ISO 8601 형식 (YYYY-MM-DDThh:mm:ss)
쿼리 파라미터: YYYY-MM-DD 형식
시간대: KST (한국 표준시)

3. 인증 API
3.1 로그인

URL: POST /auth/login
설명: 사용자 인증 및 토큰 발급
요청:
jsonCopy{
  "user_id": "사용자ID",
  "password": "비밀번호"
}

응답:
jsonCopy{
  "success": true,
  "message": "로그인 성공",
  "token": {
    "access_token": "JWT토큰",
    "refresh_token": "JWT토큰"
  },
  "user": {
    "user_id": "사용자ID",
    "user_department": "CS|HES|LENOVO",
    "user_role": "ADMIN|USER"
  }
}


3.2 세션 확인

URL: GET /auth/check-session
설명: 현재 토큰의 유효성 확인
헤더: Authorization: Bearer {access_token}
응답:
jsonCopy{
  "success": true,
  "user": {
    "user_id": "사용자ID",
    "user_department": "CS|HES|LENOVO",
    "user_role": "ADMIN|USER"
  }
}


3.3 토큰 갱신

URL: POST /auth/refresh
설명: 리프레시 토큰으로 액세스 토큰 갱신
요청:
jsonCopy{
  "refresh_token": "JWT리프레시토큰"
}

응답:
jsonCopy{
  "success": true,
  "message": "토큰이 갱신되었습니다",
  "token": {
    "access_token": "새로운JWT토큰",
    "refresh_token": "새로운리프레시토큰"
  }
}


3.4 로그아웃

URL: POST /auth/logout
설명: 리프레시 토큰 제거를 통한 로그아웃
요청:
jsonCopy{
  "refresh_token": "JWT리프레시토큰"
}

응답:
jsonCopy{
  "success": true,
  "message": "로그아웃이 완료되었습니다"
}


4. 대시보드 API
4.1 대시보드 목록 조회

URL: GET /dashboard/list
설명: ETA 기준 대시보드 목록 조회 (권한 기반)
쿼리 파라미터:

date: 단일 날짜(YYYY-MM-DD) - 선택적
start_date: 시작일(YYYY-MM-DD) - 선택적
end_date: 종료일(YYYY-MM-DD) - 선택적


응답:
jsonCopy{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "date_range": {
      "oldest_date": "YYYY-MM-DD",
      "latest_date": "YYYY-MM-DD"
    },
    "items": [
      {
        "dashboard_id": 123,
        "type": "DELIVERY|RETURN",
        "department": "CS|HES|LENOVO",
        "warehouse": "SEOUL|BUSAN|GWANGJU|DAEJEON",
        "status": "WAITING|IN_PROGRESS|COMPLETE|ISSUE|CANCEL",
        "order_no": "12345-67890",
        "eta": "YYYY-MM-DDThh:mm:ss",
        "create_time": "YYYY-MM-DDThh:mm:ss",
        "depart_time": "YYYY-MM-DDThh:mm:ss",
        "customer": "고객명",
        "region": "서울 강남구 역삼동",
        "driver_name": "배송기사명",
        "version": 1,
        "sla": "표준|특급|지정"
      }
    ],
    "user_role": "ADMIN|USER" // 추가: 권한 정보 포함
  }
}


4.2 관리자 대시보드 목록 조회 (레거시 API)

URL: GET /dashboard/admin/list
설명: 관리자 전용 대시보드 목록 (4.1과 동일한 데이터 형식)
참고: 프론트엔드 통합 시 /dashboard/list로 통일 예정

4.3 대시보드 생성

URL: POST /dashboard
설명: 신규 배송 주문 생성 (메모 저장 포함)
요청:
jsonCopy{
  "type": "DELIVERY|RETURN",
  "warehouse": "SEOUL|BUSAN|GWANGJU|DAEJEON",
  "order_no": "12345-67890",
  "eta": "YYYY-MM-DDThh:mm:ss",
  "sla": "표준|특급|지정",
  "postal_code": "12345",
  "address": "상세 주소",
  "customer": "고객명",
  "contact": "010-1234-5678",
  "remark": "메모 내용"
}

응답: 생성된 대시보드 상세 정보 (4.4 참조)
중요 기능:

remark 필드가 있으면 별도의 DashboardRemark 테이블에 자동 저장
메모 작성자는 API 호출한 사용자로 설정됨



4.4 대시보드 상세 조회

URL: GET /dashboard/{dashboard_id}
설명: 특정 대시보드의 상세 정보 조회
응답:
jsonCopy{
  "success": true,
  "message": "상세 정보를 조회했습니다",
  "data": {
    "dashboard_id": 123,
    "type": "DELIVERY|RETURN",
    "department": "CS|HES|LENOVO",
    "warehouse": "SEOUL|BUSAN|GWANGJU|DAEJEON",
    "status": "WAITING|IN_PROGRESS|COMPLETE|ISSUE|CANCEL",
    "order_no": "12345-67890",
    "eta": "YYYY-MM-DDThh:mm:ss",
    "create_time": "YYYY-MM-DDThh:mm:ss",
    "depart_time": "YYYY-MM-DDThh:mm:ss",
    "complete_time": "YYYY-MM-DDThh:mm:ss",
    "postal_code": "12345",
    "address": "상세 주소",
    "customer": "고객명",
    "contact": "010-1234-5678",
    "driver_name": "배송기사명",
    "driver_contact": "010-1234-5678",
    "region": "서울 강남구 역삼동",
    "city": "서울",
    "county": "강남구",
    "district": "역삼동",
    "distance": 15,
    "duration_time": 45,
    "version": 1,
    "sla": "표준|특급|지정",
    "remarks": [
      {
        "remark_id": 456,
        "dashboard_id": 123,
        "content": "메모 내용",
        "created_at": "YYYY-MM-DDThh:mm:ss",
        "created_by": "작성자ID",
        "version": 1,
        "formatted_content": "메모 내용"
      }
    ]
  }
}


4.5 상태 업데이트

URL: PATCH /dashboard/{dashboard_id}/status
설명: 주문 상태 변경 (권한 기반)
요청:
jsonCopy{
  "status": "WAITING|IN_PROGRESS|COMPLETE|ISSUE|CANCEL",
  "is_admin": false,
  "version": 1
}

응답: 업데이트된 대시보드 상세 정보 (4.4 참조)
권한 규칙:

일반 사용자: 정해진 상태 흐름만 가능 (WAITING → IN_PROGRESS → COMPLETE/ISSUE/CANCEL)
관리자: 모든 상태 간 변경 가능
is_admin=true로 요청 시 실제 관리자 권한 검증



4.6 필드 업데이트

URL: PATCH /dashboard/{dashboard_id}/fields
설명: 주문 필드 정보 변경
요청:
jsonCopy{
  "eta": "YYYY-MM-DDThh:mm:ss",
  "customer": "고객명",
  "contact": "010-1234-5678",
  "address": "상세 주소",
  "postal_code": "12345",
  "remark": "메모 내용",
  "version": 1
}

응답: 업데이트된 대시보드 상세 정보 (4.4 참조)

4.7 배차 처리

URL: POST /dashboard/assign
설명: 여러 주문에 배송 담당자 배정
요청:
jsonCopy{
  "dashboard_ids": [123, 456, 789],
  "driver_name": "배송기사명",
  "driver_contact": "010-1234-5678",
  "versions": {
    "123": 1,
    "456": 2,
    "789": 1
  }
}

응답:
jsonCopy{
  "success": true,
  "message": "배차가 완료되었습니다",
  "data": {
    "updated_dashboards": [
      // 업데이트된 대시보드 정보 (상세 내용 생략)
    ]
  }
}


4.8 대시보드 삭제

URL: DELETE /dashboard
설명: 주문 삭제 (관리자 전용)
요청 본문: 삭제할 대시보드 ID 배열 ([123, 456, 789])
응답:
jsonCopy{
  "success": true,
  "message": "선택한 항목이 삭제되었습니다",
  "data": {
    "deleted_count": 3
  }
}

권한: 관리자(ADMIN) 전용

4.9 주문번호 검색

URL: GET /dashboard/search?order_no={주문번호}
설명: 주문번호로 대시보드 검색
응답: 대시보드 목록 (4.1 참조)

5. 메모 API
5.1 메모 목록 조회

URL: GET /dashboard/{dashboard_id}/remarks
설명: 대시보드 ID별 메모 목록 조회
응답:
jsonCopy[
  {
    "remark_id": 456,
    "dashboard_id": 123,
    "content": "메모 내용",
    "created_at": "YYYY-MM-DDThh:mm:ss",
    "created_by": "작성자ID",
    "version": 1,
    "formatted_content": "메모 내용"
  }
]


5.2 메모 생성

URL: POST /dashboard/{dashboard_id}/remarks
설명: 새 메모 생성 (비관적 락 적용)
요청:
jsonCopy{
  "content": "메모 내용"
}

응답: 생성된 메모 정보 (5.1 참조)

5.3 메모 업데이트

URL: PUT /dashboard/remarks/{remark_id}
설명: 메모 내용 업데이트 (낙관적 락 + 비관적 락)
요청:
jsonCopy{
  "content": "변경할 메모 내용",
  "version": 1
}

응답: 업데이트된 메모 정보 (5.1 참조)

6. 시각화 API
6.1 배송 현황 데이터

URL: GET /visualization/delivery_status?start_date={시작일}&end_date={종료일}
설명: create_time 기준 배송 상태별 통계
응답:
jsonCopy{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "type": "delivery_status",
    "total_count": 124,
    "department_breakdown": {
      "CS": {
        "total": 45,
        "status_breakdown": [
          {"status": "WAITING", "count": 15, "percentage": 33.33},
          {"status": "IN_PROGRESS", "count": 20, "percentage": 44.44},
          {"status": "COMPLETE", "count": 5, "percentage": 11.11},
          {"status": "ISSUE", "count": 3, "percentage": 6.67},
          {"status": "CANCEL", "count": 2, "percentage": 4.44}
        ]
      },
      "HES": { /* 생략 */ },
      "LENOVO": { /* 생략 */ }
    }
  },
  "date_range": {
    "oldest_date": "YYYY-MM-DD",
    "latest_date": "YYYY-MM-DD"
  }
}


6.2 시간대별 접수량 데이터

URL: GET /visualization/hourly_orders?start_date={시작일}&end_date={종료일}
설명: create_time 기준 시간대별 주문 접수 통계
응답:
jsonCopy{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "type": "hourly_orders",
    "total_count": 124,
    "average_count": 41.3,
    "department_breakdown": {
      "CS": {
        "total": 45,
        "hourly_counts": {
          "09-10": 5,
          "10-11": 8,
          // ... 생략
          "18-19": 4,
          "야간(19-09)": 7
        }
      },
      "HES": { /* 생략 */ },
      "LENOVO": { /* 생략 */ }
    },
    "time_slots": [
      {"label": "09-10", "start": 9, "end": 10},
      {"label": "10-11", "start": 10, "end": 11},
      // ... 생략
      {"label": "18-19", "start": 18, "end": 19},
      {"label": "야간(19-09)", "start": 19, "end": 9}
    ]
  },
  "date_range": {
    "oldest_date": "YYYY-MM-DD",
    "latest_date": "YYYY-MM-DD"
  }
}


6.3 조회 가능 날짜 범위

URL: GET /visualization/date_range
설명: 시스템에서 조회 가능한 날짜 범위 정보
응답:
jsonCopy{
  "success": true,
  "message": "조회 가능 날짜 범위를 조회했습니다",
  "date_range": {
    "oldest_date": "YYYY-MM-DD",
    "latest_date": "YYYY-MM-DD"
  }
}


7. 권한 체계
7.1 사용자 권한 레벨

USER: 일반 사용자

조회, 생성, 제한된 상태 변경 가능
상태 변경 규칙: WAITING → IN_PROGRESS → COMPLETE/ISSUE/CANCEL


ADMIN: 관리자

모든 작업 가능 (삭제, 무제한 상태 변경)
대시보드 삭제 등 특수 기능 접근 가능



7.2 프론트엔드 권한 활용 방식

API 응답에 user_role 정보를 포함하여 UI 조건부 렌더링
권한 부족 시 403 Forbidden 응답으로 처리
접근 불가 기능을 UI에서 비활성화 또는 숨김 처리

7.3 관리자 기능 사용 예시

대시보드 목록 통합 조회 (권한에 따라 기능 활성화)
상태 변경 시 일반 사용자는 정해진 흐름만 가능하도록 UI 제어
관리자만 삭제 버튼 표시 (권한 기반 UI 렌더링)

8. 데이터 모델 참조
8.1 주요 모델

Dashboard: 배송 주문 정보
DashboardRemark: 주문 관련 메모
DashboardLock: 비관적 락 관리
PostalCode: 우편번호 및 지역 정보
User: 사용자 정보

8.2 낙관적 락과 비관적 락

낙관적 락(Optimistic Lock):

version 필드를 통한 충돌 감지
수정 시 version 증가
충돌 시 409 Conflict 응답


비관적 락(Pessimistic Lock):

DashboardLock 테이블을 통한 편집 잠금
동시 편집 시도 시 423 Locked 응답
일정 시간 후 자동 해제 (기본 5분)



9. 주요 수정사항 및 개선 방향
9.1 대시보드 생성 시 메모 처리

현재 상태: remark 필드 처리 로직 누락으로 오류 발생
개선 방향:

DashboardService에 DashboardRemarkRepository 의존성 주입
대시보드 생성 시 remark 필드를 별도 DashboardRemark 테이블에 저장
메모 작성자 정보 함께 기록


프론트엔드 고려사항:

대시보드 생성 시 remark 필드를 포함해 요청
생성 후 메모 정보는 remarks 배열에서 확인 가능



9.2 메모 필드 NULL 처리

현재 상태: formatted_content 필드 NULL 값으로 오류 발생
개선 방향:

RemarkResponse 스키마에서 formatted_content 필드를 Optional로 설정
NULL 값 조회 시 빈 문자열("")로 기본값 처리


프론트엔드 고려사항:

메모 데이터 처리 시 formatted_content 필드가 빈 문자열일 수 있음을 고려



9.3 API 통합 및 권한 기반 접근 제어

현재 상태: 일반/관리자 API가 분리되어 있음
개선 방향:

대시보드 목록 조회 API 통합 (/dashboard/list)
응답에 사용자 권한 정보 포함
권한 기반으로 기능 접근 제어


프론트엔드 고려사항:

단일 목록 API 사용
권한 정보에 따라 UI 컴포넌트 조건부 렌더링
삭제 버튼 등은 관리자에게만 표시



9.4 요약 및 구현 우선순위

대시보드 생성 시 메모 저장 로직 구현 (높은 우선순위)
formatted_content NULL 처리 오류 해결 (높은 우선순위)
일반/관리자 대시보드 API 통합 (중간 우선순위)
API 응답 형식 통일 및 개선 (낮은 우선순위)

프론트엔드 개발자는 본 명세서를 참고하여 백엔드 API와의 통합을 진행해 주시기 바랍니다. 특히 권한 기반 UI 처리와 메모 관련 기능에 주의가 필요합니다.