1. 시스템 개요
본 시스템은 배송 관제를 위한 실시간 대시보드 시스템으로, FastAPI 기반 백엔드와 React 기반 프론트엔드로 구성되어 있습니다. 시스템의 주요 기능은 다음과 같습니다:

사용자 인증 및 권한 관리
배송/반품 정보 관리 및 상태 추적
실시간 대시보드 및 상태 업데이트
비관적 락을 통한 동시성 제어
배송 데이터 시각화 및 통계

<a id="2-인증authentication-api"></a>
2. 인증(Authentication) API
2.1. 로그인 API

엔드포인트: /auth/login (POST)
설명: 사용자 로그인 및 토큰 발급
요청 데이터:
jsonCopy{
  "user_id": "user123",
  "password": "userPassword"
}

응답 데이터:
jsonCopy{
  "token": {
    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  },
  "user": {
    "user_id": "user123",
    "user_department": "CS",
    "user_role": "USER"
  }
}

동작 방식:

AuthService에서 사용자 인증 후 JWT 토큰 생성
액세스 토큰(60분)과 리프레시 토큰(7일) 발급
리프레시 토큰은 refresh_token 테이블에 저장
사용자 정보와 함께 응답 반환



2.2. 세션 확인 API

엔드포인트: /auth/check-session (GET)
설명: 현재 세션의 유효성 검증
요청 헤더: Authorization: Bearer {access_token}
응답 데이터:
jsonCopy{
  "success": true,
  "user": {
    "user_id": "user123",
    "user_department": "CS",
    "user_role": "USER"
  }
}

동작 방식:

JWT 토큰 검증 및 만료 확인
토큰에 포함된 사용자 정보 추출하여 반환



2.3. 토큰 갱신 API

엔드포인트: /auth/refresh (POST)
설명: 리프레시 토큰을 이용한 액세스 토큰 갱신
요청 데이터:
jsonCopy{
  "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}

응답 데이터:
jsonCopy{
  "success": true,
  "message": "토큰이 갱신되었습니다",
  "token": {
    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  }
}

동작 방식:

리프레시 토큰의 DB 유효성 검증
새 액세스 토큰과 리프레시 토큰 생성
토큰 정보 반환



2.4. 로그아웃 API

엔드포인트: /auth/logout (POST)
설명: 사용자 로그아웃 및 리프레시 토큰 삭제
요청 데이터:
jsonCopy{
  "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}

응답 데이터:
jsonCopy{
  "success": true,
  "message": "로그아웃이 완료되었습니다"
}

동작 방식:

DB에서 리프레시 토큰 삭제
성공 메시지 반환



<a id="3-대시보드dashboard-api"></a>
3. 대시보드(Dashboard) API
3.1. 대시보드 목록 조회 API

엔드포인트: /dashboard/list (GET)
설명: ETA 기준으로 대시보드 목록 조회
요청 파라미터:

date: 단일 날짜 (YYYY-MM-DD)
또는 start_date와 end_date: 날짜 범위 (YYYY-MM-DD)


응답 데이터:
jsonCopy{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "date_range": {
      "oldest_date": "2023-01-01",
      "latest_date": "2023-12-31"
    },
    "items": [
      {
        "dashboard_id": 123,
        "type": "DELIVERY",
        "warehouse": "SEOUL",
        "order_no": "ORDER-123456",
        "eta": "2023-05-20T14:30:00+09:00",
        "department": "CS",
        "status": "WAITING",
        "driver_name": "김배송",
        "create_time": "2023-05-19T10:15:00+09:00",
        "depart_time": null,
        "customer": "홍길동",
        "region": "서울시 강남구 삼성동",
        "version": 1,
        "sla": "표준"
      }
    ],
    "user_role": "USER",
    "is_admin": false
  }
}

동작 방식:

DashboardService에서 날짜 파라미터 파싱
레포지토리에서 ETA 기준으로 대시보드 목록 조회
상태별로 정렬하여 결과 반환 (대기/진행 > 완료/이슈/취소)



3.2. 대시보드 생성 API

엔드포인트: /dashboard (POST)
설명: 새 대시보드(배송/반품 정보) 생성
요청 데이터:
jsonCopy{
  "type": "DELIVERY",
  "warehouse": "SEOUL",
  "order_no": "ORDER-123456",
  "eta": "2023-05-20T14:30:00+09:00",
  "sla": "표준",
  "postal_code": "12345",
  "address": "서울시 강남구 삼성동 123-456",
  "customer": "홍길동",
  "contact": "010-1234-5678",
  "remark": "배송 시 경비실에 맡겨주세요"
}

응답 데이터:
jsonCopy{
  "success": true,
  "message": "대시보드가 생성되었습니다",
  "data": {
    "dashboard_id": 123,
    "type": "DELIVERY",
    "warehouse": "SEOUL",
    "order_no": "ORDER-123456",
    "eta": "2023-05-20T14:30:00+09:00",
    "department": "CS",
    "status": "WAITING",
    "driver_name": null,
    "driver_contact": null,
    "create_time": "2023-05-19T10:15:00+09:00",
    "depart_time": null,
    "complete_time": null,
    "address": "서울시 강남구 삼성동 123-456",
    "postal_code": "12345",
    "customer": "홍길동",
    "contact": "010-1234-5678",
    "remarks": [
      {
        "remark_id": 45,
        "dashboard_id": 123,
        "content": "배송 시 경비실에 맡겨주세요",
        "created_at": "2023-05-19T10:15:00+09:00",
        "created_by": "user123"
      }
    ],
    "version": 1,
    "sla": "표준"
  }
}

동작 방식:

요청 데이터 유효성 검증 (우편번호, 연락처 등)
현재 시간을 create_time으로 설정
Dashboard 테이블에 레코드 생성
메모가 있는 경우 dashboard_remark 테이블에 저장
생성된 대시보드 상세 정보 반환



3.3. 대시보드 상세 조회 API

엔드포인트: /dashboard/{dashboard_id} (GET)
설명: 대시보드 상세 정보 조회 (메모 포함)
요청 파라미터: dashboard_id (경로 변수)
응답 데이터:
jsonCopy{
  "success": true,
  "message": "상세 정보를 조회했습니다",
  "data": {
    "dashboard_id": 123,
    "type": "DELIVERY",
    "warehouse": "SEOUL",
    "order_no": "ORDER-123456",
    "eta": "2023-05-20T14:30:00+09:00",
    "department": "CS",
    "status": "WAITING",
    "driver_name": "김배송",
    "driver_contact": "010-9876-5432",
    "create_time": "2023-05-19T10:15:00+09:00",
    "depart_time": null,
    "complete_time": null,
    "address": "서울시 강남구 삼성동 123-456",
    "postal_code": "12345",
    "distance": 15,
    "duration_time": 30,
    "customer": "홍길동",
    "contact": "010-1234-5678",
    "remarks": [
      {
        "remark_id": 45,
        "dashboard_id": 123,
        "content": "배송 시 경비실에 맡겨주세요",
        "created_at": "2023-05-19T10:15:00+09:00",
        "created_by": "user123"
      }
    ],
    "city": "서울시",
    "county": "강남구",
    "district": "삼성동",
    "version": 1,
    "sla": "표준"
  }
}

동작 방식:

대시보드 ID로 기본 정보 조회
연관된 메모 목록 함께 조회
상세 정보 통합하여 반환



3.4. 상태 업데이트 API

엔드포인트: /dashboard/{dashboard_id}/status (PATCH)
설명: 대시보드 상태 업데이트 (비관적 락 적용)
요청 파라미터: dashboard_id (경로 변수)
요청 데이터:
jsonCopy{
  "status": "IN_PROGRESS",
  "is_admin": false
}

응답 데이터:
jsonCopy{
  "success": true,
  "message": "진행 상태로 변경되었습니다",
  "data": {
    "dashboard_id": 123,
    "status": "IN_PROGRESS",
    "depart_time": "2023-05-20T09:30:00+09:00",
    "complete_time": null,
    "version": 2
  }
}

동작 방식:

비관적 락 획득 시도 (dashboard_lock 테이블)
상태 변경 규칙 검증 (일반 사용자의 경우)
상태 업데이트 및 관련 시간 필드(depart_time, complete_time) 갱신
락 해제 후 업데이트된 정보 반환



3.5. 필드 업데이트 API

엔드포인트: /dashboard/{dashboard_id}/fields (PATCH)
설명: 대시보드 필드 업데이트 (비관적 락 적용)
요청 파라미터: dashboard_id (경로 변수)
요청 데이터:
jsonCopy{
  "eta": "2023-05-21T15:00:00+09:00",
  "customer": "김길동",
  "contact": "010-2345-6789",
  "address": "서울시 강남구 역삼동 456-789",
  "postal_code": "12346"
}

응답 데이터:
jsonCopy{
  "success": true,
  "message": "필드가 업데이트되었습니다",
  "data": {
    "dashboard_id": 123,
    "eta": "2023-05-21T15:00:00+09:00",
    "customer": "김길동",
    "contact": "010-2345-6789",
    "address": "서울시 강남구 역삼동 456-789",
    "postal_code": "12346",
    "version": 2
  }
}

동작 방식:

비관적 락 획득 시도 (dashboard_lock 테이블)
필드 데이터 유효성 검증
필드 업데이트
락 해제 후 업데이트된 정보 반환



3.6. 배차 처리 API

엔드포인트: /dashboard/assign (POST)
설명: 여러 대시보드에 대한 배차 처리 (비관적 락 적용)
요청 데이터:
jsonCopy{
  "dashboard_ids": [123, 124, 125],
  "driver_name": "김배송",
  "driver_contact": "010-9876-5432"
}

응답 데이터:
jsonCopy{
  "success": true,
  "message": "배차가 완료되었습니다",
  "data": {
    "updated_dashboards": [
      {
        "dashboard_id": 123,
        "driver_name": "김배송",
        "driver_contact": "010-9876-5432",
        "version": 2
      },
      {
        "dashboard_id": 124,
        "driver_name": "김배송",
        "driver_contact": "010-9876-5432",
        "version": 2
      }
    ]
  }
}

동작 방식:

모든 대시보드에 대해 비관적 락 획득 시도
일부라도 실패 시 전체 롤백
모든 대시보드에 배차 정보 업데이트
락 해제 후 업데이트된 정보 반환



3.7. 대시보드 삭제 API

엔드포인트: /dashboard (DELETE)
설명: 대시보드 삭제 (관리자 전용)
요청 데이터:
jsonCopy[123, 124, 125]

응답 데이터:
jsonCopy{
  "success": true,
  "message": "선택한 항목이 삭제되었습니다",
  "data": {
    "deleted_count": 3
  }
}

동작 방식:

관리자 권한 검증
대시보드 삭제 (연관된 메모와 락도 자동 삭제)
삭제된 항목 수 반환



3.8. 주문번호 검색 API

엔드포인트: /dashboard/search (GET)
설명: 주문번호로 대시보드 검색
요청 파라미터: order_no (예: "ORDER-123456")
응답 데이터:
jsonCopy{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "date_range": {
      "oldest_date": "2023-01-01",
      "latest_date": "2023-12-31"
    },
    "items": [
      {
        "dashboard_id": 123,
        "type": "DELIVERY",
        "warehouse": "SEOUL",
        "order_no": "ORDER-123456",
        "eta": "2023-05-20T14:30:00+09:00",
        "department": "CS",
        "status": "WAITING",
        "driver_name": "김배송",
        "create_time": "2023-05-19T10:15:00+09:00",
        "depart_time": null,
        "customer": "홍길동",
        "region": "서울시 강남구 삼성동",
        "version": 1,
        "sla": "표준"
      }
    ],
    "user_role": "USER",
    "is_admin": false
  }
}

동작 방식:

주문번호로 정확히 일치하는 대시보드 검색
검색 결과 및 사용자 권한 정보 반환



<a id="4-메모remark-api"></a>
4. 메모(Remark) API
4.1. 메모 목록 조회 API

엔드포인트: /dashboard/{dashboard_id}/remarks (GET)
설명: 대시보드 ID별 메모 목록 조회
요청 파라미터: dashboard_id (경로 변수)
응답 데이터:
jsonCopy[
  {
    "remark_id": 45,
    "dashboard_id": 123,
    "content": "배송 시 경비실에 맡겨주세요",
    "created_at": "2023-05-19T10:15:00+09:00",
    "created_by": "user123",
    "formatted_content": "user123: 배송 시 경비실에 맡겨주세요"
  },
  {
    "remark_id": 46,
    "dashboard_id": 123,
    "content": "고객 부재중, 내일 재배송 예정",
    "created_at": "2023-05-20T16:30:00+09:00",
    "created_by": "driver456",
    "formatted_content": "driver456: 고객 부재중, 내일 재배송 예정"
  }
]

동작 방식:

대시보드 ID로 메모 목록 조회 (최신순 정렬)
메모 목록 반환



4.2. 메모 생성 API

엔드포인트: /dashboard/{dashboard_id}/remarks (POST)
설명: 대시보드에 새 메모 생성 (비관적 락 적용)
요청 파라미터: dashboard_id (경로 변수)
요청 데이터:
jsonCopy{
  "content": "고객 부재중, 내일 재배송 예정"
}

응답 데이터:
jsonCopy{
  "remark_id": 46,
  "dashboard_id": 123,
  "content": "고객 부재중, 내일 재배송 예정",
  "created_at": "2023-05-20T16:30:00+09:00",
  "created_by": "driver456",
  "formatted_content": "driver456: 고객 부재중, 내일 재배송 예정"
}

동작 방식:

비관적 락 획득 시도 (dashboard_lock 테이블)
메모 생성 및 사용자 ID 포함 형식화
락 해제 후 생성된 메모 정보 반환



4.3. 메모 업데이트 API

엔드포인트: /dashboard/remarks/{remark_id} (PUT)
설명: 메모 업데이트 (비관적 락 적용)
요청 파라미터: remark_id (경로 변수)
요청 데이터:
jsonCopy{
  "content": "수정: 고객과 통화 완료, 내일 오전 재배송 예정"
}

응답 데이터:
jsonCopy{
  "remark_id": 47,
  "dashboard_id": 123,
  "content": "수정: 고객과 통화 완료, 내일 오전 재배송 예정",
  "created_at": "2023-05-20T16:45:00+09:00",
  "created_by": "driver456",
  "formatted_content": "driver456: 수정: 고객과 통화 완료, 내일 오전 재배송 예정"
}

동작 방식:

메모 ID로 기존 메모 조회
비관적 락 획득 시도 (dashboard_lock 테이블)
새 메모 레코드 생성 (이력 관리 목적)
락 해제 후 생성된 메모 정보 반환



<a id="5-시각화visualization-api"></a>
5. 시각화(Visualization) API
5.1. 배송 현황 API

엔드포인트: /visualization/delivery_status (GET)
설명: 기간별 부서별 배송 현황 데이터 조회
요청 파라미터:

start_date: 시작 날짜 (YYYY-MM-DD)
end_date: 종료 날짜 (YYYY-MM-DD)


응답 데이터:
jsonCopy{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "type": "delivery_status",
    "total_count": 320,
    "department_breakdown": {
      "CS": {
        "total": 150,
        "status_breakdown": [
          {"status": "WAITING", "count": 30, "percentage": 20.0},
          {"status": "IN_PROGRESS", "count": 45, "percentage": 30.0},
          {"status": "COMPLETE", "count": 60, "percentage": 40.0},
          {"status": "ISSUE", "count": 10, "percentage": 6.67},
          {"status": "CANCEL", "count": 5, "percentage": 3.33}
        ]
      },
      "HES": {
        "total": 120,
        "status_breakdown": [
          {"status": "WAITING", "count": 25, "percentage": 20.83},
          {"status": "IN_PROGRESS", "count": 40, "percentage": 33.33},
          {"status": "COMPLETE", "count": 45, "percentage": 37.5},
          {"status": "ISSUE", "count": 7, "percentage": 5.83},
          {"status": "CANCEL", "count": 3, "percentage": 2.5}
        ]
      },
      "LENOVO": {
        "total": 50,
        "status_breakdown": [
          {"status": "WAITING", "count": 10, "percentage": 20.0},
          {"status": "IN_PROGRESS", "count": 15, "percentage": 30.0},
          {"status": "COMPLETE", "count": 20, "percentage": 40.0},
          {"status": "ISSUE", "count": 3, "percentage": 6.0},
          {"status": "CANCEL", "count": 2, "percentage": 4.0}
        ]
      }
    }
  },
  "date_range": {
    "oldest_date": "2023-01-01",
    "latest_date": "2023-12-31"
  }
}

동작 방식:

지정된 기간의 create_time 기준 데이터 조회
pandas 활용하여 부서별/상태별 데이터 집계
수량 및 비율 계산하여 구조화된 데이터 반환

5.2. 시간대별 접수량 API (계속)

엔드포인트: /visualization/hourly_orders (GET)
응답 데이터 (계속):
jsonCopy{
  "success": true,
  "message": "데이터를 조회했습니다",
  "data": {
    "type": "hourly_orders",
    "total_count": 320,
    "average_count": 40.0,
    "department_breakdown": {
      "CS": {
        "total": 150,
        "hourly_counts": {
          "09-10": 15,
          "10-11": 20,
          "11-12": 18,
          "12-13": 12,
          "13-14": 15,
          "14-15": 22,
          "15-16": 18,
          "16-17": 15,
          "17-18": 10,
          "18-19": 5,
          "야간(19-09)": 0
        }
      },
      "HES": { "..." },
      "LENOVO": { "..." }
    },
    "time_slots": [
      {"label": "09-10", "start": 9, "end": 10},
      {"label": "10-11", "start": 10, "end": 11},
      {"label": "11-12", "start": 11, "end": 12},
      {"label": "12-13", "start": 12, "end": 13},
      {"label": "13-14", "start": 13, "end": 14},
      {"label": "14-15", "start": 14, "end": 15},
      {"label": "15-16", "start": 15, "end": 16},
      {"label": "16-17", "start": 16, "end": 17},
      {"label": "17-18", "start": 17, "end": 18},
      {"label": "18-19", "start": 18, "end": 19},
      {"label": "야간(19-09)", "start": 19, "end": 9}
    ]
  },
  "date_range": {
    "oldest_date": "2023-01-01",
    "latest_date": "2023-12-31"
  }
}

동작 방식:

지정된 기간의 create_time 기준 데이터 조회
시간대 구분: 주간(09-19시, 1시간 단위), 야간(19-09시, 통합)
pandas 활용하여 부서별/시간대별 데이터 집계
일평균 데이터 계산 (total_count/기간 일수)
구조화된 응답 데이터 반환



5.3. 조회 가능 날짜 범위 API

엔드포인트: /visualization/date_range (GET)
설명: 시각화 데이터 조회 가능한 날짜 범위 조회
응답 데이터:
jsonCopy{
  "success": true,
  "message": "조회 가능 날짜 범위를 조회했습니다",
  "date_range": {
    "oldest_date": "2023-01-01",
    "latest_date": "2023-12-31"
  }
}

동작 방식:

create_time 컬럼의 최소/최대 값 조회
캐싱 적용하여 반복 조회 최적화 (TTL 1시간)
날짜 범위 정보 반환



<a id="6-공통-응답-형식"></a>
6. 공통 응답 형식
6.1. 성공 응답
모든 API는 기본적으로 다음과 같은 응답 형식을 따릅니다:
jsonCopy{
  "success": true,
  "message": "작업 성공 메시지",
  "data": {} // 실제 데이터 (API별로 상이)
}
6.2. 오류 응답
오류 발생 시 다음과 같은 응답 형식을 따릅니다:
jsonCopy{
  "success": false,
  "message": "오류 메시지",
  "detail": "상세 오류 내용" // 또는 구조화된 오류 정보
}
6.3. 주요 상태 코드

200 OK: 요청 성공
400 Bad Request: 잘못된 요청 (입력값 오류 등)
401 Unauthorized: 인증 필요
403 Forbidden: 권한 없음
404 Not Found: 리소스 찾을 수 없음
409 Conflict: 낙관적 락 충돌
423 Locked: 비관적 락 충돌 (다른 사용자가 편집 중)
500 Internal Server Error: 서버 내부 오류

<a id="7-비관적-락pessimistic-lock-시스템"></a>
7. 비관적 락(Pessimistic Lock) 시스템
7.1. 락 시스템 개요
본 시스템은 대시보드 데이터 동시성 제어를 위해 비관적 락 메커니즘을 사용합니다. 이는 여러 사용자가 동시에 같은 데이터를 수정하는 것을 방지합니다.

락 타입:

EDIT: 필드 수정 락
STATUS: 상태 변경 락
ASSIGN: 배차 처리 락
REMARK: 메모 수정 락


락 관리 테이블: dashboard_lock

dashboard_id: 락이 걸린 대시보드 ID
locked_by: 락을 획득한 사용자 ID
locked_at: 락 획득 시간
lock_type: 락 유형
expires_at: 락 만료 시간



7.2. 락 획득 및 해제 프로세스

락 획득 시도:

해당 대시보드에 대한 락 존재 확인
락이 없거나 만료된 경우: 새 락 생성
락이 있고 동일 사용자인 경우: 락 갱신
락이 있고 다른 사용자인 경우: 423 상태 코드로 예외 발생


락 타임아웃 처리:

기본 락 타임아웃: 5분 (300초)
만료된 락은 자동으로 정리됨


락 해제:

작업 완료 후 명시적으로 락 해제
오류 발생해도 finally 블록에서 락 해제 시도


충돌 정보 제공:

충돌 발생 시 현재 락을 보유한 사용자 정보 제공



7.3. 클라이언트 대응 전략
충돌 상황에서 프론트엔드 클라이언트의 대응 전략:

423 Locked 응답 처리:

사용자에게 다른 사용자가 편집 중임을 알림
응답에 포함된 locked_by 정보 표시


자동 재시도:

일정 시간 후 자동 재시도 옵션 제공
락 획득 실패 시 읽기 전용 모드로 전환


충돌 해결 UI:

충돌 발생 시 사용자에게 명확한 피드백 제공
충돌 발생 필드 강조 및 선택적 업데이트 옵션 제공



<a id="8-시간대-처리"></a>
8. 시간대 처리
8.1. 시간대 기본 정책

모든 시간은 한국 시간(KST, UTC+9)을 기준으로 처리
데이터베이스 연결 시 SET time_zone = '+09:00' 설정
클라이언트와 서버 간 시간대 일치성 유지

8.2. 날짜 처리 유틸리티
백엔드는 다음과 같은 시간대 처리 유틸리티를 제공합니다:

convert_to_kst(): UTC를 KST로 변환
get_current_time(): 현재 KST 시간 반환
get_date_range(): 날짜 문자열로부터 하루의 시작/종료 시간 계산
format_kst_datetime(): KST 시간을 지정된 형식의 문자열로 변환

8.3. 프론트엔드 구현 고려사항
프론트엔드 개발 시 다음 사항을 고려해야 합니다:

시간 표시:

모든 시간은 한국 시간(KST)으로 표시
사용자 브라우저 시간대와 무관하게 KST로 일관되게 표시


날짜/시간 입력:

날짜 선택기에서 선택한 날짜는 KST 기준으로 처리
시간 입력 시 KST 기준으로 서버에 전송


API 요청/응답 처리:

날짜 파라미터 전송 시 'YYYY-MM-DD' 형식 사용
응답으로 받은 시간은 ISO 8601 형식이므로 적절히 파싱하여 표시